using BRSERP;
using BRSERP.BD;
using BRSERP.Modelos.BRSERP;
using BRSERP.Modelos.Gestion;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Telerik.WinControls.UI.Localization;

namespace BRSTPV
{
    public partial class frmPrincipal : Telerik.WinControls.UI.RadForm
    {
        #region Variables

        #region Instancias
        //flags para evitar varias instancias de un mismo form
        public static bool lHayInstanciaTiposFormularios = false;
        public static bool lHayInstanciaAcercaDe = false;

        #endregion

        //colores que forman el gradiente del fondo
        public Color cGradSuperior = Color.WhiteSmoke;
        public Color cGradInferior = Color.SteelBlue;

        #endregion

        #region Formulario

        public frmPrincipal()
        {
            InitializeComponent();
            BRSComponentes.QuitarGripBotonera(radCommandBar1);

            //repintamos el fondo degradado
            foreach (Control c in this.Controls)
            {
                if (c is MdiClient)
                {
                    c.Paint += new PaintEventHandler(PaintClientBG);
                    c.SizeChanged += new EventHandler(SizeClientBG);
                }
            }
            AsignarAtajosTeclado();
        }

        private void frmPrincipal_Load(object sender, EventArgs e)
        {
            // Añadimos a la barra de iconos el evento de mostrar menú contextual
            radCommandBar1.CustomizeContextMenu.DropDownOpening += new CancelEventHandler(BRSLib.CustomizeContextMenu_DropDownOpening);

            // Damos el título a la ventana principal
            this.Text = Program.cNombreApp;

            // Leemos el archivo configuraxion.xml
            BRSLib.CargarAppConfig();
            // Leemos la configuración general, ya desde la base de datos
            BRSLib.CargarConfiguracionGeneral();

            // Aplicar idioma a objetos Telerik
            RadGridLocalizationProvider.CurrentProvider = new MySpanishRadGridLocalizationProvider();

            if (BRSLib.cLoginUsuario != null && BRSLib.cLoginPassword != null)
            {
                BRSLib.ObtenerDatosUsuario(BRSLib.cLoginUsuario, BRSLib.cLoginPassword, BRSLib.COD_BRSTESORERIA);
                if (BRSLib.nUsuario == -1)
                {
                    BRSLib.MostrarMensaje("¡Usuario o contraseña incorrecto! / Wrong user or password!", " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
                    Application.Exit();
                }


            }
            else
            {
                // Hacemos login
                frmLogin ofrmLogin = new frmLogin(Program.cVersion)
                {
                    NombreApp = Program.cNombreApp,
                    Version = Program.cVersion,
                    CodApp = BRSLib.COD_BRSTPV
                };

                Program.ofrmSplash.Estado = "Esperando a usuario";
                Program.ofrmSplash.Hide();

                ofrmLogin.ShowDialog();

                if (BRSLib.nUsuario == -1)
                {
                    BRSLib.MostrarMensaje("¡Usuario o contraseña incorrecto! / Wrong user or password!");
                    Application.Exit();
                }
                if (!Operarios.ExisteNusuario(Convert.ToInt16(BRSLib.nUsuario)))
                {
                    BRSLib.MostrarMensaje("¡Usuario no tiene permisos de acceso! / Permision denied!");
                    Application.Exit();
                }
                //BRSLib.cLoginUsuario;


                // Comprobamos si se puede entrar en BRSConta o no.
                BRSLib.permitirAccesoModulo(1, 12);
                //BRSComponentes.AnadirHintMenu(rmiGeneral);

                //rmiPrincipal.Focus();



            }

            Program.ofrmSplash.Estado = "Recuperando configuración";
            Program.ofrmSplash.Show();

            // Configuramos las Variables globales que utilizamos en funcion al idioma asignado al usuario
            BRSLib.ConfigurarMensajesGlobales(BRSLib.nIdioma);

            timer1.Enabled = true;

            BRSLib.CargarEstadoFormulario(this);

            Program.ofrmSplash.Close();
            Program.ofrmSplash.Dispose();
            BRSLib.AplicarTema(ref cGradInferior);

        }

        private void frmPrincipal_FormClosed(object sender, FormClosedEventArgs e)
        {
            BRSLib.GuardarEstadoFormulario(this);
        }

        private void frmPrincipal_Shown(object sender, EventArgs e)
        {
            SetForegroundWindow(Handle);
            this.BringToFront();
            Activate();
        }

        [DllImport("user32")]
        public static extern int SetForegroundWindow(IntPtr hwnd);

        protected void SizeClientBG(object sender, EventArgs e)
        {
            //redibuja el fondo degradado cuando se cambia el tamaño de las ventanas
            ((MdiClient)sender).Invalidate();
        }

        protected void PaintClientBG(object sender, PaintEventArgs e)
        {
            //dibuja un fondo degradado vertical compuesto por los colores de fondo a cabecera
            MdiClient mc = (MdiClient)sender;
            e.Graphics.Clip = new Region(mc.ClientRectangle);
            if (mc.ClientRectangle.Height != 0 && mc.ClientRectangle.Width != 0)
            {
                LinearGradientBrush lgb = new LinearGradientBrush(mc.ClientRectangle, cGradSuperior, cGradInferior, 90f, false);
                e.Graphics.FillRectangle(lgb, mc.ClientRectangle);
                lgb.Dispose();
            }
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            timer1.Enabled = false;
            bool lSalir = false;

            //Si el usuario todavía no tiene ningun centro activo solicitamos que seleccione uno
            if (BRSLib.nGrupoCentros == -1)
            {
                frmSeleccionarGrupoCentros ofrmGrupoCentros = new frmSeleccionarGrupoCentros
                {
                    CodAplicacion = BRSLib.COD_BRSGESTION_COMUNES,
                    CodPrograma = 2
                };
                ofrmGrupoCentros.ShowDialog();

                if (ofrmGrupoCentros.Aceptado)
                {
                    //Asignamos el grupo de centro seleccionado
                    BRSLib.nGrupoCentros = ofrmGrupoCentros.GrupoCentro;

                    //Almacenar el grupo de centro activo
                    BRSLib.GrabarGrupoCentroActivo(BRSLib.COD_BRSGESTION_COMUNES, ofrmGrupoCentros.GrupoCentro);
                }
                else lSalir = true;
            }

            //Si no hemos seleccionado un grupo de centros salimos de la aplicacion
            if (!lSalir)
            {
                //leemos el motor de base de datos y la cadena de conexión que va a usar el usuario
                BRSLib.CargarDatosConexionGrupoCentros(BRSLib.nGrupoCentros);

                //leemos la configuración general
                //BRSLib.CargarConfiguracionGeneral();

                //obtenemos el nombre del terminal y centro
                BRSLib.CargarDatosTerminal(BRSLib.nTerminal);

                BRSLib.CrearConexionesAuxiliares();
                BRSERP.frmPrincipal.RefrescarConexionesModelos();

                //BRSLib.nCentro = Convert.ToInt16(BRSLibBD.ObtenerSQLPostgres("centro", "cajas", "caja = " + BRSLib.nTerminal));
                try
                {
                    BRSLib.nCentro = Convert.ToInt16(BRSLibBD.ObtenerSQLPostgres("ncentro", "terminales", "nterminal_id = " + BRSLib.nTerminal + " AND ngrupo_centros = " + BRSLib.nGrupoCentros, null, BRSLibBD.cConexionBRSERP));
                    BRSLib.cCentroNombre = BRSLibBD.ObtenerSQLPostgres("nombre", "centros", "centro = " + BRSLib.nCentro + " AND ngrupocentro_id = " + BRSLib.nGrupoCentros, null, BRSLibBD.cConexionBRSERP);

                    //añadimos al título los datos obtenidos
                    this.Text = this.Text + "     " + BRSLib.cUsuarioNombre + " en " + BRSLib.cTerminalNombre;
                    this.Text = this.Text + "  /  " + BRSLib.cCentroNombre + " (" + BRSLib.nGrupoCentrosNombre + ")";
                }
                catch (Exception ex)
                {
                    BRSLib.Logger?.LogExcepcion(ex);
                    BRSLib.MostrarMensaje("El terminal no tiene acceso al grupo de centros seleccionado");
                    rmiSeleccionarGrupoCentros.PerformClick();
                }
            }
            else Application.Exit();
        }

        #endregion

        #region Menu

        //*************************** GENERAL **********************************
        private void rmiSeleccionarGrupoCentros_Click(object sender, EventArgs e)
        {
            if (!BRSLib.HayInstanciaSeleccionarGrupoCentros) // Sólo se permite una instancia
            {
                // Vamos a comprobar si existe otra ventana abierta
                if (this.MdiChildren.Length != 0)
                {
                    BRSLib.MostrarMensaje(Cadenas.local_cMensajeNingunaVentanaAbierta, Program.cNombreApp);
                }
                else
                {
                    frmSeleccionarGrupoCentros ofrmGruposdeCentro = new frmSeleccionarGrupoCentros
                    {
                        // Indicamos que estamos seleccionando grupos de centros del Módulo de Tesoreria
                        cModulo = "2",
                        CodAplicacion = BRSLib.COD_BRSSAT,
                        CodPrograma = 2
                    };

                    ofrmGruposdeCentro.ShowDialog();

                    if (ofrmGruposdeCentro.Aceptado)
                    {
                        CambiarGrupoCentroActivo(ofrmGruposdeCentro.GrupoCentro);
                    }
                }
            }
        }



        // ***************************************** HERRAMIENTAS ***************************************************        
        private void rmiTiposInformes_Click(object sender, EventArgs e)
        {
            if (!BRSLib.HayInstanciaTiposInformes) //solo se permite una instancia
            {
                frmTiposInformesTabla ofrmTiposInformesTabla = new frmTiposInformesTabla
                {
                    MdiParent = this,
                    NombreApp = Program.cNombreApp,
                    CodAplicacion = BRSLib.COD_BRSSAT
                };
                ofrmTiposInformesTabla.Show();
            }
            else BRSLib.ActivarVentanaCreada(MdiChildren, "frmTiposInformesTabla");
        }

        private void rmiInformes_Click(object sender, EventArgs e)
        {
            if (!BRSLib.HayInstanciaInformes) //solo se permite una instancia
            {
                frmInformesTabla ofrmInformesTabla = new frmInformesTabla();
                ofrmInformesTabla.MdiParent = this;
                ofrmInformesTabla.NombreApp = Program.cNombreApp;
                ofrmInformesTabla.Show();
            }
            else BRSLib.ActivarVentanaCreada(MdiChildren, "frmInformesTabla");
        }

        private void rmiFiltrosInformes_Click(object sender, EventArgs e)
        {
            if (!BRSLib.HayInstanciaFiltrosInformes) // Sólo se permite una instancia
            {
                frmFiltrosInformesTabla ofrmFiltrosInformesTabla = new frmFiltrosInformesTabla
                {
                    MdiParent = this,
                    NombreApp = Program.cNombreApp,
                    CodAplicacion = BRSLib.COD_BRSSAT,
                    CodPrograma = 22
                };
                ofrmFiltrosInformesTabla.Show();
            }
            else BRSLib.ActivarVentanaCreada(MdiChildren, "frmFiltrosInformesTabla");
        }

        // ***************************************** VENTANAS *************************************************
        private void rmiCascada_Click(object sender, EventArgs e) { this.LayoutMdi(MdiLayout.Cascade); }
        private void rmiMosaicoHorizontal_Click(object sender, EventArgs e) { this.LayoutMdi(MdiLayout.TileHorizontal); }
        private void rmiMosaicoVertical_Click(object sender, EventArgs e) { this.LayoutMdi(MdiLayout.TileVertical); }
        private void rmiMinimizarTodo_Click(object sender, EventArgs e) { foreach (Form frm in this.MdiChildren) frm.WindowState = FormWindowState.Minimized; }
        private void rmiRestaurarTodo_Click(object sender, EventArgs e) { foreach (Form frm in this.MdiChildren) frm.WindowState = FormWindowState.Normal; }
        private void rmiMaximizarTodo_Click(object sender, EventArgs e) { foreach (Form frm in this.MdiChildren) frm.WindowState = FormWindowState.Maximized; }
        private void rmiCerrarTodo_Click(object sender, EventArgs e) { foreach (Form frm in this.MdiChildren) frm.Close(); }

        /******************************** AYUDA **********************************/
        private void rmiAcercaDe_Click(object sender, EventArgs e)
        {
            using (frmAcercaDe ofrmAcercaDe = new frmAcercaDe())
            {
                ofrmAcercaDe.VersionNueva = true;
                ofrmAcercaDe.ShowDialog();
            }
        }

        #endregion

        private void CambiarGrupoCentroActivo(int GrupoCentro)
        {
            // Asignamos el grupo de centro seleccionado
            BRSLib.nGrupoCentros = GrupoCentro;

            // Almacenamos el grupo de centro activo
            BRSLib.GrabarGrupoCentroActivo(BRSLib.COD_BRSTPV, GrupoCentro);

            // Leemos el motor de base de datos y la cadena de conexión que va a usar el usuario
            BRSLib.CargarDatosConexionGrupoCentros(BRSLib.nGrupoCentros);

            // Leemos la configuración general
            BRSLib.CargarConfiguracionGeneral();

            // Obtenemos el nombre del terminal y centro
            BRSLib.CargarDatosTerminal(BRSLib.nTerminal);

            // Cargamos el centro contable por defecto a través del terminal
            int? centroTerminal = BRSLib.SelectScalarEnteroNulo("SELECT ncentro_defecto FROM terminales WHERE ngrupo_centros = " + BRSLib.nGrupoCentros + " AND nterminal_id = " + BRSLib.nTerminal, null, BRSLibBD.cConexionBRSERP);
            centroTerminal = centroTerminal == null ? 1 : centroTerminal;

            int? centroUsuario = BRSLib.SelectScalarEnteroNulo("SELECT ncentro FROM permisosusuariogrupo WHERE ngrupo_centros_id = " + BRSLib.nGrupoCentros + " AND nusuario_id = " + BRSLib.nUsuario, null, BRSLibBD.cConexionBRSERP);
            centroTerminal = centroUsuario == null ? centroTerminal : centroUsuario;

            // Creamos las conexiones auxiliares
            BRSLib.CrearConexionesAuxiliares();
            BRSERP.frmPrincipal.RefrescarConexionesModelos();

            // Ponemos el nombre del grupo de centros como el nombre del centro
            BRSLib.cCentroNombre = BRSLib.nGrupoCentrosNombre;

            // Mostramos en el título en que BD estamos trabajando
            MostrarTituloTrabajo();

            string db = "G" + BRSLib.nGrupoCentros.ToString("0000");
            BRSLib.ComprobarVersionBD(db, Assembly.GetExecutingAssembly().GetName().Version.ToString());
        }


        /// <summary>
        /// Genera el título que mostrará en ventana sobre que BD estamos conectados.
        /// </summary>
        private void MostrarTituloTrabajo()
        {
            //BRSLib.cEjercicioNombre = BRSLibBD.ObtenerSQLPostgres("cdescripcion", "ejercicios", "ngrupo_centro = " + BRSLib.nGrupoCentros + " AND nejercicio = " + BRSLib.nEjercicio, null, BRSLibBD.cConexionBRSERP);

            // Añadimos al título los datos obtenidos
            this.Text = Program.cNombreApp;
            this.Text = this.Text + "     " + BRSLib.cUsuarioNombre + " en " + BRSLib.nGrupoCentrosNombre;

            // Almacena el grupo de centro activo
            BRSLib.GrabarGrupoCentroActivo(BRSLib.COD_BRSTPV, BRSLib.nGrupoCentros);
        }

        public void AsignarAtajosTeclado()
        {
            rmiSalir.Shortcuts.Add(new Telerik.WinControls.RadShortcut(Keys.Alt, Keys.F4));
        }

        private void rmiSalir_Click(object sender, EventArgs e)
        {
            if (BRSLib.MostrarMensaje(Cadenas.local_cMensajeSalirPrograma, Program.cNombreApp, BRSLib.Boton.OKCancel) == System.Windows.Forms.DialogResult.OK)
            {
                BRSLib.DesactivarEjercicioUsuario();
                Application.Exit();
            }
        }

        private void rmiMovCaja_Click(object sender, EventArgs e)
        {
            frmMovCajaTabla ofrmTabla = Application.OpenForms.OfType<frmMovCajaTabla>().FirstOrDefault();
            if (ofrmTabla == null)
            {
                ofrmTabla = new frmMovCajaTabla()
                {
                    MdiParent = this,
                    CodPrograma = MovCaja.CodPrograma,
                    CodAplicacion = MovCaja.CodAplicacion
                };
                ofrmTabla.Show();
            }
            else
            {
                if (ofrmTabla.WindowState == FormWindowState.Minimized)
                    ofrmTabla.WindowState = FormWindowState.Normal;
                ofrmTabla.Activate();
            }
        }

        private void radMenuItem1_Click(object sender, EventArgs e)
        {
            frmSaldosCajaTabla ofrmTalba = Application.OpenForms.OfType<frmSaldosCajaTabla>().FirstOrDefault();
            if (ofrmTalba == null)
            {
                ofrmTalba = new frmSaldosCajaTabla()
                {
                    MdiParent = this,
                    CodPrograma = SaldosCaja.CodPrograma,
                    CodAplicacion = SaldosCaja.CodAplicacion
                };
                ofrmTalba.Show();
            }
            else
            {
                if (ofrmTalba.WindowState == FormWindowState.Minimized)
                    ofrmTalba.WindowState = FormWindowState.Normal;
                ofrmTalba.Activate();
            }
        }

    }
}
