using BRSERP;
using BRSERP.Modelos.BRSERP;
using BRSERP.Modelos.Gestion;
using Npgsql;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Data;
using System.Windows.Forms;
using Telerik.WinControls;
using Modelo = BRSERP.Modelos.Gestion.MovCaja;


namespace BRSTPV
{
    public partial class frmMovCajaRegistro : Telerik.WinControls.UI.RadForm
    {
        #region Variables

        /* VARIABLES DE CONEXIÓN */
        NpgsqlConnection oConexion;
        NpgsqlCommand oComando;
        NpgsqlTransaction oTransaccion;

        /* VARIABLES PARA PERMITIR EL DESPLAZAMIENTO DEL DATAGRID */
        /// <summary>
        /// Permite acceder a la ventana de la vista de tabla
        /// </summary>
        /// <param name="mensaje"></param>
        /// <param name="borrar"></param>
        public delegate void delegadoCambiarRegistro(string mensaje, bool borrar = false);

        /// <summary>
        /// Cambia el registro en el datagrid de la vista de tabla
        /// </summary>
        public event delegadoCambiarRegistro eventoCambiarRegistro;

        /// <summary>
        /// Indica si podemos desplazarnos con la tecla control pulsada
        /// </summary>
        public bool lDesplazamientoCTRL;

        /* VARIABLES DE FUNCIONAMIENTO */
        /// <summary>
        /// Lista con los campos obligatorios
        /// </summary>
        private ObservableCollection<string> acCamposObligatorios = new ObservableCollection<string>();

        /* MODELOS USADOS */
        private Modelo modelo;

        #region Propiedades

        /// <summary>
        /// Modo de operación del formulario; 1:Añadir 2:Modificar 3:Ver 4:Encontrar
        /// </summary>
        public short Modo { get; set; }

        /// <summary>
        /// Código de aplicación
        /// </summary>
        public int CodAplicacion { get; set; }

        /// <summary>
        /// Código de programa
        /// </summary>
        public int CodPrograma { get; set; }

        /// <summary>
        /// ¿Guardar cambios en auditoría?
        /// </summary>
        public bool Historial { get; set; }

        /// <summary>
        /// ¿Salió cancelando?
        /// </summary>
        public Resultado Resultado { get; set; }

        /// <summary>
        /// Nombre de la tabla a gestionar
        /// </summary>
        public string Tabla { get; set; }

        /// <summary>
        /// Campos de la clave primaria
        /// </summary>
        public string[] ClavePrimaria { get; set; }

        #endregion

        #endregion

        #region Formulario

        public frmMovCajaRegistro()
        {
            InitializeComponent();


            BRSLib.WriteLogDebug_Constructor(Name);

            MaximumSize = MinimumSize = Size;

            // Añadimos los eventos de la lista de campos obligatorios
            acCamposObligatorios.CollectionChanged += acCamposObligatorios_CollectionChanged;
            // a la botonera para cancelar mostrar menú contextual
            radCommandBar1.CustomizeContextMenu.DropDownOpening += BRSLib.CustomizeContextMenu_DropDownOpening;
            // y el evento para detectar la rueda del raton
            MouseWheel += _MouseWheel;

            BRSComponentes.QuitarGripBotonera(radCommandBar1);
            BRSComponentes.TitleBarColor(FormElement.TitleBar);
        }

        private void frmSectoresRegistro_Load(object sender, EventArgs e)
        {
            BRSLib.WriteLogDebug_Load(Name, Modo);

            //Aplicar Idioma
            if (BRSLib.nIdioma != 1)
                BRSLib.AplicarIdioma(this, CodAplicacion, CodPrograma, 2, BRSLib.nIdioma, Modo);

            // Vamos a recorrer todos los controles de la ficha para (en funcion del modo de entrada) habilitarlos o no
            // y especificarles las propiedades por defecto
            bool lReadOnly = Modo == ModoPantalla.VER;
            BRSComponentes.RecorrerControles(Controls, lReadOnly, Modo);

            // Establecemos los length de los objetos y los campos obligatorios
            Modelo.EstablecerMaxLength(Controls, Modo);


            //Quitamos de los desplegables el elemento <Sin Valor> siempre y cuando se haya introducido
            //y el modo sea distinto de Encontrar
            CargarCombos();
            BRSComponentes.EliminarSinValorCombos(this, Modo);

            // Reiniciamos los campos obligatorios
            acCamposObligatorios.Clear();
            BRSLib.AnadirALista(acCamposObligatorios, Modelo.CamposObligatorios);

            // Ponemos el botón de cancelar visible
            cbbCancelar.Visibility = ElementVisibility.Visible;

            // Borramos el contenido de la etiqueta de ayuda
            lblAyuda.Text = "";

            // Ponemos aceptado a falso
            Resultado = Resultado.Cancelado;
            // Especificamos el titulo de la pantalla y limpiamos todos los campos de la ficha
            Text = Cadenas.VentanaRegistro + Cadenas.VentanaMovimientosCaja;
            BRSComponentes.LimpiarControles(Controls);
            txtfh.Visible = false;

            // En función del modo de entrada
            switch (Modo)
            {
                case ModoPantalla.INSERTAR: LoadAnadir(); break;
                case ModoPantalla.MODIFICAR: LoadModificar(); break;
                case ModoPantalla.VER: LoadVer(); break;
                case ModoPantalla.ENCONTRAR: LoadEncontrar(); break;
            }
        }

        private void LoadAnadir()
        {
            oConexion = new NpgsqlConnection(Modelo.cConexion);
            oComando = oConexion.CreateCommand();
            try
            {
                oConexion.Open();
                oTransaccion = oConexion.BeginTransaction();
                oComando.Transaction = oTransaccion;

                Text += " - " + Cadenas.local_cAñadir;
                cbbAceptar.ToolTipText = Cadenas.cBotonAceptarAnadir;
                cbbCancelar.ToolTipText = Cadenas.cBotonCancelarAnadir;

                Modelo.AsignarValoresPorDefecto(Controls);
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
                Close();
            }
        }

        private void LoadModificar()
        {
            oConexion = new NpgsqlConnection(Sectores.cConexion);
            oComando = oConexion.CreateCommand();
            try
            {
                oConexion.Open();
                oTransaccion = oConexion.BeginTransaction();
                oComando.Transaction = oTransaccion;

                Text += " - " + Cadenas.local_cModificar;
                cbbAceptar.ToolTipText = Cadenas.cBotonAceptarModificar;
                cbbCancelar.ToolTipText = Cadenas.cBotonAceptarModificar;

                BRSComponentes.EstablecerCamposNoModificables(Controls, Modelo.CamposNoModificables);

                ObtenerDatos();
            }
            catch (RegistroBloqueadoException)
            {
                oComando = null;
                Resultado = Resultado.Bloqueado;
                Close();
            }
            catch (RegistroInexistenteException)
            {
                oComando = null;
                Resultado = Resultado.Eliminado;
                Close();
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
                Close();
            }
        }

        private void LoadVer()
        {
            try
            {
                Text += " - " + Cadenas.local_cVer;
                cbbAceptar.ToolTipText = Cadenas.cBotonAceptarVer;

                // Mostramos los datos
                ObtenerDatos();
                //Ocultamos el boton de cancelar
                cbbCancelar.Visibility = Telerik.WinControls.ElementVisibility.Collapsed;
                // Damos el foco al botón aceptar
                cbbAceptar.Focus();
            }
            catch (RegistroInexistenteException)
            {
                throw;
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
                Close();
            }
        }

        private void LoadEncontrar()
        {
            Text += " - " + Cadenas.local_cEncontrar;
            cbbAceptar.ToolTipText = Cadenas.cBotonAceptarEncontrar;
            cbbCancelar.ToolTipText = Cadenas.cBotonCancelarEncontrar;
            BRSComponentes.AgregarSinValorCombos(this);

        }

        private void frmSectoresRegistro_Shown(object sender, EventArgs e)
        {
            switch (Modo)
            {
                case ModoPantalla.ENCONTRAR:
                case ModoPantalla.INSERTAR: txtusuario.Focus(); break;
                case ModoPantalla.MODIFICAR: txtusuario.Focus(); break;
                case ModoPantalla.VER: cbbAceptar.Focus(); break;
            }
        }

        private void frmSectoresRegistro_KeyDown(object sender, KeyEventArgs e)
        {
            if (!e.Control)
            {
                switch (e.KeyData)
                {
                    // Escape, cierra la ventana
                    case Keys.Escape:
                        cbbCancelar.PerformClick();
                        break;

                    // F12, equivalente a aceptar
                    case Keys.F12:
                        cbbAceptar.PerformClick();
                        break;

                    // Enter, equivalente a aceptar
                    case Keys.Enter:
                        if (Modo == ModoPantalla.VER) cbbAceptar.PerformClick();
                        break;
                }
            }
            else if (e.Control && !e.Alt)
            {
                // Sube un registro el datagrid en modo VER
                if (e.KeyCode == Keys.Up && this.Modo == ModoPantalla.VER && lDesplazamientoCTRL)
                {
                    eventoCambiarRegistro(MovimientoRejilla.UP);
                    ObtenerDatos(MovimientoRejilla.UP);
                }

                // Baja un registro el datagrid en modo VER
                if (e.KeyCode == Keys.Down && this.Modo == ModoPantalla.VER && lDesplazamientoCTRL)
                {
                    eventoCambiarRegistro(MovimientoRejilla.DOWN);
                    ObtenerDatos(MovimientoRejilla.DOWN);
                }
            }
        }

        private void frmSectoresRegistro_FormClosed(object sender, FormClosedEventArgs e)
        {
            if (oConexion != null && oConexion.State == ConnectionState.Open)
                oConexion.Close();

            cbbAceptar.Focus();

            BRSLib.WriteLogDebug_Close(Name);
        }

        #endregion  

        #region Otros objetos del formulario

        #region Eventos de Click

        private void cbbAceptar_Click(object sender, EventArgs e)
        {
            switch (Modo)
            {
                case ModoPantalla.INSERTAR:
                case ModoPantalla.MODIFICAR:
                    ClickAceptar_AnadirModificar(); break;
                case ModoPantalla.VER: ClickAceptar_Ver(); break;
                case ModoPantalla.ENCONTRAR: ClickAceptar_Encontrar(); break;
            }
        }

        private void ClickAceptar_AnadirModificar()
        {
            BRSLib.WriteLogDebug_Click(Name, System.Reflection.MethodBase.GetCurrentMethod().Name);


            if (Modo == ModoPantalla.INSERTAR) modelo = new Modelo(Controls);
            else modelo.ActualizarContenido(Controls);

            modelo.Historial = Historial;
            modelo.Comando = oComando;

            if (validarFormulario())
            {
                if (Modo == ModoPantalla.INSERTAR) modelo.InsertSinRowID();
                else modelo.Update();

                modelo.EstablecerCodigoSeleccionado();

                oTransaccion.Commit();
                oComando = null;
                Resultado = Resultado.Aceptado;
                Close();
            }
            //else
            //{
            //    Close();
            //}
        }


        private void ClickAceptar_Ver()
        {
            Resultado = Resultado.Aceptado;
            Close();
        }

        private void ClickAceptar_Encontrar()
        {
            try
            {
                BRSComponentes.GenerarEncontrar(Controls);
                Resultado = Resultado.Aceptado;
                Close();
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
        }

        private void cbbCancelar_Click(object sender, EventArgs e)
        {
            Resultado = Resultado.Cancelado;
            oComando = null;
            Close();
        }

        #endregion

        #region Eventos de CollectionChanged

        private void acCamposObligatorios_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            BRSComponentes.EstablecerCamposObligatorios(Modo, new List<string>(acCamposObligatorios), Controls);
        }

        #endregion

        #region Eventos de Enter

        private void PrepararComponentes(object sender, EventArgs e)
        {
            Modelo.Enter(sender, e, Modo, lblAyuda, this);
        }

        #endregion

        #region Eventos de KeyDown

        private void Componentes_KeyDown(object sender, KeyEventArgs e)
        {
            Modelo.KeyDown(sender, e, Modo);
        }

        #endregion

        #region Eventos de KeyPress

        private void Componentes_KeyPress(object sender, KeyPressEventArgs e)
        {
            Modelo.KeyPress(sender, e, Modo, this);
        }

        #endregion

        #region Eventos de Leave

        private void Componentes_Leave(object sender, EventArgs e)
        {
            Modelo.Leave(sender, Modo);
        }

        #endregion

        #region Eventos de MouseWheel

        private void _MouseWheel(object sender, MouseEventArgs e)
        {
            // Sube un registro el datagrid en modo VER
            if (e.Delta > 0 && this.Modo == ModoPantalla.VER && lDesplazamientoCTRL)
            {
                this.eventoCambiarRegistro(MovimientoRejilla.UP);
                ObtenerDatos(MovimientoRejilla.UP);
            }
            // Baja un registro el datagrid en modo VER
            else if (e.Delta < 0 && this.Modo == ModoPantalla.VER && lDesplazamientoCTRL)
            {
                this.eventoCambiarRegistro(MovimientoRejilla.DOWN);
                ObtenerDatos(MovimientoRejilla.DOWN);
            }
        }

        #endregion

        #endregion

        #region Métodos privados

        /// <summary>
        /// Función que obtiene los valores de la base de datos y los asigna a los campos
        /// </summary>
        void ObtenerDatos(string mensaje = null)
        {
            if (BRSLib.HayCodigoSeleccionado())
            {
                modelo = Modelo.SeleccionarPorCodigoSeleccionado(Modo == ModoPantalla.MODIFICAR, oComando);
                if (modelo.Vacio)
                {
                    if (mensaje == null)
                    {
                        throw new RegistroInexistenteException();
                    }
                    else
                    {
                        BRSLib.MostrarMensaje(Cadenas.RegistroInexistenteException, Cadenas.MBoxRegistroInexistenteTitle, BRSLib.Boton.OK, BRSLib.Icono.Warning);
                        eventoCambiarRegistro(mensaje, true);
                        ObtenerDatos(mensaje);
                    }
                }
                else
                {
                    BRSComponentes.LimpiarControles(Controls);
                    modelo.CargarFormulario(Controls);
                    if (!string.IsNullOrWhiteSpace(txtusuario.Text)) txtusuario_nombre.Text = Usuarios.SeleccionarPorClavePrimaria(txtusuario.Text.AsShort()).cnombre_usuario;
                    if (!string.IsNullOrWhiteSpace(txtcliente.Text)) txtcliente_nombre.Text = Clientes.SeleccionarPorClavePrimaria(txtcliente.Text.AsInt32()).nombre;
                    if (!string.IsNullOrWhiteSpace(txtproveedor.Text)) txtproveedor_nombre.Text = Proveedores.SeleccionarPorClavePrimaria(txtproveedor.Text.AsInt32()).nombre;
                    if (!string.IsNullOrWhiteSpace(txtgrupopago.Text)) txtgrupopago_nombre.Text = GruposPago.SeleccionarPorClavePrimaria(txtgrupopago.Text).nombre;
                    if (!string.IsNullOrWhiteSpace(txtcaja.Text)) txtcaja_nombre.Text = Cajas.SeleccionarPorClavePrimaria(txtcaja.Text.AsShort()).nombre;
                    if (!string.IsNullOrWhiteSpace(txtcentro.Text)) txtcentro_nombre.Text = Centros.SeleccionarPorClavePrimaria(txtcentro.Text.AsInt32(), BRSLib.nGrupoCentros).nombre;
                    if (!string.IsNullOrWhiteSpace(txtseriealbaran.Text)) txtseriealbaran_nombre.Text = Series.SeleccionarPorClavePrimaria(BRSLib.nGrupoCentros, txtseriealbaran.Text).nombre;
                    if (!string.IsNullOrWhiteSpace(txtserie.Text)) txtserie_nombre.Text = Series.SeleccionarPorClavePrimaria(BRSLib.nGrupoCentros, txtserie.Text).nombre;
                    if (!string.IsNullOrWhiteSpace(txtformapago.Text)) txtformapago_nombre.Text = FormasPago.SeleccionarPorClavePrimaria(txtformapago.Text).nombre;
                    if (!string.IsNullOrWhiteSpace(txtmoneda.Text)) txtmoneda_nombre.Text = Monedas.SeleccionarPorClavePrimaria(txtmoneda.Text).nombre;
                }
            }
            else
            {
                Close();
            }
        }

        /// <summary>
        /// Función que validará el formulario
        /// </summary>
        /// <returns></returns>
        bool validarFormulario()
        {
            // Asignamos el foco al botón aceptar para asegurar los eventos onleave y validating
            bool lValido = false;

            if (Validate())
            {
                if (!modelo.Validar(Modo == ModoPantalla.INSERTAR))
                {
                    BRSLib.MostrarMensajeErrorValidacion(modelo.ErroresValidacion, Controls);
                }
                else
                {
                    lValido = true;
                }
            }

            return lValido;
        }


        private void CargarCombos()
        {
            string[] textos;
            object[] valores;

            textos = new[] { "A", "B" };
            valores = new[] { "A", "B" };
            rddcanal.Rellenar(textos, valores);

            textos = new[] { "Cobro", "Pago", "Retirada", "Entrega", "Venta", "Regularización" };
            valores = new[] { "C", "P", "R", "E", "V", "U" };
            rddtipo.Rellenar(textos, valores);
        }

        #endregion
    }
}