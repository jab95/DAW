using BRSERP.Temas;
using Npgsql;
using System;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using Telerik.WinControls;
using Telerik.WinControls.UI;

namespace BRSERP
{
    public static class RadDropDownListExtensions
    {
        /// <summary>
        /// Obtiene el botón de la flecha del RadDropDownList
        /// </summary>
        /// <param name="oRadDropDownList">El objeto RadDropDownList</param>
        /// <returns>El componente del botón</returns>
        public static RadDropDownListArrowButtonElement GetArrow(this RadDropDownList oRadDropDownList)
        {
            return ((RadDropDownListArrowButtonElement)(oRadDropDownList.GetChildAt(0).GetChildAt(2).GetChildAt(1)));
        }

        public static RadElementCollection GetRadDropDownListElements(this RadDropDownList oRadDropDownList)
        {
            return oRadDropDownList.RootElement.Children;
        }

        public static RadElement[] GetRadDropDownListEditableAreaElements(this RadElement oRadElement)
        {
            return oRadElement.Children[2].GetChildren(ChildrenListOptions.IncludeCollapsed).Where(c => c.RadObjectType.Name == nameof(RadDropDownListEditableAreaElement)).ToArray();
        }

        public static RadElement[] GetTextBoxes(this RadElement oRadElement)
        {
            return oRadElement.Children[0].GetChildren(ChildrenListOptions.IncludeCollapsed).Where(c => c.RadObjectType.Name == nameof(RadTextBoxItem)).ToArray();
        }

        /// <summary>
        /// Rellena un combo a partir de un array de textos y otro de valores. Si el array de valores está vacío lo rellena con los índices
        /// </summary>
        /// <param name="combo"></param>
        /// <param name="textos"></param>
        /// <param name="valores"></param>
        public static void Rellenar(this RadDropDownList combo, string[] textos, object[] valores = null)
        {
            RadListDataItem elemento;
            combo.Items.Clear();
            for (int i = 0; i < textos.Length; i++)
            {
                elemento = new RadListDataItem
                {
                    Text = textos[i],
                    Value = valores?[i] ?? i
                };
                combo.Items.Add(elemento);
            }
        }

        /// <summary>
        /// Función que rellena on campo RadDropDownList con los valores de la base de datos
        /// </summary>
        /// <param name="comboBox">El objeto que queremos rellenar</param>
        /// <param name="valor">El nombre del campo usado como valor</param>
        /// <param name="texto">El nombre del campo usado como texto</param>
        /// <param name="from">El nombre de la tabla de donde queremos extraer los datos</param>
        /// <param name="where">Condición especial que se aplicará a la consulta</param>
        /// <param name="order">Orden en el que queremos que se presenten los campos</param>
        /// <param name="cConexion">La cadena de conexión a la base de datos donde se encuentran los datos</param>
        /// <param name="lLimpiar">Si queremos limpiar previamente o no valores anteriores del combo</param>
        /// <param name="lOrdenInverso">Si queremos invertir el orden de la consulta</param>
        public static void Rellenar(this RadDropDownList comboBox, string valor, string texto, string from, string where = null, string order = null, string cConexion = null, bool lLimpiar = false, bool lOrdenInverso = false)
        {
            NpgsqlConnection oConexionPostgres = null;
            NpgsqlCommand oComandoPostgres = null;
            NpgsqlDataReader oDataReader = null;

            if (cConexion == null)
                cConexion = BRSLib.cConexionGR;

            string cSQL = "SELECT " + valor + ", " + texto + " FROM " + from;
            if (where != null)
                cSQL += " WHERE " + where;
            if (order != null)
                cSQL += " ORDER BY " + order;
            if (lOrdenInverso)
                cSQL += " DESC";

            oConexionPostgres = new NpgsqlConnection(cConexion);
            oComandoPostgres = new NpgsqlCommand(cSQL, oConexionPostgres);

            try
            {
                if (oConexionPostgres != null)
                {
                    oConexionPostgres.Open();
                    oDataReader = oComandoPostgres.ExecuteReader();

                    if (lLimpiar)
                    {
                        comboBox.Items.Clear();
                        Application.DoEvents();
                    }

                    if (oDataReader.HasRows)
                    {
                        while (oDataReader.Read())
                        {
                            RadListDataItem elemento = new RadListDataItem();

                            if (valor.Contains("."))
                                valor = valor.Split('.')[1];
                            if (texto.Contains("."))
                                texto = texto.Split('.')[1];

                            elemento.Value = Convert.ToString(oDataReader[valor]);
                            elemento.Text = Convert.ToString(oDataReader[texto]);
                            comboBox.Items.Add(elemento);
                        }
                    }
                    else
                    {
                        RadListDataItem elemento = new RadListDataItem
                        {
                            Value = -1,
                            Text = "-- SIN RESULTADO --"
                        };
                        comboBox.Items.Add(elemento);
                    }

                }
                else
                {
                    RadListDataItem elemento = new RadListDataItem
                    {
                        Value = -1,
                        Text = "-- ERROR AL CARGAR --"
                    };
                    comboBox.Items.Add(elemento);

                    BRSLib.MostrarMensaje("No se estableció una cadena de conexión" + "\n\rBRSLib : RellenarCombo()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
                }
            }
            catch (Exception ex)
            {
                comboBox.Items.Clear();

                RadListDataItem elemento = new RadListDataItem
                {
                    Value = -1,
                    Text = "-- ERROR AL CARGAR --"
                };
                comboBox.Items.Add(elemento);

                BRSLib.MostrarMensaje(ex.Message + "\n\rBRSLib : RellenarCombo()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
            finally
            {
                if (oConexionPostgres != null && oConexionPostgres.State == ConnectionState.Open)
                    oConexionPostgres.Close();
                if (oDataReader != null)
                    oDataReader.Close();
            }
            comboBox.SelectedIndex = 0;
            comboBox.Update();
        }

        public static void SoloLectura(this RadDropDownList comboBox, bool lSoloLectura, bool lLimpiar = false, int nIndiceDefecto = 0)
        {
            comboBox.ReadOnly = lSoloLectura;

            comboBox.DropDownStyle = lSoloLectura ? RadDropDownStyle.DropDown : RadDropDownStyle.DropDownList;

            foreach (RadDropDownListElement root in comboBox.GetRadDropDownListElements())
            {
                foreach (RadDropDownListEditableAreaElement hijo in root.GetRadDropDownListEditableAreaElements())
                {
                    foreach (RadTextBoxItem textbox in hijo.GetTextBoxes())
                    {
                        if (lSoloLectura)
                        {
                            textbox.BackColor = BRSLibTemas.colorSoloLectura;
                            comboBox.GetArrow().Visibility = ElementVisibility.Collapsed;
                        }
                        else
                        {
                            textbox.BackColor = BRSLibTemas.colorLecturaEscritura;
                            comboBox.GetArrow().Visibility = ElementVisibility.Visible;
                        }
                    }
                }
            }

            if (lSoloLectura && lLimpiar)
            {
                comboBox.SelectedIndex = nIndiceDefecto;
            }
        }
    }
}
