using BRSERP;
using BRSERP.BD;
using System;
using System.Linq;
using System.Reflection;
using System.Windows.Forms;
using Telerik.WinControls.UI;
using static BRSERP.StringExtensions;
using Modelo = BRSERP.Modelos.Gestion.MovCaja;
using Timers = System.Timers;

namespace BRSTPV
{
    public partial class frmMovCajaTabla : Telerik.WinControls.UI.RadForm
    {
        #region Variables




        /* VARIABLES DE FORMULARIOS */
        /// <summary>
        ///   Llama al formulario de registro
        /// </summary>
        private frmMovCajaRegistro ofrmRegistro;

        /// <summary>
        ///   Llama al formulario de listado
        /// </summary>
        private frmMovCajaListado ofrmListado;

        /// <summary>
        ///   Llama al formulario de ayuda
        /// </summary>
        frmAyuda ofrmAyuda;

        /* VARIABLES DE FUNCIONAMIENTO */
        /// <summary>
        ///   Indica si guardamos cambios en la auditoria
        /// </summary>
        private bool lHistorial = true;

        /// <summary>
        /// Guarda el where de la ultima consulta realizada   
        /// </summary>
        string cUltimosEncontrados;

        /* TEMPORIZADORES */
        /// <summary>
        ///   Temporizador para la búsqueda rápida
        /// </summary>
        Timers.Timer temporizadorBusquedaRapida = new Timers.Timer(BRSLib.tiempoBusquedaRapida); // Temporizador para la búsqueda rápida

        /*BUSQUEDA RAPIDA*/
        /// <summary>
        /// Lista con los tipos de los campos de la búsqueda rápida.
        /// </summary>
        enum TipoBusquedaRapida { Codigo, Descripcion, Todo };

        /// <summary>
        /// Tipo de busqueda rápida que estamos ejecutando  T
        /// </summary>
        TipoBusquedaRapida eTipoBusquedaRapida;

        /* OTRAS VARIABLES */
        /// <summary>
        ///   Archivo de ayuda
        /// </summary>
        string cFicheroAyuda = "movcaja.html"; // Archivo de ayuda


        #region Atributos

        /// <summary>
        /// Código de aplicación
        /// </summary>
        public int CodAplicacion { get; set; }

        /// <summary>
        /// Código de programa
        /// </summary>
        public int CodPrograma { get; set; }

        #endregion

        #endregion

        #region Formulario

        public frmMovCajaTabla()
        {
            InitializeComponent();

            BRSLib.WriteLogDebug_Constructor(Name);

            BRSComponentes.QuitarGripBotonera(cbPrincipal);
            BRSComponentes.TitleBarColor(FormElement.TitleBar);

            // Añadimos un nuevo evento al temporizador que será el que guarde la rejilla al transcurrir el tiempo indicado
            temporizadorBusquedaRapida.Elapsed += BusquedaRapidaTimerElapsed;

            // Si se pretende modificar algo de la ventana, tenemos que sincronizar el objeto con el hilo del temporizador
            temporizadorBusquedaRapida.SynchronizingObject = this.rgvTabla;

            // Eventos de cancelar menú contextual de la botonera
            cbPrincipal.CustomizeContextMenu.DropDownOpening += BRSLib.CustomizeContextMenu_DropDownOpening;

            rgvTabla.EventoCambiarLabel += CambiarLabel;

            rgvTabla.EstablecerPropiedades(Modelo.cConexion, Modelo.TABLA, Modelo.ClavePrimaria, Modelo.NombreCamposRejilla, Name, lblRegistro);

            cbbAñadir.Enabled = cbbModificar.Enabled = cbbBorrar.Enabled = false;
            rmiAñadir.Enabled = rmiModificar.Enabled = rmiBorrar.Enabled = false;
            ShowIcon = false;

        }

        private void frmSectoresTabla_Load(object sender, EventArgs e)
        {
            BRSLib.WriteLogDebug_Load(Name);

            BRSLib.CargarEstadoFormulario(this);

            Text = Cadenas.VentanaMantenimiento + Cadenas.VentanaMovimientosCaja;

        }


        private void frmSectoresTabla_Activated(object sender, EventArgs e)
        {
            BRSLib.WriteLogDebug_Activated(Name);

            if (BRSLib.lMaximizar) this.WindowState = FormWindowState.Maximized;
            rgvTabla.Focus();

            lHistorial = BRSLib.ConfigurarPermisos(radMenu2, commandBarStripElement1, Modelo.CodAplicacion, Modelo.CodPrograma);
            BRSComponentes.RecorrerControles(radPanel1.Controls, !cbbEncontrar.Enabled, 1);

            BRSComponentes.AnadirHintMenu(rmiMenuSectores);

            Modelo.EstablecerMaxLength(Controls, 1);

        }


        private void frmSectoresTabla_FormClosed(object sender, FormClosedEventArgs e)
        {
            // Damos el foco al botón salir
            cbbSalir.Focus();

            BRSLib.GuardarEstadoFormulario(this);

            temporizadorBusquedaRapida.Dispose();

            BRSLib.WriteLogDebug_Close(Name);
        }


        private void frmSectoresTabla_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                //escape, cierra la ventana
                case Keys.Escape:
                    cbbSalir.PerformClick();
                    break;
                //ayuda
                case Keys.F1:
                    cbbAyuda.PerformClick();
                    break;
            }
        }

        #endregion

        #region Otros objetos del formulario

        #region Eventos de Click

        private void cbbAñadir_Click(object sender, EventArgs e)
        {
            try
            {
                BRSLib.WriteLogDebug_Click(Name, System.Reflection.MethodBase.GetCurrentMethod().Name);

                rgvTabla.LimpiarCodigoSeleccionado();
                using (ofrmRegistro = new frmMovCajaRegistro())
                {
                    EstablecerAtributosRegistro();

                    ofrmRegistro.Modo = ModoPantalla.INSERTAR;
                    ofrmRegistro.ShowDialog();

                    if (ofrmRegistro.Resultado == Resultado.Aceptado)
                    {
                        BRSLib.WriteLogDebug("Añadido nuevo " + Modelo.TABLA + " con código " + rgvTabla.CodigoSeleccionado, Name, MethodBase.GetCurrentMethod().Name);

                        rgvTabla.AnadirRegistroRejilla();

                        FormatearColumnas();

                        cUltimosEncontrados = rgvTabla.AnadirUltimosEncontrados(cUltimosEncontrados);
                    }


                }

            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + MethodBase.GetCurrentMethod().Name + "()",
                    " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }

            rgvTabla.Focus();
        }

        private void cbbModificar_Click(object sender, EventArgs e)
        {
            try
            {
                BRSLib.WriteLogDebug_Click(Name, System.Reflection.MethodBase.GetCurrentMethod().Name);

                if (rgvTabla.RegistroSeleccionado())
                {   // Si hay un registro seleccionado

                    rgvTabla.ActualizarCodigoSeleccionado();

                    using (ofrmRegistro = new frmMovCajaRegistro())
                    {
                        EstablecerAtributosRegistro();

                        ofrmRegistro.Modo = ModoPantalla.MODIFICAR;

                        ofrmRegistro.ShowDialog();

                        switch (ofrmRegistro.Resultado)
                        {
                            case Resultado.Aceptado:
                                // Si aceptamos el formulario
                                BRSLib.WriteLogDebug(
                                    "Modificado " + Modelo.TABLA + " con código " + rgvTabla.CodigoSeleccionado, Name,
                                    MethodBase.GetCurrentMethod().Name);

                                rgvTabla.ModificarRegistroRejilla();

                                FormatearColumnas();
                                break;
                            case Resultado.Bloqueado:
                                BRSLib.MostrarMensaje(Cadenas.RegistroBloqueadoException, Cadenas.MBoxRegistroBloqueadoTitle, BRSLib.Boton.OK, BRSLib.Icono.Warning);
                                break;
                            case Resultado.Eliminado:
                                rgvTabla.QuitarRegistro();
                                break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + MethodBase.GetCurrentMethod().Name + "()",
                    " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
            rgvTabla.Focus();
        }

        private void cbbVer_Click(object sender, EventArgs e)
        {
            try
            {
                BRSLib.WriteLogDebug_Click(Name, System.Reflection.MethodBase.GetCurrentMethod().Name);

                if (rgvTabla.RegistroSeleccionado())
                {// Si hay un registro seleccionado

                    rgvTabla.ActualizarCodigoSeleccionado();

                    using (ofrmRegistro = new frmMovCajaRegistro())
                    {
                        EstablecerAtributosRegistro();

                        ofrmRegistro.Modo = ModoPantalla.VER;

                        ofrmRegistro.lDesplazamientoCTRL = !rgvTabla.EstaOrdenada() && !rgvTabla.EstaAgrupada();

                        // Mostramos el formulario
                        ofrmRegistro.ShowDialog();
                    }
                }
            }
            catch (RegistroInexistenteException)
            {
                BRSLib.MostrarMensaje(Cadenas.RegistroInexistenteException, Cadenas.MBoxRegistroInexistenteTitle, BRSLib.Boton.OK, BRSLib.Icono.Warning);
                BRSLibBD.QuitarRegistroRejilla(rgvTabla);
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }

            rgvTabla.Focus();
        }

        private void cbbBorrar_Click(object sender, EventArgs e)
        {
            try
            {
                BRSLib.WriteLogDebug_Click(Name, System.Reflection.MethodBase.GetCurrentMethod().Name);

                if (rgvTabla.RegistroSeleccionado())
                { // Si hay un registro seleccionado

                    rgvTabla.ActualizarCodigoSeleccionado();

                    var modelo = Modelo.SeleccionarPorCodigoSeleccionado(true);
                    modelo.Historial = lHistorial;
                    if (modelo.Vacio) throw new RegistroInexistenteException();
                    if (!modelo.PuedeBorrarse()) throw new BorradoException(modelo.ErroresBorrado);

                    DialogResult dr = BRSLib.MostrarMensaje(Cadenas.local_cMensajeBorrarRegistro, " ", BRSLib.Boton.OKCancel, BRSLib.Icono.Warning);
                    if (dr == DialogResult.OK)
                    {
                        modelo.Delete();

                        BRSLib.WriteLogDebug("Borra el sector con código " + BRSLib.cCodigoSeleccionado, Name, System.Reflection.MethodBase.GetCurrentMethod().Name);

                        rgvTabla.QuitarRegistro();
                    }
                }
            }
            catch (RegistroBloqueadoException)
            {
                BRSLib.MostrarMensaje(Cadenas.RegistroBloqueadoException, Cadenas.MBoxRegistroBloqueadoTitle, BRSLib.Boton.OK, BRSLib.Icono.Warning);
            }
            catch (RegistroInexistenteException)
            {
                BRSLib.MostrarMensaje(Cadenas.RegistroInexistenteException, Cadenas.MBoxRegistroInexistenteTitle, BRSLib.Boton.OK, BRSLib.Icono.Warning);
                BRSLibBD.QuitarRegistroRejilla(rgvTabla);
            }
            catch (BorradoException ex)
            {
                BRSLib.MostrarMensaje(ex.Message, "", BRSLib.Boton.OK, BRSLib.Icono.Warning);
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }

            rgvTabla.Focus();
        }

        private void cbbEncontrar_Click(object sender, EventArgs e)
        {
            try
            {
                BRSLib.WriteLogDebug_Click(Name, System.Reflection.MethodBase.GetCurrentMethod().Name);

                // Limpiamos los campos de búsqueda rápida sin que afecte al contenido de la tabla
                LimpiarCamposBusquedaRapida(radPanel1.Controls);

                using (ofrmRegistro = new frmMovCajaRegistro())
                {
                    EstablecerAtributosRegistro();

                    ofrmRegistro.Modo = ModoPantalla.ENCONTRAR;

                    ofrmRegistro.lDesplazamientoCTRL = !rgvTabla.EstaOrdenada() && !rgvTabla.EstaAgrupada();

                    ofrmRegistro.ShowDialog();

                    if (ofrmRegistro.Resultado == Resultado.Aceptado)
                    {
                        try
                        {
                            rgvTabla.ActivarSelectionChanged(false);
                            rgvTabla.EncontrarRegistroRejilla();
                            FormatearColumnas();
                            cUltimosEncontrados = !BRSLib.cUltimosEncontrados.Vacio()
                                ? "(" + BRSLib.cUltimosEncontrados + ")"
                                : "";
                        }
                        catch (Exception ex)
                        {
                            BRSLib.Logger?.LogExcepcion(ex);
                            BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + MethodBase.GetCurrentMethod().Name + "()", "", BRSLib.Boton.OK, BRSLib.Icono.Error);
                            rgvTabla.LimpiarRejilla();
                            cUltimosEncontrados = "";
                        }
                        finally
                        {
                            rgvTabla.ActivarSelectionChanged(true);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }

            rgvTabla.Focus();
        }

        private void cbbConfig_Click(object sender, EventArgs e)
        {
            try
            {
                BRSLib.WriteLogDebug_Click(Name, System.Reflection.MethodBase.GetCurrentMethod().Name);

                RadTextBox[] aoTextBox = { txtsector, txtnombre, txtTodo };
                BRSComponentes.PersonalizarRejilla(rgvTabla, Name, Modelo.TABLA, aoTextBox, Modelo.CamposOcultos);
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }

            rgvTabla.Focus();
        }

        private void cbbImprimir_Click(object sender, EventArgs e)
        {
            try
            {
                BRSLib.WriteLogDebug_Click(Name, System.Reflection.MethodBase.GetCurrentMethod().Name);

                using (ofrmListado = new frmMovCajaListado()
                {
                    CodFormulario = Modelo.CodListados,
                })
                {
                    ofrmListado.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
            rgvTabla.Focus();
        }

        private void cbbSalir_Click(object sender, EventArgs e)
        {
            BRSLib.WriteLogDebug_Click(Name, MethodBase.GetCurrentMethod().Name);

            this.Close();
        }

        private void cbbAyuda_Click(object sender, EventArgs e)
        {
            ofrmAyuda = new frmAyuda(cFicheroAyuda);
            ofrmAyuda.Show();
        }

        #endregion

        #region Eventos de Enter

        private void PrepararComponentes(object sender, EventArgs e)
        {
            Modelo.Enter(sender, e, 1, null, this);
        }

        #endregion

        #region Eventos de KeyDown

        private void rgvTabla_KeyDown(object sender, KeyEventArgs e)
        {
            if (rgvTabla.Rows.Count > 0)
                switch (e.KeyCode)
                {
                    case Keys.Delete: // Borrar
                        if (cbbBorrar.Enabled) cbbBorrar.PerformClick();
                        break;
                }
        }


        #endregion

        #region Eventos de KeyPress

        private void Componentes_KeyPress(object sender, KeyPressEventArgs e)
        {
            Modelo.KeyPress(sender, e, 1, this);
        }

        private void rgvTabla_KeyPress(object sender, KeyPressEventArgs e)
        {
            switch (e.KeyChar.ToString().ToUpper())
            {
                case "A": // Añadir
                    if (cbbAñadir.Enabled) cbbAñadir.PerformClick();
                    break;
                case "M": // Modificar
                    if (cbbModificar.Enabled) cbbModificar.PerformClick();
                    break;
                case "V": // Ver
                    if (cbbVer.Enabled) cbbVer.PerformClick();
                    break;
                case "B": // Borrar
                    if (cbbBorrar.Enabled) cbbBorrar.PerformClick();
                    break;
                case "E": // Encontrar
                    if (cbbEncontrar.Enabled) cbbEncontrar.PerformClick();
                    break;
                case "I": // Imprimir
                    if (cbbImprimir.Enabled) cbbImprimir.PerformClick();
                    break;
                case "C": // Configurar
                    if (cbbConfig.Enabled) cbbConfig.PerformClick();
                    break;
            }
        }

        #endregion

        #region Eventos de TextChanged

        private void Componentes_TextChanged(object sender, EventArgs e)
        {
            if (sender is RadTextBox textBox)
            {
                if (!string.IsNullOrWhiteSpace(textBox.Text))
                {
                    switch (textBox.Name)
                    {
                        case nameof(txtsector): txtCodigo_TextChanged(sender, e); break;
                        case nameof(txtnombre): txtDescripcion_TextChanged(sender, e); break;
                        case nameof(txtTodo): txtTodo_TextChanged(sender, e); break;
                    }
                }
                else cUltimosEncontrados = "";
            }
        }

        private void txtCodigo_TextChanged(object sender, EventArgs e)
        {
            LimpiarCamposBusquedaRapida(radPanel1.Controls, new string[] { nameof(txtsector) });

            eTipoBusquedaRapida = TipoBusquedaRapida.Codigo;
            if (temporizadorBusquedaRapida.Enabled) temporizadorBusquedaRapida.Stop();
            temporizadorBusquedaRapida.Start();
        }

        private void BusquedaRapida_Codigo()
        {
            try
            {
                if (!string.IsNullOrWhiteSpace(txtsector.Text) && txtsector.CadenaDentroRango(TipoRango.INT))
                {
                    rgvTabla.SelectionChanged -= rgvTabla_SelectionChanged;

                    RadTextBox[] aoTextBox = { };
                    rgvTabla.EncontrarRapidoRegistroRejilla(aoTextBox, null, Modelo.OrderBy);
                    FormatearColumnas();
                    cUltimosEncontrados = "(" + BRSLib.cUltimosEncontrados + ")";
                }
                rgvTabla.Visible = true;
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
            finally
            {
                rgvTabla.ActivarSelectionChanged(true);
                Cursor.Current = Cursors.Default;
            }
        }

        private void txtDescripcion_TextChanged(object sender, EventArgs e)
        {
            LimpiarCamposBusquedaRapida(radPanel1.Controls, new string[] { nameof(txtnombre) });

            eTipoBusquedaRapida = TipoBusquedaRapida.Descripcion;
            if (temporizadorBusquedaRapida.Enabled) temporizadorBusquedaRapida.Stop();
            temporizadorBusquedaRapida.Start();
        }

        private void BusquedaRapida_Descripcion()
        {
            try
            {
                if (!string.IsNullOrWhiteSpace(txtsector.Text) && txtsector.CadenaDentroRango(TipoRango.INT))
                {
                    rgvTabla.SelectionChanged -= rgvTabla_SelectionChanged;

                    RadTextBox[] aoTextBox = { };
                    rgvTabla.EncontrarRapidoRegistroRejilla(aoTextBox, null, Modelo.OrderBy);
                    FormatearColumnas();
                    cUltimosEncontrados = "(" + BRSLib.cUltimosEncontrados + ")";
                }
                rgvTabla.Visible = true;
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
            finally
            {
                rgvTabla.ActivarSelectionChanged(true);
                Cursor.Current = Cursors.Default;
            }
        }

        private void txtTodo_TextChanged(object sender, EventArgs e)
        {
            LimpiarCamposBusquedaRapida(radPanel1.Controls, new string[] { nameof(txtTodo) });

            eTipoBusquedaRapida = TipoBusquedaRapida.Todo;
            if (temporizadorBusquedaRapida.Enabled) temporizadorBusquedaRapida.Stop();
            temporizadorBusquedaRapida.Start();
        }

        private void BusquedaRapida_Todo()
        {
            try
            {
                if (!string.IsNullOrWhiteSpace(txtsector.Text) && txtsector.CadenaDentroRango(TipoRango.INT))
                {
                    rgvTabla.SelectionChanged -= rgvTabla_SelectionChanged;

                    RadTextBox[] aoTextBox = { };
                    rgvTabla.EncontrarRapidoRegistroRejilla(aoTextBox, null, Modelo.OrderBy);
                    FormatearColumnas();
                    cUltimosEncontrados = "(" + BRSLib.cUltimosEncontrados + ")";
                }
                rgvTabla.Visible = true;
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
            finally
            {
                rgvTabla.ActivarSelectionChanged(true);
                Cursor.Current = Cursors.Default;
            }
        }

        private void BusquedaRapidaTimerElapsed(object sender, EventArgs e)
        { // Si el temporizador ha permanecido activo el tiempo indicado
            if (temporizadorBusquedaRapida.Enabled)
            { // Paramos el temporizador
                temporizadorBusquedaRapida.Stop();

                Cursor.Current = Cursors.WaitCursor;
                rgvTabla.Visible = false;
                rgvTabla.LimpiarRejilla();

                // Lanzamos la accción
                switch (eTipoBusquedaRapida)
                {
                    case TipoBusquedaRapida.Codigo: BusquedaRapida_Codigo(); break;
                    case TipoBusquedaRapida.Descripcion: BusquedaRapida_Descripcion(); break;
                    case TipoBusquedaRapida.Todo: BusquedaRapida_Todo(); break;
                }
            }
        }

        #endregion

        #region Eventos de la Rejilla

        private void rgvTabla_CellDoubleClick(object sender, Telerik.WinControls.UI.GridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                if (cbbModificar.Enabled) cbbModificar.PerformClick();
                else if (cbbVer.Enabled) cbbVer.PerformClick();
            }
        }

        private void rgvTabla_CellFormatting(object sender, CellFormattingEventArgs e)
        {

        }

        private void rgvTabla_SelectionChanged(object sender, EventArgs e)
        {
            lblRegistro.Text = BRSLibRejilla.ActualizarContadorRegistros(rgvTabla);
        }

        private void rgvTabla_SortChanged(object sender, GridViewCollectionChangedEventArgs e)
        {
            lblRegistro.Text = BRSLibRejilla.ActualizarContadorRegistros(rgvTabla);
        }

        private void Columns_CollectionChanged(object sender, Telerik.WinControls.Data.NotifyCollectionChangedEventArgs e)
        {
            if (e.Action == Telerik.WinControls.Data.NotifyCollectionChangedAction.Move)
            {
                rgvTabla.SaveLayout(BRSLib.cRutaXML + "/" + BRSLib.nUsuario + "_" + this.Name + ".xml");
            }
        }

        #endregion

        #endregion

        #region Métodos Privados

        /// <summary>
        ///   Cambia el contenido del label de número de registros
        /// </summary>
        void CambiarLabel(string mensaje)
        {
            lblRegistro.Text = mensaje;
        }

        /// <summary>
        /// Función para subir o bajar un registro si estamos en el formulario de registro
        /// </summary>
        /// <param name="mensaje"></param>
        void CambiarRegistro(string mensaje, bool borrar = false)
        {
            if (borrar)
            {
                rgvTabla.QuitarRegistro();
                if (rgvTabla.RowCount != 0)
                {
                    if (mensaje == MovimientoRejilla.UP)
                        rgvTabla.GridNavigator.SelectPreviousRow(1);
                    rgvTabla.ActualizarCodigoSeleccionado();
                }
                else
                {
                    rgvTabla.LimpiarCodigoSeleccionado("-1");
                }
            }
            else
            {
                BRSLibRejilla.CambiarRegistro(this.Name, mensaje, rgvTabla, Modelo.ClavePrimaria);
            }
        }

        /// <summary>
        /// Función para formater las columnas en función de su contenido
        /// </summary>
        private void FormatearColumnas()
        {
            if (rgvTabla.ColumnCount > 0)
            {
                foreach (var campo in Modelo.CamposOcultos)
                {
                    rgvTabla.Columns[campo].IsVisible = false;
                }
            }
        }

        /// <summary>
        /// Función para establecer los atributos de la ventana de registro y listados
        /// </summary>
        private void EstablecerAtributosRegistro()
        {
            ofrmRegistro.CodAplicacion = CodAplicacion;
            ofrmRegistro.CodPrograma = CodPrograma;
            ofrmRegistro.Tabla = Modelo.TABLA;
            ofrmRegistro.ClavePrimaria = Modelo.ClavePrimaria;
            ofrmRegistro.eventoCambiarRegistro += CambiarRegistro;

        }

        /// <summary>
        /// Función que limpia los campos de búsqueda rápida
        /// </summary>
        /// <param name="_cCampo">Indica el campo que no queremos limpiar</param>
        private void LimpiarCamposBusquedaRapida(Control.ControlCollection oControles, string[] textBox = null)
        {
            foreach (Control oControl in oControles.OfType<RadTextBox>())
            {
                if (textBox == null || !textBox.Contains((oControl as RadTextBox).Name))
                {
                    (oControl as RadTextBox).TextChanged -= Componentes_TextChanged;
                    (oControl as RadTextBox).Text = "";
                    (oControl as RadTextBox).TextChanged += Componentes_TextChanged;
                }
            }

        }

        #endregion
    }
}
