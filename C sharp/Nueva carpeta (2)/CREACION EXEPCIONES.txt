using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Npgsql;

namespace BRSLibReyes
{
    public class Excepciones
    {
        public const string CodErrorClaveForanea = "23503";
        public const string CodErrorRegistroBloqueado = "55P03";

        /// <summary>
        ///
        /// </summary>
        /// <param name="ex"></param>
        /// <returns></returns>
        /// <exception cref="RegistroBloqueadoException"></exception>
        /// <exception cref="ClaveForaneaException"></exception>
        public static Exception AnalizarNpgsqlException(Exception ex)
        {
            if (ex is NpgsqlException npgsqlEx)
            {
                switch (npgsqlEx.Code)
                {
                    case CodErrorClaveForanea: // Registro en uso en otra tabla
                        return new ClaveForaneaException(npgsqlEx.TableName);
                    case CodErrorRegistroBloqueado: // Registro bloqueado
                        return new RegistroBloqueadoException();
                    default:
                        return ex;
                }
            }
            else
            {
                return ex;
            }
        }
    }

    [Serializable]
    public class RegistroBloqueadoException : Exception
    {
        public RegistroBloqueadoException() : base(ConstruirMensaje()) { }
        public RegistroBloqueadoException(string message) : base(message) { }
        public RegistroBloqueadoException(string message, Exception inner) : base(message, inner) { }
        protected RegistroBloqueadoException(
            System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context) : base(info, context) { }

        public static string ConstruirMensaje()
        {
            return Cadenas.RegistroBloqueadoException;
        }
    }

    [Serializable]
    public class RegistroInexistenteException : Exception
    {
        public RegistroInexistenteException() : base(ConstruirMensaje()) { }
        public RegistroInexistenteException(string message) : base(message) { }
        public RegistroInexistenteException(string message, Exception inner) : base(message, inner) { }
        protected RegistroInexistenteException(
            System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context) : base(info, context) { }

        public static string ConstruirMensaje()
        {
            return Cadenas.RegistroInexistenteException;
        }
    }

    [Serializable]
    public class ClaveForaneaException : Exception
    {
        public ClaveForaneaException() { }
        public ClaveForaneaException(string tabla) : base(ConstruirMensaje(tabla)) { }
        public ClaveForaneaException(string message, Exception inner) : base(message, inner) { }
        protected ClaveForaneaException(
            System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context) : base(info, context) { }

        public static string ConstruirMensaje(string tabla)
        {
            return string.Format(Cadenas.ClaveForaneaException, tabla);
        }
    }

    [Serializable]
    public class ValidarModeloException : Exception
    {
        public OrderedDictionary ErroresValidacion { get; set; }
        public ValidarModeloException() { }
        public ValidarModeloException(string message) : base(message) { }
        public ValidarModeloException(string message, Exception inner) : base(message, inner) { }
        public ValidarModeloException(OrderedDictionary _erroresValidacion) : base() { ErroresValidacion = _erroresValidacion; }
        protected ValidarModeloException(
            System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context) : base(info, context) { }
    }

    [Serializable]
    public class BorradoException : Exception
    {
        public BorradoException() { }
        public BorradoException(string tabla) : base(ConstruirMensaje(tabla)) { }
        public BorradoException(List<string> errores) : base(ConstruirMensaje(errores)) { }
        public BorradoException(string message, Exception inner) : base(message, inner) { }
        protected BorradoException(
          System.Runtime.Serialization.SerializationInfo info,
          System.Runtime.Serialization.StreamingContext context) : base(info, context) { }

        public static string ConstruirMensaje(string tabla)
        {
            return string.Format(Cadenas.ClaveForaneaException, tabla);
        }

        public static string ConstruirMensaje(List<string> errores)
        {
            string mensaje = "";

            //int prohibidos = errores.Count(c => c.StartsWith("PROHIBIDO||"));
            string[] prohibidos = errores.Where(c => c.StartsWith("PROHIBIDO||")).Select(c => c.Substring("PROHIBIDO||".Length)).ToArray();
            string[] usos = errores.Where(c => c.StartsWith("USO||")).Select(c => c.Substring("USO||".Length)).ToArray();

            bool lResumen = false;

            if (prohibidos.Length > 0)
            {
                mensaje = prohibidos[0];
            }
            else
            {
                if (usos.Length > 0)
                    lResumen = true;
                mensaje = "No puede borrarse el registro porque se encuentra en uso en las siguientes tablas:";

                for (int i = 0; i < usos.Length; i++)
                {
                    if (i < 3)
                    {
                        mensaje += "\n - " + usos[i];
                    }
                    else
                    {
                        if (lResumen)
                            mensaje += "\n - " + (usos.Length - 3) + " conflictos mÃ¡s detectados";
                        else
                            mensaje += "\n - " + usos[i];
                        break;
                    }
                }
            }
            return mensaje.ToString();
        }
    }
}
