using BRSERP.BD;
using Npgsql;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using Telerik.WinControls.UI;

namespace BRSERP
{
    public partial class BRSBuscarF2F3 : Telerik.WinControls.UI.RadForm
    {
        #region Variables

        short nMetodoOriginal = 0;
        string cTabla = null; //Nombre de la tabla a consultar
        string cNombreTabla = null; //Nombre formateado de la tabla para mostrar al usuario
        string cCampoCodigo = null; //Nombre del campo de código de la tabla a consultar
        string cCampoNombre = null; //Nombre del campo de nombre de la tabla a consultar
        string cCampoCodigo2 = null; //Nombre del campo de código2 de la tabla a consultar
        string cCampoNombre2 = null; //Nombre del campo de nombre2 de la tabla a consultar
        string cCampoCodigo3 = null; //Nombre del campo de código3 de la tabla a consultar
        string cCampoNombre3 = null; //Nombre del campo de nombre3 de la tabla a consultar
        string cCodigoObtenido = null; //Código que devuelve
        string cCodigo2Obtenido = null; //Código2 que devuelve
        string cNombreObtenido = null; //Nombre que devuelve
        string cCadConexion = null; //Cadena de la conexión de la base de datos
        string cRango = null; //Rango aplicable a la SQL del F2-F3
        string cSQL = null; //guarda las consultas SQL
        string cTextoBusqueda = null; // Guarda el texto proveniente del textbox

        string cNombreColumnaCodigo = null; // Nombre de la columna del código
        string nombreColumnaDescripcion = null; // Nombre de la columna de la descripción
        public bool lConsultaListados;

        string ultimoValorIntroducido;

        //int avPag = 0, rePag = 0;

        #endregion

        #region Formulario

        public BRSBuscarF2F3()
        {
            InitializeComponent();
            BRSComponentes.TitleBarColor(FormElement.TitleBar);
        }

        public string ColumnaCodigo
        {
            get { return cNombreColumnaCodigo; }
            set { cNombreColumnaCodigo = value; }
        }

        public string ColumnaDescripcion
        {
            get { return nombreColumnaDescripcion; }
            set { nombreColumnaDescripcion = value; }
        }

        //Método de operación del formulario; 1: F2-Código numérico / 2: F2-Código alfanumérico / 3: F3-Nombre
        public short Metodo { get; set; } = 0;


        //Nombre de la tabla a consultar
        public string Tabla
        {
            get { return cTabla; }
            set { cTabla = value; }
        }


        //Nombre de la tabla a consultar
        public string NombreTabla
        {
            get { return cNombreTabla; }
            set { cNombreTabla = value; }
        }


        //Nombre del campo de código
        public string CampoCodigo
        {
            get { return cCampoCodigo; }
            set { cCampoCodigo = value; }
        }


        //Nombre del campo de descripción
        public string CampoNombre
        {
            get { return cCampoNombre; }
            set { cCampoNombre = value; }
        }


        //Nombre del campo de código2
        public string CampoCodigo2
        {
            get { return cCampoCodigo2; }
            set { cCampoCodigo2 = value; }
        }


        //Nombre del campo de descripción2
        public string CampoNombre2
        {
            get { return cCampoNombre2; }
            set { cCampoNombre2 = value; }
        }

        //Nombre del campo de código3
        public string CampoCodigo3
        {
            get { return cCampoCodigo3; }
            set { cCampoCodigo3 = value; }
        }

        //Nombre del campo de descripción3
        public string CampoNombre3
        {
            get { return cCampoNombre3; }
            set { cCampoNombre3 = value; }
        }


        //Código obtenido
        public string CodigoObtenido
        {
            get { return cCodigoObtenido; }
            set { cCodigoObtenido = value; }
        }


        //Código2 obtenido
        public string Codigo2Obtenido
        {
            get { return cCodigo2Obtenido; }
            set { cCodigo2Obtenido = value; }
        }


        //Nombre obtenido
        public string NombreObtenido
        {
            get { return cNombreObtenido; }
            set { cNombreObtenido = value; }
        }


        //Cadena de la conexion de la base de datos
        public string CadConexion
        {
            get { return cCadConexion; }
            set { cCadConexion = value; }
        }


        //Rango
        public string Rango
        {
            get { return cRango; }
            set { cRango = value; }
        }

        public string TextoBusqueda
        {
            get { return cTextoBusqueda; }
            set { cTextoBusqueda = value; }
        }

        public string cColumnaExtra { get; set; }
        public string cNombreColumnaExtra { get; set; }
        public string cCodigoExtraObtenido { get; set; }

        public int[] AnchosColumnas { get; set; } = new int[] { 43, 355 }; // La suma de ambas es 398

        private void frmBuscarF2F3_Load(object sender, EventArgs e)
        {
            nMetodoOriginal = Metodo;
            //this.MaximumSize=this.MinimumSize=this.Size;

            //encabezado de la tabla
            lblTitulo.Text = "Consulta de " + this.NombreTabla;

            //título de la ventana según el método
            switch (this.Metodo)
            {
                case 1:
                    //this.Text = Cadenas.local_cNombreVentana_Codigo_F2F3;
                    this.Text = "Buscar por código";
                    break;
                case 2:
                    //this.Text = Cadenas.local_cNombreVentana_CodigoAlfa_F2F3;
                    this.Text = "Buscar por código";
                    break;
                case 3:
                    //this.Text = Cadenas.local_cNombreVentana_Nombre_F2F3;
                    this.Text = "Buscar por descripción";
                    break;
            }

            if (string.IsNullOrWhiteSpace(TextoBusqueda))
                txtBuscar.Text = "*";
            else
            {
                if (Metodo == 1)
                    txtBuscar.Text = TextoBusqueda;
                else
                    txtBuscar.Text = TextoBusqueda + "*";
            }
            rgvTabla.GridBehavior = new MyGridBehavior();

            ultimoValorIntroducido = txtBuscar.Text;
        }


        private void frmBuscarF2F3_Activated(object sender, EventArgs e)
        {
            txtBuscar.Focus();
            //txtBuscar.Text = "*";
            txtBuscar.SelectAll(); //si se busca el código seleccionamos el * para sobreescribirlo

        }

        #endregion

        #region Otros objetos del formulario



        private void txtBuscar_KeyDown(object sender, KeyEventArgs e)
        {
            int numRegistros = this.rgvTabla.RowCount; //numero de registros en la tabla
            float numPaginas = numRegistros / 12; //paginas totales

            switch (e.KeyCode) // Si se pulsa ESCAPE cierra y devuelve NULL
            {
                case Keys.Escape:
                    this.CodigoObtenido = null;
                    this.NombreObtenido = null;
                    this.Close();
                    break;
                case Keys.Up:
                    if (!this.rgvTabla.GridNavigator.IsFirstRow(this.rgvTabla.CurrentRow))
                        this.rgvTabla.GridNavigator.SelectPreviousRow(1);
                    else
                        this.rgvTabla.GridNavigator.SelectLastRow();
                    e.Handled = true;
                    break;

                case Keys.Down:
                    if (!this.rgvTabla.GridNavigator.IsLastRow(this.rgvTabla.CurrentRow))
                        this.rgvTabla.GridNavigator.SelectNextRow(1);
                    else
                        this.rgvTabla.GridNavigator.SelectFirstRow();
                    e.Handled = true;
                    break;

                case Keys.Home:
                    if (e.Control)
                    {
                        e.SuppressKeyPress = true;
                        this.txtBuscar.SelectionStart = 0;
                    }
                    else if (e.Shift)
                    {
                        e.SuppressKeyPress = true;
                        int selectionLength = txtBuscar.SelectionStart;
                        this.txtBuscar.SelectionStart = 0;
                        this.txtBuscar.SelectionLength = selectionLength;
                    }
                    else this.rgvTabla.GridNavigator.SelectFirstRow();
                    e.Handled = true;
                    break;

                case Keys.End:
                    if (e.Control)
                    {
                        e.SuppressKeyPress = true;
                        this.txtBuscar.SelectionStart = txtBuscar.Text.Length;
                    }
                    else if (e.Shift)
                    {
                        e.SuppressKeyPress = true;
                        int selectionLength = txtBuscar.TextLength - txtBuscar.SelectionStart;
                        this.txtBuscar.SelectionStart = txtBuscar.SelectionStart + txtBuscar.SelectionLength;
                        this.txtBuscar.SelectionLength = selectionLength;
                    }
                    else this.rgvTabla.GridNavigator.SelectLastRow();
                    e.Handled = true;
                    break;

                //Avanzar página
                case Keys.PageDown:

                    int registroSiguiente = this.rgvTabla.MasterTemplate.DataView.CurrentPosition + 12;
                    float pag = (numPaginas * registroSiguiente) / numRegistros;
                    int pagSiguiente = (int)Math.Round(pag, 0);

                    registroSiguiente = pagSiguiente * 12;

                    if (rgvTabla.RowCount > 0)
                    {
                        if (registroSiguiente >= numRegistros) this.rgvTabla.GridNavigator.SelectLastRow();
                        else
                        {
                            this.rgvTabla.MasterTemplate.DataView.MoveCurrentTo(rgvTabla.Rows[registroSiguiente]);
                            this.rgvTabla.TableElement.ScrollToRow(registroSiguiente);
                            /* if (avPag == 0) avPag = 1;
                             else
                             {
                                 this.rgvTabla.TableElement.ScrollToRow(registroSiguiente);
                                 avPag = 0;
                             }*/
                        }
                    }
                    e.Handled = true;

                    break;
                //Retoceder página
                case Keys.PageUp:

                    int registroAnterior = this.rgvTabla.MasterTemplate.DataView.CurrentPosition - 12;
                    float i = (numPaginas * registroAnterior) / numRegistros;
                    int pagAnterior = (int)Math.Round(i, 0);

                    registroAnterior = pagAnterior * 12;

                    if (rgvTabla.RowCount > 0)
                    {
                        if (registroAnterior < 0) this.rgvTabla.GridNavigator.SelectFirstRow();
                        else
                        {
                            this.rgvTabla.MasterTemplate.DataView.MoveCurrentTo(rgvTabla.Rows[registroAnterior]);
                            this.rgvTabla.TableElement.ScrollToRow(registroAnterior);
                        }
                    }
                    e.Handled = true;

                    break;
                case Keys.F2:
                    Metodo = nMetodoOriginal == 1 || nMetodoOriginal == 2 ? nMetodoOriginal : Convert.ToInt16(2);
                    ultimoValorIntroducido = txtBuscar.Text = "*";
                    txtBuscar.SelectAll();
                    this.Text = "Buscar por código";
                    ObtenerDatosPostgres(this.Metodo);
                    break;
                case Keys.F3:
                    Metodo = 3;
                    ultimoValorIntroducido = txtBuscar.Text = "*";
                    txtBuscar.SelectAll();
                    this.Text = "Buscar por descripción";
                    ObtenerDatosPostgres(this.Metodo);
                    break;

            }

            //if (e.KeyCode == Keys.Escape) //si se pulsa ESCAPE cierra y devuelve NULL
            //{
            //    this.CodigoObtenido = null;
            //    this.NombreObtenido = null;
            //    this.Close();
            //}
            //else if (e.KeyCode == Keys.Up)
            //{
            //    if (rgvTabla.CurrentRow.Index > 0)
            //        this.rgvTabla.CurrentRow = this.rgvTabla.Rows[rgvTabla.CurrentRow.Index - 1];
            //    e.Handled = true;
            //}
            //else if (e.KeyCode == Keys.Down)
            //{
            //    if (rgvTabla.CurrentRow.Index < (rgvTabla.RowCount - 1))
            //        this.rgvTabla.CurrentRow = this.rgvTabla.Rows[rgvTabla.CurrentRow.Index + 1];
            //    e.Handled = true;
            //}
        }

        public IEnumerable<GridViewDataRowInfo> GetVisibleDataRows()

        {

            foreach (GridRowElement rowElement in this.rgvTabla.TableElement.VisualRows)

            {

                if (rowElement.RowInfo is GridViewDataRowInfo)

                {

                    yield return rowElement.RowInfo as GridViewDataRowInfo;

                }

            }

        }

        private void txtBuscar_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (e.KeyChar == (char)Keys.Return)
                {
                    //e.Handled = true;
                    //SendKeys.Send("{TAB}");
                    AceptarDatos();
                }
                else
                {
                    //evita dos asteriscos seguidos
                    if (e.KeyChar == '*' && txtBuscar.TextLength > 0)
                    {
                        if (txtBuscar.SelectedText.Contains("*") || txtBuscar.SelectedText.Length == txtBuscar.Text.Length)
                        {

                        }
                        else if (txtBuscar.Text.Substring(txtBuscar.TextLength - 1, 1) == "*")
                        {
                            e.Handled = true;
                        }
                    }

                    if (this.Metodo == 1) //código numérico: solo números
                    {
                        if (Char.IsDigit(e.KeyChar)) e.Handled = false;
                        else if (Char.IsControl(e.KeyChar)) e.Handled = false;
                        else if (Char.IsSeparator(e.KeyChar)) e.Handled = false;
                        else if (e.KeyChar == '*' && txtBuscar.Text == "") e.Handled = false; //no permite asteriscos
                        else if (e.KeyChar == '*' && txtBuscar.SelectedText == txtBuscar.Text) e.Handled = false;
                        else e.Handled = true;
                    }

                    //elimina el asterisco cuando escribe algo si se está buscando un código
                    //if (this.Metodo == 1 || this.Metodo == 2)
                    if (this.Metodo == 1 && Char.IsDigit(e.KeyChar))
                        if (txtBuscar.Text == "*") txtBuscar.Text = "";
                }
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
        }

        private void txtBuscar_TextChanged(object sender, EventArgs e)
        {
            if (txtBuscar.Text != "")
            {
                if (lConsultaListados)
                    ObtenerDatosPostgres(this.Metodo);
                else
                    ObtenerDatosPostgres(this.Metodo);
            }
            else
                rgvTabla.Rows.Clear();
        }


        // Al hacer doble click se comporta igual que al pulsar ENTER
        private void rgvTabla_CellDoubleClick(object sender, Telerik.WinControls.UI.GridViewCellEventArgs e)
        {
            AceptarDatos();
        }

        private void rgvTabla_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter) //si se pulsa ENTER
                AceptarDatos();
        }

        private void rgvTabla_CellFormatting(object sender, CellFormattingEventArgs e)
        {
        }

        #endregion

        #region Métodos privados

        // Carga la tabla con los datos que se piden en la búsqueda.
        void ObtenerDatosPostgres(short iIdent) // 1: Código numérico  2: Código alfanumérico  3: Nombre
        {
            try
            {
                //limpiamos la tabla
                rgvTabla.Rows.Clear(); rgvTabla.Columns.Clear(); Application.DoEvents();
                NpgsqlConnection oConexionPostgres = new NpgsqlConnection();
                if (CadConexion == null) oConexionPostgres.ConnectionString = BRSLib.cConexionGR; else oConexionPostgres.ConnectionString = CadConexion;
                NpgsqlCommand oComandoPostgres = new NpgsqlCommand();
                oComandoPostgres.Connection = oConexionPostgres;

                cSQL = "SELECT " + this.CampoCodigo + ", " + this.CampoNombre;
                if (!string.IsNullOrWhiteSpace(this.CampoNombre2))
                    cSQL += ", " + this.CampoNombre2;
                if (!string.IsNullOrWhiteSpace(this.cColumnaExtra))
                    cSQL += ", " + this.cColumnaExtra;
                cSQL += " FROM " + this.Tabla;

                if (iIdent == 1 || iIdent == 2) //buscar por código
                {
                    if (txtBuscar.Text != "*")
                    {
                        if (iIdent == 1)
                        {
                            cSQL += " WHERE " + this.CampoCodigo + " = :param0";
                            oComandoPostgres.Parameters.Add(new NpgsqlParameter("param0", txtBuscar.Text));
                        }
                        else
                        {
                            cSQL += " WHERE UPPER(" + this.CampoCodigo + ") LIKE :param0";

                            string[] baseDatosNoConta = { "G", "T", "B" };
                            if ((Tabla == "cuentas" || Tabla == "extcuentas") && BRSLib.moduloContabilidad && !baseDatosNoConta.Contains(oConexionPostgres.Database.Substring(0, 1)))
                            {
                                string txtBuscarAux = BRSLibConta.ReemplazaPuntoCeroCuentaString(txtBuscar, true, "0", BRSLibBD.cConexionContabilidad);

                                if (txtBuscarAux.Contains("*"))
                                    oComandoPostgres.Parameters.Add(new NpgsqlParameter("param0", txtBuscarAux.ToUpper().Replace("*", "%") + "%"));
                                else
                                    oComandoPostgres.Parameters.Add(new NpgsqlParameter("param0", txtBuscarAux.ToUpper().Replace("*", "%") + "%"));
                            }
                            else
                            {
                                if (txtBuscar.Text.Contains("*"))
                                    oComandoPostgres.Parameters.Add(new NpgsqlParameter("param0", txtBuscar.Text.ToUpper().Replace("*", "%") + "%"));
                                else
                                    oComandoPostgres.Parameters.Add(new NpgsqlParameter("param0", txtBuscar.Text.ToUpper().Replace("*", "%") + "%"));
                            }
                        }
                    }

                    //Añadimos la condición del Código 2 si la tuviese
                    if (!string.IsNullOrWhiteSpace(this.CampoNombre2) && !string.IsNullOrWhiteSpace(this.CampoCodigo2))
                    {
                        if (cSQL.Contains("WHERE") == true) cSQL += " AND " + this.CampoNombre2.Trim() + " = :param1";
                        else cSQL += " WHERE " + this.CampoNombre2.Trim() + " = :param1";

                        oComandoPostgres.Parameters.Add(new NpgsqlParameter("param1", this.CampoCodigo2.Trim()));
                    }

                    //Añadimos la condición del Código 3 si la tuviese
                    if (!string.IsNullOrWhiteSpace(this.CampoNombre3) && !string.IsNullOrWhiteSpace(this.CampoCodigo3))
                    {
                        if (cSQL.Contains("WHERE") == true) cSQL += " AND " + this.CampoNombre3.Trim() + " = :param2";
                        else cSQL += " WHERE " + this.CampoNombre3.Trim() + " = :param2";

                        oComandoPostgres.Parameters.Add(new NpgsqlParameter("param2", this.CampoCodigo3.Trim()));
                    }

                    //Añadimos el rango si lo tuviese
                    if (this.Rango != null)
                    {
                        if (cSQL.Contains("WHERE") == true) cSQL += " AND " + Rango.ToString();
                        else cSQL += " WHERE " + Rango.ToString();
                    }

                    cSQL += " ORDER BY " + this.CampoCodigo;
                    if (!string.IsNullOrWhiteSpace(this.CampoNombre2))
                        cSQL += ", " + this.CampoNombre2;
                }
                else //Descripción
                {
                    cSQL += " WHERE UPPER(" + this.CampoNombre + ") LIKE :param0";
                    if (txtBuscar.Text.ToUpper().Contains("*"))
                        oComandoPostgres.Parameters.Add(new NpgsqlParameter("param0", txtBuscar.Text.ToUpper().Replace("*", "%") + "%"));
                    else
                        oComandoPostgres.Parameters.Add(new NpgsqlParameter("param0", txtBuscar.Text.ToUpper().Replace("*", "%") + "%"));

                    //Añadimos la condición del Código 2 si la tuviese
                    if (!string.IsNullOrWhiteSpace(this.CampoNombre2) && !string.IsNullOrWhiteSpace(this.CampoCodigo2))
                    {
                        cSQL += " AND " + this.CampoNombre2.Trim() + " = :param1";
                        oComandoPostgres.Parameters.Add(new NpgsqlParameter("param1", this.CampoCodigo2.Trim()));
                    }

                    //Añadimos la condición del Código 3 si la tuviese
                    if (!string.IsNullOrWhiteSpace(this.CampoNombre3) && !string.IsNullOrWhiteSpace(this.CampoCodigo3))
                    {
                        cSQL += " AND " + this.CampoNombre3.Trim() + " = :param2";
                        oComandoPostgres.Parameters.Add(new NpgsqlParameter("param2", this.CampoCodigo3.Trim()));
                    }

                    //Añadimos el rango si lo tuviese
                    if (this.Rango != null)
                    {
                        if (cSQL.Contains("WHERE") == true) cSQL += " AND " + Rango.ToString();
                        else cSQL += " WHERE " + Rango.ToString();
                    }

                    cSQL += " ORDER BY " + this.CampoNombre;
                }

                oComandoPostgres.CommandText = cSQL;
                oConexionPostgres.Open();

                BRSLib.WriteLogDebug(BRSLib.AnalizarNpgsqlCommand(oComandoPostgres), this.Name, System.Reflection.MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, oComandoPostgres);

                NpgsqlDataReader oDataReaderPostgres = oComandoPostgres.ExecuteReader();

                if (oDataReaderPostgres.HasRows)
                {
                    rgvTabla.AllowColumnChooser = false;
                    rgvTabla.MasterTemplate.LoadFrom(oDataReaderPostgres);

                    if (ColumnaCodigo == null)
                        rgvTabla.Columns[0].HeaderText = Cadenas.local_cCodigo_F2F3;
                    else
                        rgvTabla.Columns[0].HeaderText = ColumnaCodigo;

                    if (ColumnaDescripcion == null)
                        rgvTabla.Columns[1].HeaderText = Cadenas.local_cNombre_F2F3;
                    else
                        rgvTabla.Columns[1].HeaderText = ColumnaDescripcion;

                    if (!string.IsNullOrWhiteSpace(this.CampoNombre2))
                        rgvTabla.Columns[2].IsVisible = false;

                    if (!string.IsNullOrWhiteSpace(this.cColumnaExtra))
                    {
                        rgvTabla.Columns[cColumnaExtra].IsVisible = true;
                        if (!string.IsNullOrWhiteSpace(this.cNombreColumnaExtra))
                            rgvTabla.Columns[cColumnaExtra].HeaderText = cNombreColumnaExtra;
                    }

                    if (Metodo == 1)
                        rgvTabla.Columns[0].TextAlignment = ContentAlignment.MiddleRight;
                    else if (Metodo == 2)
                        rgvTabla.Columns[0].TextAlignment = ContentAlignment.MiddleLeft;
                    else // Metodo == 3
                    {
                        string cSelectTipoColumna = "SELECT data_type FROM information_schema.columns WHERE table_schema = 'public' AND lower(table_name) = lower(:param0) AND lower(column_name) = (:param1);";
                        object[] aoParametros = { cTabla, cCampoCodigo };
                        string cTipo = BRSLib.SelectScalarCadena(cSelectTipoColumna, aoParametros, cCadConexion);

                        switch (cTipo)
                        {
                            case "bigint": // Int64
                            case "integer": // Int32
                            case "smallint": // Int16
                            case "money": // Money
                            case "numeric": // Decimal
                                rgvTabla.Columns[0].TextAlignment = ContentAlignment.MiddleRight;
                                break;

                            default:
                                rgvTabla.Columns[0].TextAlignment = ContentAlignment.MiddleLeft;
                                break;
                        }
                    }

                    rgvTabla.MasterTemplate.BestFitColumns();
                    for (int i = 0; i < AnchosColumnas.Length; i++)
                    {
                        rgvTabla.MasterTemplate.Columns[i].Width = AnchosColumnas[i];
                    }

                }
                oDataReaderPostgres.Close();
                oConexionPostgres.Close();
                iIdent = 0;

                oComandoPostgres.Dispose();
                oConexionPostgres.Dispose();

            }
            catch (Exception ex)
            {
                if (ex is NpgsqlException && ((ex as NpgsqlException).Code == "42883" || (ex as NpgsqlException).Code == "22P02"))
                {
                    Metodo = nMetodoOriginal = 1;
                    txtBuscar.Text = ultimoValorIntroducido;
                    txtBuscar.SelectAll();
                }
                else if (ex is NpgsqlException && (ex as NpgsqlException).Code == "22003")
                {

                }
                else
                {
                    BRSLib.WriteLogDebug("Error al obtener los datos para para cargar la rejilla", this.Name, System.Reflection.MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.ERROR_EXCEPCION, "", BRSLog.LINEAVACIA.NO, ex);
                    BRSLib.Logger?.LogExcepcion(ex);
                    BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
                }
            }
        }

        private void frmBuscarF2F3_FormClosed(object sender, FormClosedEventArgs e)
        {
            rgvTabla.Dispose();
        }

        /*
        // Carga la tabla con los datos que se piden en la búsqueda.
        void ObtenerDatosSqlServer(short iIdent) // 1: Código numérico  2: Código alfanumérico  3: Nombre
        {
            try
            {
                //limpiamos la tabla
                rgvTabla.Rows.Clear(); rgvTabla.Columns.Clear(); Application.DoEvents();

                SqlConnection oConexionSqlServer = new SqlConnection(BRSLib.cConexionGR); //conexión al servidor de datos
                SqlCommand oComandoSqlServer = new SqlCommand();
                oComandoSqlServer.Connection = oConexionSqlServer;

                cSQL = "SELECT " + this.CampoCodigo + ", " + this.CampoNombre + " FROM " + this.Tabla;

                if (iIdent == 1 || iIdent == 2) //buscar por código
                {
                    if (txtBuscar.Text != "*")
                    {
                        if (iIdent == 1)
                        {
                            cSQL += " WHERE " + this.CampoCodigo + " = @param0";
                            oComandoSqlServer.Parameters.Add(new NpgsqlParameter("param0", txtBuscar.Text));
                        }
                        else
                        {
                            cSQL += " WHERE UPPER(" + this.CampoCodigo + ") LIKE @param0";
                            oComandoSqlServer.Parameters.Add(new NpgsqlParameter("param0", txtBuscar.Text.ToUpper().Replace("*", "%") + "%"));
                        }
                    }

                    //Añadimos la condición del Código 2 si la tuviese
                    if (this.CampoNombre2 != null)
                    {
                        if (cSQL.Contains("WHERE") == true) cSQL += " AND " + this.CampoNombre2.Trim() + " = @param1";
                        else cSQL += " WHERE " + this.CampoNombre2.Trim() + " = @param1";

                        oComandoSqlServer.Parameters.Add(new SqlParameter("param1", this.CampoCodigo2.Trim()));
                    }

                    //Añadimos el rango si lo tuviese
                    if (this.Rango != null)
                    {
                        if (cSQL.Contains("WHERE") == true) cSQL += " AND " + Rango.ToString();
                        else cSQL += " WHERE " + Rango.ToString();
                    }

                    cSQL += " ORDER BY " + this.CampoCodigo;
                }
                else //Descripción
                {
                    cSQL += " WHERE " + this.CampoNombre + " LIKE @param0";
                    oComandoSqlServer.Parameters.Add(new SqlParameter("param0", txtBuscar.Text.ToUpper().Replace("*", "%") + "%"));

                    //Añadimos la condición del Código 2 si la tuviese
                    if (this.CampoNombre2 != null)
                    {
                        cSQL += " AND " + this.CampoNombre2.Trim() + " = @param1";
                        oComandoSqlServer.Parameters.Add(new SqlParameter("param1", this.CampoCodigo2.Trim()));
                    }

                    //Añadimos el rango si lo tuviese
                    if (this.Rango != null)
                    {
                        if (cSQL.Contains("WHERE") == true) cSQL += " AND " + Rango.ToString();
                        else cSQL += " WHERE " + Rango.ToString();
                    }

                    cSQL += " ORDER BY " + this.CampoNombre;
                }
                oComandoSqlServer.CommandText = cSQL;
                oConexionSqlServer.Open();
                SqlDataReader oDataReaderSqlServer = oComandoSqlServer.ExecuteReader();

                if (oDataReaderSqlServer.HasRows)
                {
                    rgvTabla.MasterTemplate.LoadFrom(oDataReaderSqlServer);
                    rgvTabla.Columns[0].HeaderText = Cadenas.local_cCodigo_F2F3;
                    rgvTabla.Columns[1].HeaderText = Cadenas.local_cNombre_F2F3;
                    rgvTabla.MasterTemplate.BestFitColumns();
                    rgvTabla.MasterTemplate.Columns[1].Width = 355;
                }
                oDataReaderSqlServer.Close();
                oConexionSqlServer.Close();
                iIdent = 0;
            }
            catch (Exception ex)
            {
                                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\r" + Name + " : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);

            }
        }*/


        //Cierra el formulario si se ha seleccionado un registro de la tabla
        void AceptarDatos()
        {
            if (rgvTabla.Rows.Count > 0)
            {
                if (rgvTabla.CurrentRow.Index != -1)
                {
                    //devuelve el contenido del registro
                    this.CodigoObtenido = rgvTabla.CurrentRow.Cells[0].Value.ToString();
                    this.NombreObtenido = rgvTabla.CurrentRow.Cells[1].Value.ToString();
                    if (!string.IsNullOrWhiteSpace(this.CampoNombre2))
                        this.Codigo2Obtenido = rgvTabla.CurrentRow.Cells[2].Value.ToString();
                    if (!string.IsNullOrWhiteSpace(this.cColumnaExtra))
                        this.cCodigoExtraObtenido = rgvTabla.CurrentRow.Cells[cColumnaExtra].Value.ToString();
                }
            }
            this.Close();
        }

        #endregion
    }
}
