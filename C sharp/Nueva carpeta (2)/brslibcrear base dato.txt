using BRSLibReyes.BD;
using System;
using System.IO;

namespace BRSLibReyes
{
    public class BRSLibCrearBD
    {
        private enum BASEDATO { Contabilidad, Gestion, Tesoreria };
        private static BASEDATO baseDatos;

        private static string cConexion = BRSLibBD.cConexionBRSERP;

        #region Funciones para la creación del ejercicio

        /// <summary>
        /// Función para crear un ejercicio
        /// </summary>
        /// <param name="_cDatabaseOrigen">El nombre de la base de datos de origen</param>
        /// <param name="_cDatabaseDestino">El nombre de la base de datos de destino</param>
        /// <param name="lIncluirCuentas">Se incluyen las cuentas</param>
        /// <param name="_ofrmProcesando">Objeto frmProcesando opcional para mostrar mensajes en pantalla</param>
        public static void CrearEjercicio(string _cDatabaseOrigen, string _cDatabaseDestino, bool lIncluirCuentas, frmProcesandoV2 _ofrmProcesando = null)
        {
            try
            {
                baseDatos = BASEDATO.Contabilidad;
                IniciarProceso(_cDatabaseOrigen, _cDatabaseDestino, lIncluirCuentas, _ofrmProcesando);
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para crear una nueva tesorería
        /// </summary>
        /// <param name="_cDatabaseOrigen">El nombre de la base de datos de origen</param>
        /// <param name="_cDatabaseDestino">El nombre de la base de datos de destino</param>
        /// <param name="_ofrmProcesando">Objeto frmProcesando opcional para mostrar mensajes en pantalla</param>
        public static void CrearTesoreria(string _cDatabaseOrigen, string _cDatabaseDestino, frmProcesandoV2 _ofrmProcesando = null)
        {
            try
            {
                baseDatos = BASEDATO.Tesoreria;
                IniciarProceso(_cDatabaseOrigen, _cDatabaseDestino, false, _ofrmProcesando);
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para crear una nueva gestión
        /// </summary>
        /// <param name="_cDatabaseOrigen">El nombre de la base de datos de origen</param>
        /// <param name="_cDatabaseDestino">El nombre de la base de datos de destino</param>
        /// <param name="_ofrmProcesando">Objeto frmProcesando opcional para mostrar mensajes en pantalla</param>
        public static void CrearGestion(string _cDatabaseOrigen, string _cDatabaseDestino, frmProcesandoV2 _ofrmProcesando = null)
        {
            try
            {
                baseDatos = BASEDATO.Gestion;
                IniciarProceso(_cDatabaseOrigen, _cDatabaseDestino, false, _ofrmProcesando);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private static void IniciarProceso(string _cDatabaseOrigen, string _cDatabaseDestino, bool _lIncluirCuentas, frmProcesandoV2 _ofrmProcesando = null)
        {
            try
            {
                string cFicheroBackup = "tmp_backup.sql";
                CrearEstructura(_cDatabaseOrigen, _cDatabaseDestino, _ofrmProcesando);
                GenerarCopia(_cDatabaseOrigen, cFicheroBackup, _lIncluirCuentas, _ofrmProcesando);
                RestaurarCopia(_cDatabaseDestino, cFicheroBackup, _lIncluirCuentas, _ofrmProcesando);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private static void CrearEstructura(string _cDatabaseOrigen, string _cDatabaseDestino, frmProcesandoV2 _ofrmProcesando = null)
        {
            try
            {
                string cComentario = "";

                switch (baseDatos)
                {
                    case BASEDATO.Contabilidad: cComentario = "BBDD CONTABILIDAD"; break;
                    case BASEDATO.Gestion: cComentario = "BBDD GESTION"; break;
                    case BASEDATO.Tesoreria: cComentario = "BBDD TESORERIA"; break;
                }


                if (_ofrmProcesando != null)
                    _ofrmProcesando.CambiarMensaje("Creando la estructura");

                string cSQL;

                // Cerramos todas las conexiones con la base de datos de origen
                cSQL = "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = " + _cDatabaseOrigen.Quoted() + ";";
                BRSLibBD.LanzarNonQuery(cConexion, cSQL);

                // Creamos el nuevo ejercicio basándonos en el seleccionado
                cSQL = "CREATE DATABASE \"" + _cDatabaseDestino + "\" OWNER postgres;";
                BRSLibBD.LanzarNonQuery(cConexion, cSQL);

                // Añadimos el comentario a la base de datos
                if (!string.IsNullOrWhiteSpace(cComentario))
                {
                    cSQL = "COMMENT ON DATABASE \"" + _cDatabaseDestino + "\" IS '" + cComentario + "';";
                    BRSLibBD.LanzarNonQuery(cConexion, cSQL);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private static void GenerarCopia(string _cDatabaseOrigen, string _cFicheroBackup, bool _lIncluirCuentas, frmProcesandoV2 _ofrmProcesando = null)
        {
            if (_ofrmProcesando != null)
                _ofrmProcesando.CambiarMensaje("Generando la copia");

            // Creamos un sql con los datos de la base de datos de origen, ignorando el contenido de las tablas listadas a continuación
            string[] TablasAIgnorar = { };

            BRSLibProcesosExternos.pg_dump_backUp(_cFicheroBackup, _cDatabaseOrigen, TablasAIgnorar);
        }

        private static void RestaurarCopia(string _cDatabaseDestino, string _cFicheroBackup, bool _lIncluirCuentas, frmProcesandoV2 _ofrmProcesando = null)
        {
            try
            {
                if (_ofrmProcesando != null)
                    _ofrmProcesando.CambiarMensaje("Restaurando la copia");
                // Leemos el contenido del archivo de backup
                FileInfo oArchivo = new FileInfo(BRSLibProcesosExternos.cRutaArchivosPostgres + _cFicheroBackup);
                string cSQL;
                using (StreamReader sr = oArchivo.OpenText())
                {
                    cSQL = sr.ReadToEnd();
                }

                // Ejecutamos el sql en la nueva BD
                string cConexion = BRSLibBD.CadenaConexion(_cDatabaseDestino);
                BRSLibBD.LanzarNonQuery(cConexion, cSQL);


            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region Eliminamos la base de datos indiciada

        public static void BorrarBD(string _cDatabase)
        {
            try
            {
                string cSQL = "DROP DATABASE IF EXISTS \"" + _cDatabase + "\"";
                BRSLibBD.LanzarNonQuery(cConexion, cSQL);
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion
    }
}
