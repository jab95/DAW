using BRSLibReyes.Validadores;
using Npgsql;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using Telerik.WinControls.UI;

namespace BRSLibReyes.BD
{
    /// <summary>
    /// Biblioteca de funciones relacionadas con el acceso o modificación de la base de datos
    /// </summary>
    public class BRSLibBD
    {
        static BRSLibBD()
        {
        }

        public const string Name = nameof(BRSLibBD);

        #region Variables de conexiones

        /// <summary>Cadena de conexión con la base de datos BRSERPC</summary>
        public static string cConexionBRSERP;
        /// <summary>Cadena de conexión con la base de datos un centro</summary>
        public static string cConexionCentro;
        /// <summary>Cadena de conexión de la base de datos genérica de Access</summary>
        public static string cConexionGenericaAccess;

        #endregion

        #region Variables de acceso a la base de datos

        /// <summary>IP o nombre del servidor de la base de datos</summary>
        public static string cIPServidorBD;
        /// <summary>Puerto del servicio de la base de datos</summary>
        public static string cPuertoBD;
        /// <summary>Encoding de la base de datos</summary>
        public static string cEncoding;
        /// <summary>Ruta de la base de datos de access</summary>
        public static string cGenericaAccess;
        /// <summary>Usuario de la base de datos</summary>
        public static string cUserID = "postgres";
        /// <summary>Contraseña de la base de datos</summary>
        public static string cPassword = "brs2012";
        /// <summary>Nombre de la base de datos principal</summary>
        public static string cDatabase = "BRSERPReyes";

        #endregion

        #region Funciones de tipo NonQuery

        public static Task<int> LanzarNonQueryAsync(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            return Task.FromResult<int>(LanzarNonQuery(_cConexion, _cSQL, _aoParametros));
        }

        /// <summary>
        /// Función para ejecutar una consulta de inserción, actualización o borrado en la base de datos
        /// a través de una cadena de conexión
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_cSQL">La consulta a ejecutar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta si los tuviera</param>
        /// <returns>El número de filas afectadas</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int LanzarNonQuery(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        return LanzarNonQuery(oComando, _cSQL, _aoParametros);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para ejecutar una consulta de inserción, actualización o borrado en la base de datos
        /// a traves de un objeto comando para mantener una transacción
        /// </summary>
        /// <param name="_oComando">El objeto comando con la transacción activa</param>
        /// <param name="_cSQL">La consulta a ejecutar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta si los tuviera</param>
        /// <returns>El número de filas afectadas</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int LanzarNonQuery(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                if (_oComando.Transaction != null)
                    _oComando.Transaction.Save("preguardado");

                _oComando.CommandText = _cSQL;
                InsertarParametros(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarNpgsqlCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name, BRSLog.PalabraClaveSQL(_cSQL),
                                     "", BRSLog.LINEAVACIA.NO, null, _oComando);

                return _oComando.ExecuteNonQuery();
            }
            catch (Exception)
            {
                if (_oComando.Transaction != null)
                    _oComando.Transaction.Rollback("preguardado");

                throw;
            }
        }


        /// <summary>
        /// Función para ejecutar una consulta de inserción, actualización o borrado en la base de datos
        /// a través de una cadena de conexión
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_cSQL">La consulta a ejecutar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta si los tuviera</param>
        /// <returns>El número de filas afectadas</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int LanzarNonQueryAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            using (OleDbConnection oConexion = new OleDbConnection(_cConexion))
            {
                using (OleDbCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        return LanzarNonQueryAccess(oComando, _cSQL, _aoParametros);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para ejecutar una consulta de inserción, actualización o borrado en la base de datos
        /// a traves de un objeto comando para mantener una transacción
        /// </summary>
        /// <param name="_oComando">El objeto comando con la transacción activa</param>
        /// <param name="_cSQL">La consulta a ejecutar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta si los tuviera</param>
        /// <returns>El número de filas afectadas</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int LanzarNonQueryAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                _oComando.CommandText = _cSQL;
                InsertarParametrosAccess(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name, BRSLog.PalabraClaveSQL(_cSQL),
                                     "", BRSLog.LINEAVACIA.NO, null, _oComando);

                return _oComando.ExecuteNonQuery();
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region Funciones para obtener un único valor de la base de datos

        #region Como objeto

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un objeto</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static object SelectScalar(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        return SelectScalar(oComando, _cSQL, _aoParametros);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un objeto</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static object SelectScalar(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                _oComando.CommandText = _cSQL;
                InsertarParametros(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarNpgsqlCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.CONSULTA,
                                     "", BRSLog.LINEAVACIA.NO, null, _oComando);

                return _oComando.ExecuteScalar();
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función interna para realizar una búsqueda scalar en la base de datos indicando el tipo
        /// en los logs y mensajes de error
        /// </summary>
        /// <param name="_cTipo">El tipo de dato que queremos obtener</param>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un objeto</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        private static object SelectScalar(string _cTipo, string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        return SelectScalar(_cTipo, oComando, _cSQL, _aoParametros);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función interna para realizar una búsqueda scalar en la base de datos indicando el tipo
        /// en los logs y mensajes de error
        /// </summary>
        /// <param name="_cTipo">El tipo de dato que queremos obtener</param>
        /// <param name="_oComando">Un objeto comando para mantener las transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un objeto</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        private static object SelectScalar(string _cTipo, NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                _oComando.CommandText = _cSQL;
                InsertarParametros(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarNpgsqlCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name + _cTipo, BRSLog.PALABRA_CLAVE.CONSULTA,
                                     "", BRSLog.LINEAVACIA.NO, null, _oComando);

                return _oComando.ExecuteScalar();
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un objeto</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static object SelectScalarSinLog(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        return SelectScalarSinLog(oComando, _cSQL, _aoParametros);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un objeto</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static object SelectScalarSinLog(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                _oComando.CommandText = _cSQL;
                InsertarParametros(_oComando, _aoParametros);
                return _oComando.ExecuteScalar();
            }
            catch (Exception)
            {
                throw;
            }
        }


        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un objeto</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static object SelectScalarAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            using (OleDbConnection oConexion = new OleDbConnection(_cConexion))
            {
                using (OleDbCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        return SelectScalarAccess(oComando, _cSQL, _aoParametros);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un objeto</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static object SelectScalarAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                _oComando.CommandText = _cSQL;
                InsertarParametrosAccess(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarOleDbCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.CONSULTA,
                                     "", BRSLog.LINEAVACIA.NO, null, _oComando);

                return _oComando.ExecuteScalar();
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función interna para realizar una búsqueda scalar en la base de datos indicando el tipo
        /// en los logs y mensajes de error
        /// </summary>
        /// <param name="_cTipo">El tipo de dato que queremos obtener</param>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un objeto</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        private static object SelectScalarAccess(string _cTipo, string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            using (OleDbConnection oConexion = new OleDbConnection(_cConexion))
            {
                using (OleDbCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        return SelectScalarAccess(_cTipo, oComando, _cSQL, _aoParametros);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función interna para realizar una búsqueda scalar en la base de datos indicando el tipo
        /// en los logs y mensajes de error
        /// </summary>
        /// <param name="_cTipo">El tipo de dato que queremos obtener</param>
        /// <param name="_oComando">Un objeto comando para mantener las transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un objeto</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        private static object SelectScalarAccess(string _cTipo, OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                _oComando.CommandText = _cSQL;
                InsertarParametrosAccess(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarOleDbCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name + _cTipo, BRSLog.PALABRA_CLAVE.CONSULTA,
                                     "", BRSLog.LINEAVACIA.NO, null, _oComando);

                return _oComando.ExecuteScalar();
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un objeto</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static object SelectScalarSinLogAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            using (OleDbConnection oConexion = new OleDbConnection(_cConexion))
            {
                using (OleDbCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        return SelectScalarSinLogAccess(oComando, _cSQL, _aoParametros);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un objeto</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static object SelectScalarSinLogAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                _oComando.CommandText = _cSQL;
                InsertarParametrosAccess(_oComando, _aoParametros);
                return _oComando.ExecuteScalar();
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region Como string

        public static Task<string> SelectScalarCadenaAsync(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            return Task.FromResult<string>(SelectScalarCadena(_cConexion, _cSQL, _aoParametros));
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como una cadena</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static string SelectScalarCadena(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToString(SelectScalar("Cadena", _cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como una cadena</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static string SelectScalarCadena(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToString(SelectScalar("Cadena", _oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como una cadena</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static string SelectScalarCadenaSinLog(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToString(SelectScalarSinLog(_cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como una cadena</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static string SelectScalarCadenaSinLog(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToString(SelectScalarSinLog(_oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }


        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como una cadena</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static string SelectScalarCadenaAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToString(SelectScalarAccess("Cadena", _cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como una cadena</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static string SelectScalarCadenaAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToString(SelectScalarAccess("Cadena", _oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como una cadena</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static string SelectScalarCadenaSinLogAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToString(SelectScalarSinLogAccess(_cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como una cadena</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static string SelectScalarCadenaSinLogAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToString(SelectScalarSinLogAccess(_oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region Como integer

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_ConexionComando">La cadena de conexión con la base de datos o un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int SelectScalarEntero(object _ConexionComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                if (_ConexionComando is string cConexion)
                {
                    return SelectScalarEntero(cConexion, _cSQL, _aoParametros);
                }
                else if (_ConexionComando is NpgsqlCommand oComando)
                {
                    return SelectScalarEntero(oComando, _cSQL, _aoParametros);
                }
                else
                {
                    throw new ArgumentException();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int SelectScalarEntero(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToInt32(SelectScalar("Entero", _cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int SelectScalarEntero(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToInt32(SelectScalar("Entero", _oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer que puede ser nulo</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int? SelectScalarEnteroNulo(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                int? nResultado;
                object oResultado = SelectScalar("EnteroNulo", _cConexion, _cSQL, _aoParametros);
                if (oResultado == DBNull.Value) nResultado = null;
                else
                    nResultado = Convert.ToInt32(oResultado);
                return nResultado;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer que puede ser nulo</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int? SelectScalarEnteroNulo(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                int? nResultado;
                object oResultado = SelectScalar("EnteroNulo", _oComando, _cSQL, _aoParametros);
                if (oResultado == DBNull.Value)
                    nResultado = null;
                else
                    nResultado = Convert.ToInt32(oResultado);
                return nResultado;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int SelectScalarEnteroSinLog(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToInt32(SelectScalarSinLog(_cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int SelectScalarEnteroSinLog(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToInt32(SelectScalarSinLog(_oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }


        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_ConexionComando">La cadena de conexión con la base de datos o un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int SelectScalarEnteroAccess(object _ConexionComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                if (_ConexionComando is string cConexion)
                {
                    return SelectScalarEnteroAccess(cConexion, _cSQL, _aoParametros);
                }
                else if (_ConexionComando is OleDbCommand oComando)
                {
                    return SelectScalarEnteroAccess(oComando, _cSQL, _aoParametros);
                }
                else
                {
                    throw new ArgumentException();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int SelectScalarEnteroAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToInt32(SelectScalarAccess("Entero", _cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int SelectScalarEnteroAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToInt32(SelectScalarAccess("Entero", _oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer que puede ser nulo</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int? SelectScalarEnteroNuloAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                int? nResultado;
                object oResultado = SelectScalarAccess("EnteroNulo", _cConexion, _cSQL, _aoParametros);
                if (oResultado == DBNull.Value) nResultado = null;
                else
                    nResultado = Convert.ToInt32(oResultado);
                return nResultado;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer que puede ser nulo</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int? SelectScalarEnteroNuloAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                int? nResultado;
                object oResultado = SelectScalarAccess("EnteroNulo", _oComando, _cSQL, _aoParametros);
                if (oResultado == DBNull.Value)
                    nResultado = null;
                else
                    nResultado = Convert.ToInt32(oResultado);
                return nResultado;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int SelectScalarEnteroSinLogAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToInt32(SelectScalarSinLogAccess(_cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un integer</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int SelectScalarEnteroSinLogAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToInt32(SelectScalarSinLogAccess(_oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region Como short

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un short</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static short SelectScalarShort(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToInt16(SelectScalar("Short", _cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un short</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static short SelectScalarShort(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToInt16(SelectScalar("Short", _oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }


        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un short</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static short SelectScalarShortAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToInt16(SelectScalarAccess("Short", _cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un short</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static short SelectScalarShortAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToInt16(SelectScalarAccess("Short", _oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region Como decimal

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un decimal</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static decimal SelectScalarDecimal(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToDecimal(SelectScalar("Decimal", _cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un decimal</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static decimal SelectScalarDecimal(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToDecimal(SelectScalar("Decimal", _oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un decimal que puede ser nulo</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static decimal? SelectScalarDecimalNulo(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                decimal? nResultado;
                object oResultado = SelectScalar("DecimalNulo", _cConexion, _cSQL, _aoParametros);
                if (oResultado == DBNull.Value) nResultado = null;
                else
                    nResultado = Convert.ToDecimal(oResultado);
                return nResultado;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un decimal que puede ser nulo</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static decimal? SelectScalarDecimalNulo(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                decimal? nResultado;
                object oResultado = SelectScalar("DecimalNulo", _oComando, _cSQL, _aoParametros);
                if (oResultado == DBNull.Value) nResultado = null;
                else
                    nResultado = Convert.ToDecimal(oResultado);
                return nResultado;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un decimal</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static decimal SelectScalarDecimalSinLog(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToDecimal(SelectScalarSinLog(_cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un decimal</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static decimal SelectScalarDecimalSinLog(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToDecimal(SelectScalarSinLog(_oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }


        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un decimal</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static decimal SelectScalarDecimalAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToDecimal(SelectScalarAccess("Decimal", _cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un decimal</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static decimal SelectScalarDecimalAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToDecimal(SelectScalarAccess("Decimal", _oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un decimal que puede ser nulo</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static decimal? SelectScalarDecimalNuloAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                decimal? nResultado;
                object oResultado = SelectScalarAccess("DecimalNulo", _cConexion, _cSQL, _aoParametros);
                if (oResultado == DBNull.Value) nResultado = null;
                else
                    nResultado = Convert.ToDecimal(oResultado);
                return nResultado;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un decimal que puede ser nulo</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static decimal? SelectScalarDecimalNuloAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                decimal? nResultado;
                object oResultado = SelectScalarAccess("DecimalNulo", _oComando, _cSQL, _aoParametros);
                if (oResultado == DBNull.Value) nResultado = null;
                else
                    nResultado = Convert.ToDecimal(oResultado);
                return nResultado;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un decimal</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static decimal SelectScalarDecimalSinLogAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToDecimal(SelectScalarSinLogAccess(_cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos sin escribir el log de depuración
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un decimal</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static decimal SelectScalarDecimalSinLogAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToDecimal(SelectScalarSinLogAccess(_oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }
        #endregion

        #region Como boolean

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un boolean</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static bool SelectScalarBoolean(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToBoolean(SelectScalar("Boolean", _cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un boolean</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static bool SelectScalarBoolean(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToBoolean(SelectScalar("Boolean", _oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un boolean que puede ser nulo</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>"
        public static bool? SelectScalarBooleanNulo(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                bool? lResultado;
                object oResultado = SelectScalar("BooleanNulo", _cConexion, _cSQL, _aoParametros);
                if (oResultado == DBNull.Value) lResultado = null;
                else
                    lResultado = Convert.ToBoolean(oResultado);
                return lResultado;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un boolean que puede ser nulo</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>"
        public static bool? SelectScalarBooleanNulo(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                bool? lResultado;
                object oResultado = SelectScalar("BooleanNulo", _oComando, _cSQL, _aoParametros);
                if (oResultado == DBNull.Value) lResultado = null;
                else
                    lResultado = Convert.ToBoolean(oResultado);
                return lResultado;
            }
            catch (Exception)
            {
                throw;
            }
        }


        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un boolean</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static bool SelectScalarBooleanAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToBoolean(SelectScalarAccess("Boolean", _cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un boolean</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static bool SelectScalarBooleanAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToBoolean(SelectScalarAccess("Boolean", _oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un boolean que puede ser nulo</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>"
        public static bool? SelectScalarBooleanNuloAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                bool? lResultado;
                object oResultado = SelectScalarAccess("BooleanNulo", _cConexion, _cSQL, _aoParametros);
                if (oResultado == DBNull.Value) lResultado = null;
                else
                    lResultado = Convert.ToBoolean(oResultado);
                return lResultado;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un boolean que puede ser nulo</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>"
        public static bool? SelectScalarBooleanNuloAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                bool? lResultado;
                object oResultado = SelectScalarAccess("BooleanNulo", _oComando, _cSQL, _aoParametros);
                if (oResultado == DBNull.Value) lResultado = null;
                else
                    lResultado = Convert.ToBoolean(oResultado);
                return lResultado;
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region Como fecha

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un datetime</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static DateTime SelectScalarFecha(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToDateTime(SelectScalar("Fecha", _cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un datetime</returns>
        /// <exception cref="Exception">Excepción cuando se produce un error</exception>
        public static DateTime SelectScalarFecha(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToDateTime(SelectScalar("Fecha", _oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un datetime</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static DateTime SelectScalarFechaAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToDateTime(SelectScalarAccess("Fecha", _cConexion, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una búsqueda scalar en la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El resultado como un datetime</returns>
        /// <exception cref="Exception">Excepción cuando se produce un error</exception>
        public static DateTime SelectScalarFechaAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                return Convert.ToDateTime(SelectScalarAccess("Fecha", _oComando, _cSQL, _aoParametros));
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region Funciones para seleccionar un objeto BRSRegistro

        /// <summary>
        /// Función para obtener un objeto BRSRegistro rellenado con una consulta
        /// </summary>
        /// <param name="_ConexionComando">La cadena de conexión con la base de datos o un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static BRSRegistro SeleccionarRegistro(object _ConexionComando, string _cSQL, params object[] _aoParametros)
        {
            if (_ConexionComando is string cConexion)
            {
                return SeleccionarRegistro(cConexion, _cSQL, _aoParametros);
            }
            else if (_ConexionComando is NpgsqlCommand oComando)
            {
                return SeleccionarRegistro(oComando, _cSQL, _aoParametros);
            }
            else
            {
                throw new ArgumentException();
            }
        }

        /// <summary>
        /// Función para obtener un objeto BRSRegistro rellenado con una consulta
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static BRSRegistro SeleccionarRegistro(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
                {
                    using (NpgsqlCommand oComando = oConexion.CreateCommand())
                    {
                        oConexion.Open();
                        return SeleccionarRegistro(oComando, _cSQL, _aoParametros);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para obtener un objeto BRSRegistro rellenado con una consulta
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static BRSRegistro SeleccionarRegistro(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                string cNombreTabla = ObtenerNombreTabla(_cSQL);
                string[] acClavePrimaria = ObtenerClavePrimaria(cNombreTabla, _oComando.Connection.ConnectionString);
                _cSQL = AnadirClaveAConsulta(_cSQL, acClavePrimaria);

                _oComando.CommandText = _cSQL;
                BRSRegistro registro = null;
                InsertarParametros(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarNpgsqlCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name,
                                    BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, _oComando);

                using (NpgsqlDataReader oDataReader = _oComando.ExecuteReader())
                {
                    registro = RellenarRegistroDataReader(oDataReader);
                    registro.cConexion = _oComando.Connection.ConnectionString;
                    registro.NombreTabla = cNombreTabla;
                    registro.ClavePrimaria = acClavePrimaria;
                }

                return registro;
            }
            catch (NpgsqlException ex)
            { // Si se captura una excepción de Npgsql
                if (ex.Code == Excepciones.CodErrorRegistroBloqueado)
                { // Si el error es el producido por un registro bloqueado
                    throw new RegistroBloqueadoException();
                }
                else
                {
                    throw;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para obtener un objeto BRSRegistro rellenado con una consulta sin añadir la clave primaria a los datos obtenidos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static BRSRegistro SeleccionarRegistroSinClave(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
                {
                    using (NpgsqlCommand oComando = oConexion.CreateCommand())
                    {
                        oConexion.Open();
                        return SeleccionarRegistroSinClave(oComando, _cSQL, _aoParametros);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para obtener un objeto BRSRegistro rellenado con una consulta sin añadir la clave primaria a los datos obtenidos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static BRSRegistro SeleccionarRegistroSinClave(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                string cNombreTabla = ObtenerNombreTabla(_cSQL);
                string[] acClavePrimaria = ObtenerClavePrimaria(cNombreTabla, _oComando.Connection.ConnectionString);

                _oComando.CommandText = _cSQL;
                BRSRegistro registro = null;
                InsertarParametros(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarNpgsqlCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name,
                                    BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, _oComando);

                using (NpgsqlDataReader oDataReader = _oComando.ExecuteReader())
                {
                    registro = RellenarRegistroDataReader(oDataReader);
                    registro.cConexion = _oComando.Connection.ConnectionString;
                    registro.NombreTabla = cNombreTabla;
                    registro.ClavePrimaria = acClavePrimaria;
                }

                return registro;
            }
            catch (NpgsqlException ex)
            { // Si se captura una excepción de Npgsql
                if (ex.Code == Excepciones.CodErrorRegistroBloqueado)
                { // Si el error es el producido por un registro bloqueado
                    throw new RegistroBloqueadoException();
                }
                else
                {
                    throw;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para obtener varios objetos BRSRegistro rellenados con una consulta
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static IEnumerable<BRSRegistro> SeleccionarRegistros(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            NpgsqlConnection oConexion = null;
            NpgsqlCommand oComando = null;
            NpgsqlDataReader oDataReader = null;
            string cNombreTabla = null;
            string[] acClavePrimaria = null;
            try
            {
                oConexion = new NpgsqlConnection(_cConexion);
                oComando = oConexion.CreateCommand();
                oConexion.Open();

                cNombreTabla = ObtenerNombreTabla(_cSQL);
                acClavePrimaria = ObtenerClavePrimaria(cNombreTabla, oComando.Connection.ConnectionString);
                _cSQL = AnadirClaveAConsulta(_cSQL, acClavePrimaria);

                oComando.CommandText = _cSQL;
                InsertarParametros(oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarNpgsqlCommand(oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name,
                                    BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, oComando);

                oDataReader = oComando.ExecuteReader();
            }
            catch (Exception)
            {
                throw;
            }

            if (oDataReader != null)
            { // Si la consulta no fue errónea
                int indice = 0;
                while (oDataReader.Read())
                {
                    BRSRegistro registro = new BRSRegistro();

                    for (int i = 0; i < oDataReader.FieldCount; i++)
                    { // Por cada campo en la consulta, insertamos un nuevo campo en el registro
                        registro.insertKey(Convert.ToString(oDataReader.GetName(i)), oDataReader[i]);
                    }

                    registro.cConexion = oComando.Connection.ConnectionString;
                    registro.NombreTabla = cNombreTabla;
                    registro.ClavePrimaria = acClavePrimaria;

                    registro.Indice = indice;
                    yield return registro;
                    indice++;
                }
            }

            if (oDataReader != null)
                oDataReader.Close();
            if (oConexion != null)
            {
                if (oConexion.State == System.Data.ConnectionState.Open)
                    oConexion.Close();
                oConexion.Dispose();
            }
        }

        /// <summary>
        /// Función para obtener varios objetos BRSRegistro rellenados con una consulta
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static IEnumerable<BRSRegistro> SeleccionarRegistrosSinClave(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            NpgsqlConnection oConexion = null;
            NpgsqlCommand oComando = null;
            NpgsqlDataReader oDataReader = null;
            string cNombreTabla = null;
            string[] acClavePrimaria = null;
            try
            {
                oConexion = new NpgsqlConnection(_cConexion);
                oComando = oConexion.CreateCommand();
                oConexion.Open();

                cNombreTabla = ObtenerNombreTabla(_cSQL);
                acClavePrimaria = ObtenerClavePrimaria(cNombreTabla, oComando.Connection.ConnectionString);
                //_cSQL = AnadirClaveAConsulta(_cSQL, acClavePrimaria);

                oComando.CommandText = _cSQL;
                InsertarParametros(oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarNpgsqlCommand(oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name,
                                    BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, oComando);

                oDataReader = oComando.ExecuteReader();
            }
            catch (Exception)
            {
                throw;
            }

            if (oDataReader != null)
            { // Si la consulta no fue errónea
                int indice = 0;
                while (oDataReader.Read())
                {
                    BRSRegistro registro = new BRSRegistro();

                    for (int i = 0; i < oDataReader.FieldCount; i++)
                    { // Por cada campo en la consulta, insertamos un nuevo campo en el registro
                        registro.insertKey(Convert.ToString(oDataReader.GetName(i)), oDataReader[i]);
                    }

                    registro.cConexion = oComando.Connection.ConnectionString;
                    registro.NombreTabla = cNombreTabla;
                    registro.ClavePrimaria = acClavePrimaria;

                    registro.Indice = indice;
                    yield return registro;
                    indice++;
                }
            }

            if (oDataReader != null)
                oDataReader.Close();
            if (oConexion != null)
            {
                if (oConexion.State == System.Data.ConnectionState.Open)
                    oConexion.Close();
                oConexion.Dispose();
            }
        }

        /// <summary>
        /// Función para obtener varios objetos BRSRegistro rellenados con una consulta
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static IEnumerable<BRSRegistro> SeleccionarRegistros(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            NpgsqlDataReader oDataReader = null;
            string cNombreTabla = null;
            string[] acClavePrimaria = null;
            try
            {
                cNombreTabla = ObtenerNombreTabla(_cSQL);
                acClavePrimaria = ObtenerClavePrimaria(cNombreTabla, _oComando.Connection.ConnectionString);
                _cSQL = AnadirClaveAConsulta(_cSQL, acClavePrimaria);

                _oComando.CommandText = _cSQL;
                InsertarParametros(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarNpgsqlCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name,
                                    BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, _oComando);

                oDataReader = _oComando.ExecuteReader();
            }
            catch (Exception)
            {
                throw;
            }

            if (oDataReader != null)
            { // Si la consulta no fue errónea
                int indice = 0;
                while (oDataReader.Read())
                {
                    BRSRegistro registro = new BRSRegistro();

                    for (int i = 0; i < oDataReader.FieldCount; i++)
                    { // Por cada campo en la consulta, insertamos un nuevo campo en el registro
                        registro.insertKey(Convert.ToString(oDataReader.GetName(i)), oDataReader[i]);
                    }

                    registro.cConexion = _oComando.Connection.ConnectionString;
                    registro.NombreTabla = cNombreTabla;
                    registro.ClavePrimaria = acClavePrimaria;

                    registro.Indice = indice;
                    yield return registro;
                    indice++;
                }
            }

            if (oDataReader != null)
                oDataReader.Close();
        }

        /// <summary>
        /// Función que recupera el nombre de la tabla usada en una
        /// consulta SQL siempre que sea sólamente una tabla
        /// </summary>
        /// <param name="_cSQL">La consulta SQL</param>
        /// <returns>El nombre de la tabla o nulo si es más de una tabla</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        private static string ObtenerNombreTabla(string _cSQL)
        {
            string cNombreTabla;
            if (_cSQL.ToUpper().Contains("JOIN"))
            { // Si la consulta contiene la palabra JOIN significa que tiene más de una tabla y no devolvemos nada
                cNombreTabla = null;
            }
            else
            {
                // Teniendo la siguiente consulta
                // SELECT campo1, campo2, campo3 FROM tabla WHERE param1, param2
                string[] cadenaSplit;
                string cadena = _cSQL.ToLower();
                // Dividimos por el FROM y obtenemos dos cadenas [SELECT campo1, campo2, campo3] y [WHERE param1, param2]
                cadenaSplit = cadena.Split(new string[] { "from" }, StringSplitOptions.RemoveEmptyEntries);
                // Cogemos la segunda cadena y le hacemos un split por espacios [tabla], [WHERE], [param1], [param2]
                cadenaSplit = cadenaSplit[1].Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);
                // Cogemos el primer parámetro del split haciendole un trim [tabla]
                cNombreTabla = cadenaSplit[0].Trim();
                if (cNombreTabla.Contains(","))
                { // Si contiene una coma significa que se usa más de una tabla y no devolvemos nada
                    cNombreTabla = null;
                }
            }

            return cNombreTabla;
        }

        /// <summary>
        /// Función para recuperar la clave primaria de una tabla
        /// </summary>
        /// <param name="_cNombreTabla">El nombre de la tabla</param>
        /// <param name="_cConexion">La cadena de conexión a la base de datos donde pertenece la tabla</param>
        /// <returns>Un array con los campos de la clave primaria</returns>
        /// <exception cref="Exception">Excepción cuando se produce un error</exception>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        private static string[] ObtenerClavePrimaria(string _cNombreTabla, string _cConexion)
        {
            try
            {
                string[] clavePrimaria = null;
                string cSQL;

                // Obtenemos el nombre de la clave primaria
                cSQL = "SELECT constraint_name" +
                      " FROM information_schema.table_constraints" +
                      " WHERE table_name = :param0" +
                      " AND constraint_type = 'PRIMARY KEY';";
                string cNombreConstraint = SelectScalarCadenaSinLog(_cConexion, cSQL, _cNombreTabla);

                // Obtenemos los nombres de las columnas que tengan ese nombre de clave primaria
                cSQL = "SELECT COUNT(column_name)" +
                      " FROM information_schema.key_column_usage" +
                      " WHERE table_name = :param0" +
                      " AND constraint_name = :param1;";
                int nNumeroClaves = SelectScalarEnteroSinLog(_cConexion, cSQL, _cNombreTabla, cNombreConstraint);

                cSQL = "SELECT column_name" +
                      " FROM information_schema.key_column_usage" +
                      " WHERE table_name = :param0" +
                      " AND constraint_name = :param1;";

                using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
                {
                    using (NpgsqlCommand oComando = oConexion.CreateCommand())
                    {
                        oConexion.Open();
                        oComando.CommandText = cSQL;
                        InsertarParametros(oComando, _cNombreTabla, cNombreConstraint);
                        using (NpgsqlDataReader oDataReader = oComando.ExecuteReader())
                        {
                            if (oDataReader.HasRows)
                            {
                                clavePrimaria = new string[nNumeroClaves];
                                int i = 0;
                                while (oDataReader.Read())
                                {
                                    clavePrimaria[i++] = Convert.ToString(oDataReader["column_name"]);
                                }
                            }
                        }
                    }
                }

                return clavePrimaria;
            }
            catch (Exception)
            {
                throw;
            }
        }



        /// <summary>
        /// Función para obtener un objeto BRSRegistro rellenado con una consulta
        /// </summary>
        /// <param name="_ConexionComando">La cadena de conexión con la base de datos o un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static BRSRegistro SeleccionarRegistroAccess(object _ConexionComando, string _cSQL, string[] acClavePrimaria, params object[] _aoParametros)
        {
            if (_ConexionComando is string cConexion)
            {
                return SeleccionarRegistroAccess(cConexion, _cSQL, acClavePrimaria, _aoParametros);
            }
            else if (_ConexionComando is OleDbCommand oComando)
            {
                return SeleccionarRegistroAccess(oComando, _cSQL, acClavePrimaria, _aoParametros);
            }
            else
            {
                throw new ArgumentException();
            }
        }

        /// <summary>
        /// Función para obtener un objeto BRSRegistro rellenado con una consulta
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static BRSRegistro SeleccionarRegistroAccess(string _cConexion, string _cSQL, string[] acClavePrimaria, params object[] _aoParametros)
        {
            try
            {
                using (OleDbConnection oConexion = new OleDbConnection(_cConexion))
                {
                    using (OleDbCommand oComando = oConexion.CreateCommand())
                    {
                        oConexion.Open();
                        return SeleccionarRegistroAccess(oComando, _cSQL, acClavePrimaria, _aoParametros);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para obtener un objeto BRSRegistro rellenado con una consulta
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static BRSRegistro SeleccionarRegistroAccess(OleDbCommand _oComando, string _cSQL, string[] acClavePrimaria, params object[] _aoParametros)
        {
            try
            {
                string cNombreTabla = ObtenerNombreTabla(_cSQL);
                _cSQL = AnadirClaveAConsulta(_cSQL, acClavePrimaria);

                _oComando.CommandText = _cSQL;
                BRSRegistro registro = null;
                InsertarParametrosAccess(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarOleDbCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name,
                                    BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, _oComando);

                using (OleDbDataReader oDataReader = _oComando.ExecuteReader())
                {
                    registro = RellenarRegistroDataReaderAccess(oDataReader);
                    registro.cConexion = _oComando.Connection.ConnectionString;
                    registro.NombreTabla = cNombreTabla;
                    registro.ClavePrimaria = acClavePrimaria;
                }

                return registro;
            }
            //catch (OleDbException ex)
            //{ // Si se captura una excepción de OleDb
            //    if (ex.ErrorCode == System.Data.OleDb.Excep == Excepciones.CodErrorRegistroBloqueado)
            //    { // Si el error es el producido por un registro bloqueado
            //        throw new RegistroBloqueadoException();
            //    }
            //    else
            //    {
            //        throw;
            //    }
            //}
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para obtener un objeto BRSRegistro rellenado con una consulta sin añadir la clave primaria a los datos obtenidos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static BRSRegistro SeleccionarRegistroSinClaveAccess(string _cConexion, string _cSQL, string[] acClavePrimaria, params object[] _aoParametros)
        {
            try
            {
                using (OleDbConnection oConexion = new OleDbConnection(_cConexion))
                {
                    using (OleDbCommand oComando = oConexion.CreateCommand())
                    {
                        oConexion.Open();
                        return SeleccionarRegistroSinClaveAccess(oComando, _cSQL, acClavePrimaria, _aoParametros);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para obtener un objeto BRSRegistro rellenado con una consulta sin añadir la clave primaria a los datos obtenidos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static BRSRegistro SeleccionarRegistroSinClaveAccess(OleDbCommand _oComando, string _cSQL, string[] acClavePrimaria, params object[] _aoParametros)
        {
            try
            {
                string cNombreTabla = ObtenerNombreTabla(_cSQL);

                _oComando.CommandText = _cSQL;
                BRSRegistro registro = null;
                InsertarParametrosAccess(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarOleDbCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name,
                                    BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, _oComando);

                using (OleDbDataReader oDataReader = _oComando.ExecuteReader())
                {
                    registro = RellenarRegistroDataReaderAccess(oDataReader);
                    registro.cConexion = _oComando.Connection.ConnectionString;
                    registro.NombreTabla = cNombreTabla;
                    registro.ClavePrimaria = acClavePrimaria;
                }

                return registro;
            }
            //catch (NpgsqlException ex)
            //{ // Si se captura una excepción de Npgsql
            //    if (ex.Code == Excepciones.CodErrorRegistroBloqueado)
            //    { // Si el error es el producido por un registro bloqueado
            //        throw new RegistroBloqueadoException();
            //    }
            //    else
            //    {
            //        throw;
            //    }
            //}
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para obtener varios objetos BRSRegistro rellenados con una consulta
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static IEnumerable<BRSRegistro> SeleccionarRegistrosAccess(string _cConexion, string _cSQL, string[] acClavePrimaria, params object[] _aoParametros)
        {
            OleDbConnection oConexion = null;
            OleDbCommand oComando = null;
            OleDbDataReader oDataReader = null;
            string cNombreTabla = null;
            try
            {
                oConexion = new OleDbConnection(_cConexion);
                oComando = oConexion.CreateCommand();
                oConexion.Open();

                cNombreTabla = ObtenerNombreTabla(_cSQL);
                _cSQL = AnadirClaveAConsulta(_cSQL, acClavePrimaria);

                oComando.CommandText = _cSQL;
                InsertarParametrosAccess(oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarOleDbCommand(oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name,
                                    BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, oComando);

                oDataReader = oComando.ExecuteReader();
            }
            catch (Exception)
            {
                throw;
            }

            if (oDataReader != null)
            { // Si la consulta no fue errónea
                int indice = 0;
                while (oDataReader.Read())
                {
                    BRSRegistro registro = new BRSRegistro();

                    for (int i = 0; i < oDataReader.FieldCount; i++)
                    { // Por cada campo en la consulta, insertamos un nuevo campo en el registro
                        registro.insertKey(Convert.ToString(oDataReader.GetName(i)), oDataReader[i]);
                    }

                    registro.cConexion = oComando.Connection.ConnectionString;
                    registro.NombreTabla = cNombreTabla;
                    registro.ClavePrimaria = acClavePrimaria;

                    registro.Indice = indice;
                    yield return registro;
                    indice++;
                }
            }

            if (oDataReader != null)
                oDataReader.Close();
            if (oConexion != null)
            {
                if (oConexion.State == ConnectionState.Open)
                    oConexion.Close();
                oConexion.Dispose();
            }
        }

        /// <summary>
        /// Función para obtener varios objetos BRSRegistro rellenados con una consulta
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static IEnumerable<BRSRegistro> SeleccionarRegistrosSinClaveAccess(string _cConexion, string _cSQL, string[] acClavePrimaria, params object[] _aoParametros)
        {
            OleDbConnection oConexion = null;
            OleDbCommand oComando = null;
            OleDbDataReader oDataReader = null;
            string cNombreTabla = null;
            try
            {
                oConexion = new OleDbConnection(_cConexion);
                oComando = oConexion.CreateCommand();
                oConexion.Open();

                cNombreTabla = ObtenerNombreTabla(_cSQL);
                //_cSQL = AnadirClaveAConsulta(_cSQL, acClavePrimaria);

                oComando.CommandText = _cSQL;
                InsertarParametrosAccess(oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarOleDbCommand(oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name,
                                    BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, oComando);

                oDataReader = oComando.ExecuteReader();
            }
            catch (Exception)
            {
                throw;
            }

            if (oDataReader != null)
            { // Si la consulta no fue errónea
                int indice = 0;
                while (oDataReader.Read())
                {
                    BRSRegistro registro = new BRSRegistro();

                    for (int i = 0; i < oDataReader.FieldCount; i++)
                    { // Por cada campo en la consulta, insertamos un nuevo campo en el registro
                        registro.insertKey(Convert.ToString(oDataReader.GetName(i)), oDataReader[i]);
                    }

                    registro.cConexion = oComando.Connection.ConnectionString;
                    registro.NombreTabla = cNombreTabla;
                    registro.ClavePrimaria = acClavePrimaria;

                    registro.Indice = indice;
                    yield return registro;
                    indice++;
                }
            }

            if (oDataReader != null)
                oDataReader.Close();
            if (oConexion != null)
            {
                if (oConexion.State == ConnectionState.Open)
                    oConexion.Close();
                oConexion.Dispose();
            }
        }

        /// <summary>
        /// Función para obtener varios objetos BRSRegistro rellenados con una consulta
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cSQL">La consulta a realizar</param>
        /// <param name="_aoParametros">Los parámetros de la consulta</param>
        /// <returns>El objeto registro rellenado</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static IEnumerable<BRSRegistro> SeleccionarRegistrosAccess(OleDbCommand _oComando, string _cSQL, string[] acClavePrimaria, params object[] _aoParametros)
        {
            OleDbDataReader oDataReader = null;
            string cNombreTabla = null;
            try
            {
                cNombreTabla = ObtenerNombreTabla(_cSQL);
                _cSQL = AnadirClaveAConsulta(_cSQL, acClavePrimaria);

                _oComando.CommandText = _cSQL;
                InsertarParametrosAccess(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarOleDbCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name,
                                    BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, _oComando);

                oDataReader = _oComando.ExecuteReader();
            }
            catch (Exception)
            {
                throw;
            }

            if (oDataReader != null)
            { // Si la consulta no fue errónea
                int indice = 0;
                while (oDataReader.Read())
                {
                    BRSRegistro registro = new BRSRegistro();

                    for (int i = 0; i < oDataReader.FieldCount; i++)
                    { // Por cada campo en la consulta, insertamos un nuevo campo en el registro
                        registro.insertKey(Convert.ToString(oDataReader.GetName(i)), oDataReader[i]);
                    }

                    registro.cConexion = _oComando.Connection.ConnectionString;
                    registro.NombreTabla = cNombreTabla;
                    registro.ClavePrimaria = acClavePrimaria;

                    registro.Indice = indice;
                    yield return registro;
                    indice++;
                }
            }

            if (oDataReader != null)
                oDataReader.Close();
        }

        /// <summary>
        /// Función para recuperar la clave primaria de una tabla
        /// </summary>
        /// <param name="_cNombreTabla">El nombre de la tabla</param>
        /// <param name="_cConexion">La cadena de conexión a la base de datos donde pertenece la tabla</param>
        /// <returns>Un array con los campos de la clave primaria</returns>
        /// <exception cref="Exception">Excepción cuando se produce un error</exception>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        //private static string[] ObtenerClavePrimariaAccess(string _cNombreTabla, string _cConexion)
        //{
        //    try
        //    {
        //        string[] clavePrimaria = null;
        //        string cSQL;

        //        // Obtenemos el nombre de la clave primaria
        //        cSQL = "SELECT constraint_name" +
        //              " FROM information_schema.table_constraints" +
        //              " WHERE table_name = :param0" +
        //              " AND constraint_type = 'PRIMARY KEY';";
        //        string cNombreConstraint = SelectScalarCadenaSinLogAccess(_cConexion, cSQL, _cNombreTabla);

        //        // Obtenemos los nombres de las columnas que tengan ese nombre de clave primaria
        //        cSQL = "SELECT COUNT(column_name)" +
        //              " FROM information_schema.key_column_usage" +
        //              " WHERE table_name = :param0" +
        //              " AND constraint_name = :param1;";
        //        int nNumeroClaves = SelectScalarEnteroSinLogAccess(_cConexion, cSQL, _cNombreTabla, cNombreConstraint);

        //        cSQL = "SELECT column_name" +
        //              " FROM information_schema.key_column_usage" +
        //              " WHERE table_name = :param0" +
        //              " AND constraint_name = :param1;";

        //        using (OleDbConnection oConexion = new OleDbConnection(_cConexion))
        //        {
        //            using (OleDbCommand oComando = oConexion.CreateCommand())
        //            {
        //                oConexion.Open();
        //                oComando.CommandText = cSQL;
        //                InsertarParametrosAccess(oComando, _cNombreTabla, cNombreConstraint);
        //                using (OleDbDataReader oDataReader = oComando.ExecuteReader())
        //                {
        //                    if (oDataReader.HasRows)
        //                    {
        //                        clavePrimaria = new string[nNumeroClaves];
        //                        int i = 0;
        //                        while (oDataReader.Read())
        //                        {
        //                            clavePrimaria[i++] = Convert.ToString(oDataReader["column_name"]);
        //                        }
        //                    }
        //                }
        //            }
        //        }

        //        return clavePrimaria;
        //    }
        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //}

        #endregion

        /// <summary>
        /// Función para obtener un único valor de una tabla
        /// </summary>
        /// <param name="_cSelect">Campo que queremos obtener</param>
        /// <param name="_cFrom">Tabla de la que queremos obtener el valor</param>
        /// <param name="_cWhere">Parametros opcionales</param>
        /// <param name="_oComando">Comando con la conexión abierta</param>
        /// <returns></returns>
        public static string ObtenerReferencialesPostgres(string _cSelect, string _cFrom, string _cWhere, NpgsqlCommand _oComando)
        {
            string cResultado = null;
            string cSQL = null;
            try
            {
                cSQL = "SELECT " + _cSelect +
                      " FROM " + _cFrom +
                      " WHERE " + _cWhere + ";";

                _oComando.CommandText = cSQL;
                cResultado = Convert.ToString(_oComando.ExecuteScalar());
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\rBRSLibBD : " + MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
            return cResultado;
        }


        /// <summary>
        /// Función para obtener un único valor de una tabla
        /// </summary>
        /// <param name="_cSelect">Campo que queremos obtener</param>
        /// <param name="_cFrom">Tabla de la que queremos obtener el valor</param>
        /// <param name="_cWhere">Parametros opcionales</param>
        /// <param name="_oComando">Comando con la conexión abierta</param>
        /// <returns></returns>
        public static string ObtenerReferencialesAccess(string _cSelect, string _cFrom, string _cWhere, OleDbCommand _oComando)
        {
            string cResultado = null;
            string cSQL = null;
            try
            {
                cSQL = "SELECT " + _cSelect +
                      " FROM " + _cFrom +
                      " WHERE " + _cWhere + ";";

                _oComando.CommandText = cSQL;
                cResultado = Convert.ToString(_oComando.ExecuteScalar());
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\rBRSLibBD : " + MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
            return cResultado;
        }

        #endregion

        #region Funciones para rellenar un DataTable

        public static DataTable RellenarDataTable(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
                {
                    using (NpgsqlCommand oComando = oConexion.CreateCommand())
                    {
                        oConexion.Open();
                        return RellenarDataTable(oComando, _cSQL, _aoParametros);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public static DataTable RellenarDataTable(NpgsqlCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                _oComando.CommandText = _cSQL;
                InsertarParametros(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarNpgsqlCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name,
                                    BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, _oComando);
                using (NpgsqlDataReader oDataReader = _oComando.ExecuteReader())
                {
                    DataTable dt = new DataTable();
                    dt.Load(oDataReader);
                    return dt;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }


        public static DataTable RellenarDataTableAccess(string _cConexion, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                using (OleDbConnection oConexion = new OleDbConnection(_cConexion))
                {
                    using (OleDbCommand oComando = oConexion.CreateCommand())
                    {
                        oConexion.Open();
                        return RellenarDataTableAccess(oComando, _cSQL, _aoParametros);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public static DataTable RellenarDataTableAccess(OleDbCommand _oComando, string _cSQL, params object[] _aoParametros)
        {
            try
            {
                _oComando.CommandText = _cSQL;
                InsertarParametrosAccess(_oComando, _aoParametros);
                BRSLib.WriteLogDebug(AnalizarOleDbCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name,
                                    BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, _oComando);
                using (OleDbDataReader oDataReader = _oComando.ExecuteReader())
                {
                    DataTable dt = new DataTable();
                    dt.Load(oDataReader);
                    return dt;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region Funciones para obtener el siguiente ID de una tabla

        /// <summary>
        /// Función para obtener el siguiente id a utilizar en una tabla
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cTabla">La tabla donde buscar</param>
        /// <param name="_cCampo">El campo del que queremos obtener el siguiente id</param>
        /// <param name="_cWhere">Condición especial de la consulta</param>
        /// <param name="_lIncrementar">Si queremos devolver el id ya incrementado</param>
        /// <returns>Un entero con el valor a utilizar</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int UltimoCodigo(string _cConexion, string _cTabla, string _cCampo, string _cWhere = null, bool _lIncrementar = false)
        {
            try
            {
                int? nUltimoCodigo = 0;
                string cSQL = null;
                switch (_cWhere)
                {
                    case null:
                        cSQL = $"SELECT MAX({_cCampo}) FROM {_cTabla};";
                        break;
                    default:
                        cSQL = $"SELECT MAX({_cCampo}) FROM {_cTabla} WHERE {_cWhere};";
                        break;
                }

                nUltimoCodigo = SelectScalarEnteroNulo(_cConexion, cSQL);

                if (nUltimoCodigo == null) nUltimoCodigo = 0;

                if (_lIncrementar)
                    nUltimoCodigo++;

                return Convert.ToInt32(nUltimoCodigo);
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para obtener el siguiente id a utilizar en una tabla
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cTabla">La tabla donde buscar</param>
        /// <param name="_cCampo">El campo del que queremos obtener el siguiente id</param>
        /// <param name="_cWhere">Condición especial de la consulta</param>
        /// <param name="_lIncrementar">Si queremos devolver el id ya incrementado</param>
        /// <returns>Un entero con el valor a utilizar</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int UltimoCodigo(NpgsqlCommand _oComando, string _cTabla, string _cCampo, string _cWhere = null, bool _lIncrementar = false)
        {
            try
            {
                int? nUltimoCodigo = 0;
                string cSQL = null;
                if (_cWhere == null)
                {
                    cSQL = "SELECT MAX({0}) FROM {1};";
                    cSQL = string.Format(cSQL, _cCampo, _cTabla);
                }
                else
                {
                    cSQL = "SELECT MAX({0}) FROM {1} WHERE {2};";
                    cSQL = string.Format(cSQL, _cCampo, _cTabla, _cWhere);
                }

                nUltimoCodigo = SelectScalarEnteroNulo(_oComando, cSQL);

                if (nUltimoCodigo == null) nUltimoCodigo = 0;

                if (_lIncrementar)
                    nUltimoCodigo++;

                return Convert.ToInt32(nUltimoCodigo);
            }
            catch (Exception)
            {
                throw;
            }
        }


        /// <summary>
        /// Función para obtener el siguiente id a utilizar en una tabla
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cTabla">La tabla donde buscar</param>
        /// <param name="_cCampo">El campo del que queremos obtener el siguiente id</param>
        /// <param name="_cWhere">Condición especial de la consulta</param>
        /// <param name="_lIncrementar">Si queremos devolver el id ya incrementado</param>
        /// <returns>Un entero con el valor a utilizar</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int UltimoCodigoAccess(string _cConexion, string _cTabla, string _cCampo, string _cWhere = null, bool _lIncrementar = false)
        {
            try
            {
                int? nUltimoCodigo = 0;
                string cSQL = null;
                switch (_cWhere)
                {
                    case null:
                        cSQL = $"SELECT MAX({_cCampo}) FROM {_cTabla};";
                        break;
                    default:
                        cSQL = $"SELECT MAX({_cCampo}) FROM {_cTabla} WHERE {_cWhere};";
                        break;
                }

                nUltimoCodigo = SelectScalarEnteroNuloAccess(_cConexion, cSQL);

                if (nUltimoCodigo == null) nUltimoCodigo = 0;

                if (_lIncrementar)
                    nUltimoCodigo++;

                return Convert.ToInt32(nUltimoCodigo);
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para obtener el siguiente id a utilizar en una tabla
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cTabla">La tabla donde buscar</param>
        /// <param name="_cCampo">El campo del que queremos obtener el siguiente id</param>
        /// <param name="_cWhere">Condición especial de la consulta</param>
        /// <param name="_lIncrementar">Si queremos devolver el id ya incrementado</param>
        /// <returns>Un entero con el valor a utilizar</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static int UltimoCodigoAccess(OleDbCommand _oComando, string _cTabla, string _cCampo, string _cWhere = null, bool _lIncrementar = false)
        {
            try
            {
                int? nUltimoCodigo = 0;
                string cSQL = null;
                if (_cWhere == null)
                {
                    cSQL = "SELECT MAX({0}) FROM {1};";
                    cSQL = string.Format(cSQL, _cCampo, _cTabla);
                }
                else
                {
                    cSQL = "SELECT MAX({0}) FROM {1} WHERE {2};";
                    cSQL = string.Format(cSQL, _cCampo, _cTabla, _cWhere);
                }

                nUltimoCodigo = SelectScalarEnteroNuloAccess(_oComando, cSQL);

                if (nUltimoCodigo == null) nUltimoCodigo = 0;

                if (_lIncrementar)
                    nUltimoCodigo++;

                return Convert.ToInt32(nUltimoCodigo);
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region Funciones para comprobar si un valor existe en la base de datos

        /// <summary>
        /// Función para comprobar si un valor ya se encuentra en la base de datos
        /// Ejemplo: ComprobarValorExiste(BRSLibBD.cConexionBRSERP, "usuarios", "cNombreUsuario", 1);
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión con la base de datos</param>
        /// <param name="_cNombreTabla">La tabla donde buscar</param>
        /// <param name="_acCampoValor">Combinación de campos y valores que se desean buscar</param>
        /// <returns>Verdadero o falso si existe o no</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static bool RegistroExiste(string _cConexion, string _cNombreTabla, params object[] _acCampoValor)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        return RegistroExiste(oComando, _cNombreTabla, _acCampoValor);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para comprobar si un valor ya se encuentra en la base de datos
        /// Ejemplo: ComprobarValorExiste(BRSLibBD.cConexionBRSERP, "usuarios", "cNombreUsuario", 1);
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener transacciones</param>
        /// <param name="_cNombreTabla">La tabla donde buscar</param>
        /// <param name="_acCampoValor">Combinación de campos y valores que se desean buscar</param>
        /// <returns>Verdadero o falso si existe o no</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static bool RegistroExiste(NpgsqlCommand _oComando, string _cNombreTabla, params object[] _acCampoValor)
        {
            try
            {
                if (_acCampoValor.Length % 2 != 0)
                    throw new ArgumentException(Cadenas.ParametrosNoValidos);

                string[] acCampos = _acCampoValor.Select(i => Convert.ToString(i)).Where((value, index) => index % 2 == 0).ToArray();
                object[] acValores = _acCampoValor.Where((value, index) => index % 2 != 0).ToArray();

                StringBuilder cSQL = new StringBuilder("SELECT COUNT(*) FROM " + _cNombreTabla + " WHERE ");
                for (int i = 0; i < acCampos.Length; i++)
                {
                    if (i != 0)
                        cSQL.Append(" AND ");
                    cSQL.Append(acCampos[i] + " = :param" + i);
                }

                return SelectScalarEntero(_oComando, cSQL.ToString(), acValores) > 0;
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region Funciones para trabajar con la rejilla

        /// <summary>
        /// Función para añadir un registro de la base de datos a una rejilla
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_acNombreCampos">Array con los nombres de los campos de la rejilla</param>
        /// <param name="_rgvTabla">Rejilla donde queremos insertar el registro</param>
        /// <param name="_cNombreTabla">Nombre de la tabla</param>
        /// <param name="_acClavePrimaria">Clave primaria de la tabla</param>
        /// <param name="_aoValoresClavePrimaria">Valores de la clave primaria del registro a insertar</param>
        /// <param name="_lDebeCoincidirNombreCampos">Si debe coincidir el número de campos</param>
        /// <param name="_lSeleccionMulti">Si es una rejilla con columna de selección múltiple</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void AnadirRegistroRejilla(string _cConexion, string _cNombreFormulario, string[] _acNombreCampos, RadGridView _rgvTabla, string _cNombreTabla, string[] _acClavePrimaria, object[] _aoValoresClavePrimaria, bool _lDebeCoincidirNombreCampos = true, bool _lSeleccionMulti = false)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        AnadirRegistroRejilla(oComando, _cNombreFormulario, _acNombreCampos, _rgvTabla, _cNombreTabla, _acClavePrimaria, _aoValoresClavePrimaria, _lDebeCoincidirNombreCampos, _lSeleccionMulti);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para añadir un registro de la base de datos a una rejilla
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener la transacción</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_acNombreCampos">Array con los nombres de los campos de la rejilla</param>
        /// <param name="_rgvTabla">Rejilla donde queremos insertar el registro</param>
        /// <param name="_cNombreTabla">Nombre de la tabla</param>
        /// <param name="_acClavePrimaria">Clave primaria de la tabla</param>
        /// <param name="_aoValoresClavePrimaria">Valores de la clave primaria del registro a insertar</param>
        /// <param name="_lDebeCoincidirNombreCampos">Si debe coincidir el número de campos</param>
        /// <param name="_lSeleccionMulti">Si es una rejilla con columna de selección múltiple</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void AnadirRegistroRejilla(NpgsqlCommand _oComando, string _cNombreFormulario, string[] _acNombreCampos, RadGridView _rgvTabla, string _cNombreTabla, string[] _acClavePrimaria, object[] _aoValoresClavePrimaria, bool _lDebeCoincidirNombreCampos = true, bool _lSeleccionMulti = false)
        {
            try
            {
                BRSLib.WriteLogDebug("Añadiendo nuevos valores a la rejilla de la ventana " + _cNombreFormulario, nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name);

                // Generamos la SQL
                StringBuilder cSQL = new StringBuilder("SELECT * FROM " + _cNombreTabla + " WHERE ");
                for (int i = 0; i < _acClavePrimaria.Length; i++)
                {
                    if (i != 0)
                        cSQL.Append(" AND ");
                    cSQL.Append(_acClavePrimaria[i] + " = :param" + i);
                }

                _oComando.CommandText = cSQL.ToString();
                _oComando.Parameters.Clear();

                for (int i = 0; i < _aoValoresClavePrimaria.Length; i++)
                {
                    _oComando.Parameters.Add(new NpgsqlParameter("param" + i, _aoValoresClavePrimaria[i]));
                }

                BRSLib.WriteLogDebug(AnalizarNpgsqlCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, _oComando);

                using (NpgsqlDataReader oDataReader = _oComando.ExecuteReader())
                {
                    while (oDataReader.Read())
                    {
                        if (_rgvTabla.Columns.Count <= 0)
                        { // Si el grid está vacío generamos las columnas
                            BRSLibRejilla.CargarConfig(_rgvTabla, _cNombreTabla, _acNombreCampos, new string[] { }, BRSLib.nUsuario, _cNombreFormulario, _lDebeCoincidirNombreCampos, _lSeleccionMulti, _oComando.Connection.ConnectionString);
                        }

                        // Pasamos los datos del DataReader a cada columna del nuevo registro
                        GridViewDataRowInfo rowInfo = new GridViewDataRowInfo(_rgvTabla.MasterView);
                        for (int i = 0; i < _rgvTabla.ColumnCount; i++)
                        {
                            if (_rgvTabla.Columns[i].Name != BRSLibRejilla.cColumnaSeleccionMultiple)
                                rowInfo.Cells[i].Value = oDataReader[_rgvTabla.Columns[i].Name];
                        }
                        _rgvTabla.Rows.Add(rowInfo);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para modificar un registro de una rejilla con los datos de la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_rgvTabla">Rejilla donde queremos actualizar el registro</param>
        /// <param name="_cNombreTabla">Nombre de la tabla</param>
        /// <param name="_acClavePrimaria">Clave primaria de la tabla</param>
        /// <param name="_aoValoresClavePrimaria">Valores de la clave primaria del registro a modificar</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void ModificarRegistroRejilla(string _cConexion, string _cNombreFormulario, RadGridView _rgvTabla, string _cNombreTabla, string[] _acClavePrimaria, object[] _aoValoresClavePrimaria)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        ModificarRegistroRejilla(oComando, _cNombreFormulario, _rgvTabla, _cNombreTabla, _acClavePrimaria, _aoValoresClavePrimaria);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para modificar un registro de una rejilla con los datos de la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener la transacción</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_rgvTabla">Rejilla donde queremos actualizar el registro</param>
        /// <param name="_cNombreTabla">Nombre de la tabla</param>
        /// <param name="_acClavePrimaria">Clave primaria de la tabla</param>
        /// <param name="_aoValoresClavePrimaria">Valores de la clave primaria del registro a modificar</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void ModificarRegistroRejilla(NpgsqlCommand _oComando, string _cNombreFormulario, RadGridView _rgvTabla, string _cNombreTabla, string[] _acClavePrimaria, object[] _aoValoresClavePrimaria)
        {
            try
            {
                BRSLib.WriteLogDebug("Modificando valores de la rejilla de la ventana " + _cNombreFormulario, nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name);

                // Generamos la SQL
                StringBuilder cSQL = new StringBuilder("SELECT * FROM " + _cNombreTabla + " WHERE ");
                for (int i = 0; i < _acClavePrimaria.Length; i++)
                {
                    if (i != 0)
                        cSQL.Append(" AND ");
                    cSQL.Append(_acClavePrimaria[i] + " = :param" + i);
                }

                _oComando.CommandText = cSQL.ToString();
                _oComando.Parameters.Clear();

                for (int i = 0; i < _aoValoresClavePrimaria.Length; i++)
                {
                    _oComando.Parameters.Add(new NpgsqlParameter("param" + i, _aoValoresClavePrimaria[i]));
                }

                BRSLib.WriteLogDebug(AnalizarNpgsqlCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, _oComando);

                using (NpgsqlDataReader oDataReader = _oComando.ExecuteReader())
                {
                    if (oDataReader.Read())
                    {
                        for (int i = 0; i < _rgvTabla.ColumnCount; i++)
                        {
                            if (_rgvTabla.Columns[i].Name != BRSLibRejilla.cColumnaSeleccionMultiple)
                                _rgvTabla.CurrentRow.Cells[i].Value = oDataReader[_rgvTabla.Columns[i].Name];
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para modificar un registro de una rejilla con los datos de la base de datos
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_rgvTabla">Rejilla donde queremos actualizar el registro</param>
        /// <param name="_cNombreTabla">Nombre de la tabla</param>
        /// <param name="_acClavePrimaria">Clave primaria de la tabla</param>
        /// <param name="_filasSeleccionadas">Filas seleccionadas para actualizar su contenido</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void ModificarRegistroRejilla(string _cConexion, string _cNombreFormulario, RadGridView _rgvTabla, string _cNombreTabla, string[] _acClavePrimaria, List<GridViewRowInfo> _filasSeleccionadas)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        ModificarRegistroRejilla(oComando, _cNombreFormulario, _rgvTabla, _cNombreTabla, _acClavePrimaria, _filasSeleccionadas);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para modificar un registro de una rejilla con los datos de la base de datos
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener la transacción</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_rgvTabla">Rejilla donde queremos actualizar el registro</param>
        /// <param name="_cNombreTabla">Nombre de la tabla</param>
        /// <param name="_acClavePrimaria">Clave primaria de la tabla</param>
        /// <param name="_filasSeleccionadas">Filas seleccionadas para actualizar su contenido</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void ModificarRegistroRejilla(NpgsqlCommand _oComando, string _cNombreFormulario, RadGridView _rgvTabla, string _cNombreTabla, string[] _acClavePrimaria, List<GridViewRowInfo> _filasSeleccionadas)
        {
            try
            {
                BRSLib.WriteLogDebug("Modificando valores de la rejilla de la ventana " + _cNombreFormulario, nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name);

                foreach (GridViewRowInfo fila in _filasSeleccionadas)
                {
                    // Generamos la SQL
                    StringBuilder cSQL = new StringBuilder("SELECT * FROM " + _cNombreTabla + " WHERE ");
                    for (int i = 0; i < _acClavePrimaria.Length; i++)
                    {
                        if (i != 0)
                            cSQL.Append(" AND ");
                        cSQL.Append(_acClavePrimaria[i] + " = :param" + i);
                    }

                    _oComando.CommandText = cSQL.ToString();
                    _oComando.Parameters.Clear();

                    for (int i = 0; i < _acClavePrimaria.Length; i++)
                    {
                        _oComando.Parameters.Add(new NpgsqlParameter("param" + i, fila.Cells[_acClavePrimaria[i]].Value));
                    }

                    BRSLib.WriteLogDebug(AnalizarNpgsqlCommand(_oComando), nameof(BRSLibBD), MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, _oComando);

                    using (NpgsqlDataReader oDataReader = _oComando.ExecuteReader())
                    {
                        while (oDataReader.Read())
                        {
                            for (int i = 0; i < _rgvTabla.ColumnCount; i++)
                            {
                                if (_rgvTabla.Columns[i].Name != BRSLibRejilla.cColumnaSeleccionMultiple)
                                    fila.Cells[i].Value = oDataReader[_rgvTabla.Columns[i].Name];
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una consulta a la base de datos a través del registro
        /// y añadir los registros encontrados a la rejilla
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_acCamposBuscar">El nombre de los campos a buscar</param>
        /// <param name="_rgvTabla">Rejilla donde queremos insertar los registros</param>
        /// <param name="_cNombreTabla">El nombre de la tabla</param>
        /// <param name="_acClavePrimaria">Clave primaria de la tabla</param>
        /// <param name="_ldebeCoincidirNumeroCampos">Si debe coincidir el número de campos</param>
        /// <param name="_lSeleccionMulti">Si es una rejilla con columna de selección múltiple</param>
        /// <param name="_orderBy">El orden en que queremos mostrar los registros</param>
        /// <param name="_lMostrarNoEncontrados">Si queremos mostrar o no si no se encontraron registros</param>
        /// <param name="_cCondicion">Parámetro adicional para la consulta</param>
        /// <param name="_lblDebug">Label para mostrar el tiempo que tardó en ejecutar la consulta</param>
        /// <param name="_porJoin">Indica si la consulta viene con un join para eliminar el punto de los campos y las tablas sobrantes del join</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void EncontrarRegistroRejilla(string _cConexion, string _cNombreFormulario, string[] _acCamposBuscar, RadGridView _rgvTabla, string _cNombreTabla, string[] _acClavePrimaria, bool _ldebeCoincidirNumeroCampos = true, bool _lSeleccionMulti = false, string _orderBy = null, bool _lMostrarNoEncontrados = true, string _cCondicion = null, string _cCondicionOR = null, bool _porJoin = false)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        EncontrarRegistroRejilla(oComando, _cNombreFormulario, _acCamposBuscar, _rgvTabla, _cNombreTabla, _acClavePrimaria, _ldebeCoincidirNumeroCampos, _lSeleccionMulti, _orderBy, _lMostrarNoEncontrados, _cCondicion, _cCondicionOR, _porJoin);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para realizar una consulta a la base de datos a través del registro
        /// y añadir los registros encontrados a la rejilla
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener las transacciones</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_acCamposBuscar">El nombre de los campos a buscar</param>
        /// <param name="_rgvTabla">Rejilla donde queremos insertar los registros</param>
        /// <param name="_cNombreTabla">El nombre de la tabla</param>
        /// <param name="_acClavePrimaria">Clave primaria de la tabla</param>
        /// <param name="_ldebeCoincidirNumeroCampos">Si debe coincidir el número de campos</param>
        /// <param name="_lSeleccionMulti">Si es una rejilla con columna de selección múltiple</param>
        /// <param name="_orderBy">El orden en que queremos mostrar los registros</param>
        /// <param name="_lMostrarNoEncontrados">Si queremos mostrar o no si no se encontraron registros</param>
        /// <param name="_cCondicion">Parámetro adicional para la consulta</param>
        /// <param name="_porJoin">Indica si la consulta viene con un join para eliminar el punto de los campos y las tablas sobrantes del join</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void EncontrarRegistroRejilla(NpgsqlCommand _oComando, string _cNombreFormulario, string[] _acCamposBuscar, RadGridView _rgvTabla, string _cNombreTabla, string[] _acClavePrimaria, bool _ldebeCoincidirNumeroCampos = true, bool _lSeleccionMulti = false, string _orderBy = null, bool _lMostrarNoEncontrados = true, string _cCondicion = null, string _cCondicionOR = null, bool _porJoin = false)
        {
            try
            {
                // Ponemos el cursor de espera
                Cursor.Current = Cursors.WaitCursor;
                // Ocultamos la rejilla
                _rgvTabla.Visible = false;
                // Eliminamos el contenido
                _rgvTabla.Rows.Clear();
                _rgvTabla.Columns.Clear();
                //Application.DoEvents;


                // TODO Terminar proceso para mostrar ventana si el encontrar tarda demasiado
                //oComandoProcesandoEncontrar = _oComando;
                //temporizadorEncontrar.Start();

                string cNombreCodigo, cNombrecodigo2 = null, cNombreCodigo3 = null;
                cNombreCodigo = _acClavePrimaria[0];
                if (_acClavePrimaria.Length > 1)
                    cNombrecodigo2 = _acClavePrimaria[1];
                if (_acClavePrimaria.Length > 2)
                    cNombreCodigo3 = _acClavePrimaria[2];

                // Buscamos los registros
                //                EncontrarPostgres_GESTION(_rgvTabla, _cNombreTabla, cNombreCodigo, cNombrecodigo2, _oComando.Connection.ConnectionString, _orderBy, _cCondicion, cNombreCodigo3, _acCamposBuscar, _lMostrarNoEncontrados);
                EncontrarPostgres_GESTION(_rgvTabla, _cNombreTabla, cNombreCodigo, cNombrecodigo2, _oComando, _orderBy,
                    _cCondicion, cNombreCodigo3, _acCamposBuscar, _lMostrarNoEncontrados, _cCondicionOR, _porJoin);

                if (_rgvTabla.RowCount > 0)
                {
                    if (_porJoin)
                    {
                        _acCamposBuscar = _acCamposBuscar.Select(c => c.Contains(".") ? c.Split('.')[1] : c).ToArray();
                        _cNombreTabla = _cNombreTabla.Split(' ')[0];
                    }

                    // Si hay mas de un registro cargamos la configuración de la rejilla
                    BRSLibRejilla.CargarConfig(_rgvTabla, _cNombreTabla, _acCamposBuscar, new string[] { },
                        BRSLib.nUsuario, _cNombreFormulario, _ldebeCoincidirNumeroCampos, _lSeleccionMulti,
                        _oComando.Connection.ConnectionString);
                }
            }
            catch (NpgsqlException)
            {
                throw;
            }
            catch (Exception)
            {
                //Application.DoEvents;
                throw;
            }
            finally
            {
                // Mostramos la rejilla, le damos foco y recuperamos el cursor normal
                _rgvTabla.Visible = true;
                _rgvTabla.Focus();
                Cursor.Current = Cursors.Default;
            }
        }

        /// <summary>
        /// Función para realizar una consulta a la base de datos a la base de datos a través de los campos de búsqueda rápida
        /// y añadir los registros encontrados a la rejilla
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_rgvTabla">Rejilla donde queremos insertar los registros</param>
        /// <param name="_oTextBox">Textbox donde se encuentra el valor a encontrar</param>
        /// <param name="_cNombreTabla">Nombre de la tabla</param>
        /// <param name="_acNombreCampos">El nombre de los campos a buscar</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_cCondicion">Condición especial para la búsqueda</param>
        /// <param name="_cOrderBy">El orden en que queremos mostrar los registros</param>
        /// <param name="_acCamposBuscarTodo">Campos donde queremos encontrar al buscar por todo</param>
        /// <param name="_ldebeCoincidirNumeroCampos">Si debe coincidir el número de campos</param>
        /// <param name="_lSeleccionMulti">Si es una rejilla con columna de selección múltiple</param>
        /// <param name="_lCampoTipoArray">Si el campo buscado es de tipo array</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void EncontrarRapidoRegistroRejilla(string _cConexion, RadGridView _rgvTabla, RadTextBox _oTextBox, string _cNombreTabla, string[] _acNombreCampos, string _cNombreFormulario, string _cCondicion = null, string _cOrderBy = null, string[] _acCamposBuscarTodo = null, bool _ldebeCoincidirNumeroCampos = true, bool _lSeleccionMulti = false, bool _lCampoTipoArray = false)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        RadTextBox[] aoTextBox = { _oTextBox };
                        EncontrarRapidoRegistroRejilla(oComando, _rgvTabla, aoTextBox, _cNombreTabla, _acNombreCampos, _cNombreFormulario, _cCondicion, _cOrderBy, _acCamposBuscarTodo, _ldebeCoincidirNumeroCampos, _lSeleccionMulti, _lCampoTipoArray);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para realizar una consulta a la base de datos a la base de datos a través de los campos de búsqueda rápida
        /// y añadir los registros encontrados a la rejilla
        /// </summary>
        /// <param name="_oComando">Un objecto comando para mantener la transacción</param>
        /// <param name="_rgvTabla">Rejilla donde queremos insertar los registros</param>
        /// <param name="_oTextBox">Textbox donde se encuentra el valor a encontrar</param>
        /// <param name="_cNombreTabla">Nombre de la tabla</param>
        /// <param name="_acNombreCampos">El nombre de los campos a buscar</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_cCondicion">Condición especial para la búsqueda</param>
        /// <param name="_cOrderBy">El orden en que queremos mostrar los registros</param>
        /// <param name="_acCamposBuscarTodo">Campos donde queremos encontrar al buscar por todo</param>
        /// <param name="_ldebeCoincidirNumeroCampos">Si debe coincidir el número de campos</param>
        /// <param name="_lSeleccionMulti">Si es una rejilla con columna de selección múltiple</param>
        /// <param name="_lCampoTipoArray">Si el campo buscado es de tipo array</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void EncontrarRapidoRegistroRejilla(NpgsqlCommand _oComando, RadGridView _rgvTabla, RadTextBox _oTextBox, string _cNombreTabla, string[] _acNombreCampos, string _cNombreFormulario, string _cCondicion = null, string _cOrderBy = null, string[] _acCamposBuscarTodo = null, bool _ldebeCoincidirNumeroCampos = true, bool _lSeleccionMulti = false, bool _lCampoTipoArray = false)
        {
            try
            {
                RadTextBox[] aoTextBox = { _oTextBox };
                EncontrarRapidoRegistroRejilla(_oComando, _rgvTabla, aoTextBox, _cNombreTabla, _acNombreCampos, _cNombreFormulario, _cCondicion, _cOrderBy, _acCamposBuscarTodo, _ldebeCoincidirNumeroCampos, _lSeleccionMulti, _lCampoTipoArray);
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una consulta a la base de datos a la base de datos a través de los campos de búsqueda rápida
        /// y añadir los registros encontrados a la rejilla
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_rgvTabla">Rejilla donde queremos insertar los registros</param>
        /// <param name="_aoTextBox">Array de Textbox donde se encuentran los valores a encontrar</param>
        /// <param name="_cNombreTabla">Nombre de la tabla</param>
        /// <param name="_acNombreCampos">El nombre de los campos a buscar</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_cCondicion">Condición especial para la búsqueda</param>
        /// <param name="_cOrderBy">El orden en que queremos mostrar los registros</param>
        /// <param name="_acCamposBuscarTodo">Campos donde queremos encontrar al buscar por todo</param>
        /// <param name="_ldebeCoincidirNumeroCampos">Si debe coincidir el número de campos</param>
        /// <param name="_lSeleccionMulti">Si es una rejilla con columna de selección múltiple</param>
        /// <param name="_lCampoTipoArray">Si el campo buscado es de tipo array</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void EncontrarRapidoRegistroRejilla(string _cConexion, RadGridView _rgvTabla, RadTextBox[] _aoTextBox, string _cNombreTabla, string[] _acNombreCampos, string _cNombreFormulario, string _cCondicion = null, string _cOrderBy = null, string[] _acCamposBuscarTodo = null, bool _ldebeCoincidirNumeroCampos = true, bool _lSeleccionMulti = false, bool _lCampoTipoArray = false)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        EncontrarRapidoRegistroRejilla(oComando, _rgvTabla, _aoTextBox, _cNombreTabla, _acNombreCampos, _cNombreFormulario, _cCondicion, _cOrderBy, _acCamposBuscarTodo, _ldebeCoincidirNumeroCampos, _lSeleccionMulti, _lCampoTipoArray);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para realizar una consulta a la base de datos a la base de datos a través de los campos de búsqueda rápida
        /// y añadir los registros encontrados a la rejilla
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener la transacción</param>
        /// <param name="_rgvTabla">Rejilla donde queremos insertar los registros</param>
        /// <param name="_aoTextBox">Array de Textbox donde se encuentran los valores a encontrar</param>
        /// <param name="_cNombreTabla">Nombre de la tabla</param>
        /// <param name="_acNombreCampos">El nombre de los campos a buscar</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_cCondicion">Condición especial para la búsqueda</param>
        /// <param name="_cOrderBy">El orden en que queremos mostrar los registros</param>
        /// <param name="_acCamposBuscarTodo">Campos donde queremos encontrar al buscar por todo</param>
        /// <param name="_ldebeCoincidirNumeroCampos">Si debe coincidir el número de campos</param>
        /// <param name="_lSeleccionMulti">Si es una rejilla con columna de selección múltiple</param>
        /// <param name="_lCampoTipoArray">Si el campo buscado es de tipo array</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void EncontrarRapidoRegistroRejilla(NpgsqlCommand _oComando, RadGridView _rgvTabla, RadTextBox[] _aoTextBox, string _cNombreTabla, string[] _acNombreCampos, string _cNombreFormulario, string _cCondicion = null, string _cOrderBy = null, string[] _acCamposBuscarTodo = null, bool _ldebeCoincidirNumeroCampos = true, bool _lSeleccionMulti = false, bool _lCampoTipoArray = false)
        {
            try
            {
                // Generamos la SQL. Si trae un array de campos a buscar construimos el select con dichos campos
                StringBuilder cSQL = new StringBuilder();
                StringBuilder cSQLWhere = new StringBuilder();
                if (_acNombreCampos == null)
                    cSQL.Append("SELECT * FROM " + _cNombreTabla + " WHERE ");
                else
                    cSQL.Append("SELECT " + string.Join(", ", _acNombreCampos) + " FROM " + _cNombreTabla + " WHERE ");

                // Añadimos las condiciones
                if (_acCamposBuscarTodo == null)
                {
                    for (int i = 0; i < _aoTextBox.Length; i++)
                    {
                        if (!string.IsNullOrWhiteSpace(_aoTextBox[i].Text))
                        { // Si el textbox recorrido no está vacío
                            if (!string.IsNullOrWhiteSpace(cSQLWhere.ToString()))
                                cSQLWhere.Append(" AND ");
                            if (_aoTextBox[i].AccessibleDescription == "4")
                            {
                                if (string.IsNullOrWhiteSpace(_aoTextBox[i].AccessibleName))
                                    cSQLWhere.Append("UPPER(CAST(" + _aoTextBox[i].Name.Substring(3) + " AS TEXT)) LIKE :param" + i);
                                else
                                    cSQLWhere.Append("UPPER(CAST(" + _aoTextBox[i].AccessibleName + " AS TEXT)) LIKE :param" + i);

                                // BUG Descomentar función para volver a activar el unaccent
                                //cSQLWhere.Append("UNACCENT(UPPER(CAST(" + _aoTextBox[i].Name.Substring(3) + " AS TEXT))) LIKE UNACCENT(:param" + i + ")");
                            }
                            else
                            {
                                if (_lCampoTipoArray)
                                    cSQLWhere.Append(":param" + i + " = ANY(" + _aoTextBox[i].Name.Substring(3) + ")");
                                else if (!string.IsNullOrWhiteSpace(_aoTextBox[i].AccessibleName))

                                    cSQLWhere.Append(_aoTextBox[i].AccessibleName + " = :param" + i);

                                else
                                    cSQLWhere.Append(_aoTextBox[i].Name.Substring(3) + " = :param" + i);
                            }
                        }
                    }
                }
                else
                {
                    cSQLWhere.Append("(" + string.Join(" OR ", _acCamposBuscarTodo.Select(s => "UPPER(" + s + ") LIKE :param0")) + ")");
                }

                // Añadimos la condición especial a la SQL si la tuviese
                if (!string.IsNullOrWhiteSpace(_cCondicion))
                    cSQLWhere.Append(" AND " + _cCondicion);

                cSQL.Append(cSQLWhere);
                BRSLib.cUltimosEncontrados = cSQLWhere.ToString();

                if (!string.IsNullOrWhiteSpace(_cOrderBy))
                { // Si tiene un orden especificado lo indicamos
                    cSQL.Append(" ORDER BY " + _cOrderBy);
                }
                else if (_acCamposBuscarTodo == null)
                { // Si no tiene un orden, ordenamos por el orden de los textbox especificados
                    cSQL.Append(" ORDER BY ");
                    for (int i = 0; i < _aoTextBox.Length; i++)
                    {
                        if (i != 0)
                            cSQL.Append(", ");
                        cSQL.Append(_aoTextBox[i].Name.Substring(3));
                    }
                }

                _oComando.CommandText = cSQL.ToString();

                // Añadimos los parámetros a la consulta
                for (int i = 0; i < _aoTextBox.Length; i++)
                {
                    if (!string.IsNullOrWhiteSpace(_aoTextBox[i].Text))
                    {
                        if (_aoTextBox[i].AccessibleDescription == "4")
                        {
                            _oComando.Parameters.Add(new NpgsqlParameter("param" + i, (_aoTextBox[i].Text.ToUpper().Replace("*", "%") + "%").Replace("%%", "%")));
                            BRSLib.cUltimosEncontrados = BRSLib.cUltimosEncontrados.Replace(":param" + i, (_aoTextBox[i].Text.ToUpper().Replace("*", "%") + "%").Replace("%%", "%").Quoted());
                        }
                        else if (_aoTextBox[i].AccessibleDescription == "3")
                        {
                            if (BRSLibValidadores.EsFechaCorrecta(_aoTextBox[i].Text, out string cFechaFormateada))
                                _oComando.Parameters.Add(new NpgsqlParameter("param" + i, cFechaFormateada));
                            BRSLib.cUltimosEncontrados = BRSLib.cUltimosEncontrados.Replace(":param" + i, _aoTextBox[i].Text.Quoted());
                        }
                        else
                        {
                            _oComando.Parameters.Add(new NpgsqlParameter("param" + i, _aoTextBox[i].Text));
                            BRSLib.cUltimosEncontrados = BRSLib.cUltimosEncontrados.Replace(":param" + i, _aoTextBox[i].Text.Quoted());
                        }
                    }
                }

                BRSLib.WriteLogDebug(BRSLibBD.AnalizarNpgsqlCommand(_oComando), nameof(BRSLibBD), System.Reflection.MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, _oComando);

                using (NpgsqlDataReader oDataReader = _oComando.ExecuteReader())
                {
                    _rgvTabla.MasterTemplate.LoadFrom(oDataReader);
                }

                BRSLibRejilla.CargarConfig(_rgvTabla, _cNombreTabla, _acNombreCampos, new string[] { }, BRSLib.nUsuario, _cNombreFormulario, _ldebeCoincidirNumeroCampos, _lSeleccionMulti, _oComando.Connection.ConnectionString);
            }
            catch (Exception)
            {
                BRSLib.cUltimosEncontrados = "";
                throw;
            }
        }

        /// <summary>
        /// Función para realizar una consulta a la base de datos a través del registro
        /// y añadir los registros encontrados a la rejilla
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_acCamposBuscar">El nombre de los campos a buscar</param>
        /// <param name="_rgvTabla">Rejilla donde queremos insertar los registros</param>
        /// <param name="_cNombreTabla">El nombre de la tabla</param>
        /// <param name="_cSQL">Consulta sql que queremos ejecutar</param>
        /// <param name="_lSeleccionMulti">Si es una rejilla con columna de selección múltiple</param>
        /// <param name="_parametros">Parametros de la consulta</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void EncontrarRegistroRejilla(string _cConexion, string _cNombreFormulario, string[] _acCamposBuscar, RadGridView _rgvTabla, string _cNombreTabla, string _cSQL, bool _lSeleccionMulti = false, params object[] _parametros)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        EncontrarRegistroRejilla(oComando, _cNombreFormulario, _acCamposBuscar, _rgvTabla, _cNombreTabla, _cSQL, _lSeleccionMulti, _parametros);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función para realizar una consulta a la base de datos a través del registro
        /// y añadir los registros encontrados a la rejilla
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener la transacción</param>
        /// <param name="_cNombreFormulario">El nombre del formulario donde se encuentra la rejilla</param>
        /// <param name="_acCamposBuscar">El nombre de los campos a buscar</param>
        /// <param name="_rgvTabla">Rejilla donde queremos insertar los registros</param>
        /// <param name="_cNombreTabla">El nombre de la tabla</param>
        /// <param name="_cSQL">Consulta sql que queremos ejecutar</param>
        /// <param name="_lSeleccionMulti">Si es una rejilla con columna de selección múltiple</param>
        /// <param name="_lMostrarNoEncontrados">Si queremos mostrar o no si no se encontraron registros</param>
        /// <param name="_parametros">Parametros de la consulta</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void EncontrarRegistroRejilla(NpgsqlCommand _oComando, string _cNombreFormulario, string[] _acCamposBuscar, RadGridView _rgvTabla, string _cNombreTabla, string _cSQL, bool _lSeleccionMulti = false, params object[] _parametros)
        {
            try
            {
                // Ponemos el cursor de espera
                Cursor.Current = Cursors.WaitCursor;
                // Ocultamos la rejilla
                _rgvTabla.Visible = false;
                // Eliminamos el contenido
                _rgvTabla.Rows.Clear();
                _rgvTabla.Columns.Clear();
                //Application.DoEvents;

                _oComando.CommandText = _cSQL;
                for (int i = 0; i < _parametros.Length; i++)
                {
                    _oComando.Parameters.Add(new NpgsqlParameter("param" + i, _parametros[i]));
                }

                NpgsqlDataReader oDataReaderPostgres = _oComando.ExecuteReader();

                if (oDataReaderPostgres.HasRows)
                {
                    DataTable dt = new DataTable();
                    dt.Load(oDataReaderPostgres);
                    _rgvTabla.DataSource = dt;
                }

                if (_rgvTabla.RowCount > 0)
                { // Si hay mas de un registro cargamos la configuración de la rejilla
                    BRSLibRejilla.CargarConfig(_rgvTabla, _cNombreTabla, _acCamposBuscar, new string[] { }, BRSLib.nUsuario, _cNombreFormulario, true, _lSeleccionMulti, _oComando.Connection.ConnectionString);
                }
            }
            catch (Exception)
            {
                //Application.DoEvents;
                throw;
            }
            finally
            {
                // Mostramos la rejilla, le damos foco y recuperamos el cursor normal
                _rgvTabla.Visible = true;
                _rgvTabla.Focus();
                Cursor.Current = Cursors.WaitCursor;
            }
        }

        /// <summary>
        /// Función para quitar el registro seleccionado de la rejilla
        /// </summary>
        /// <param name="_rgvTabla">Rejilla de la que queremos quitar el registro</param>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static void QuitarRegistroRejilla(RadGridView _rgvTabla)
        {
            try
            {
                if (BRSLibRejilla.RegistroSeleccionado(_rgvTabla, false))
                {
                    _rgvTabla.CurrentRow.Delete();
                    if (_rgvTabla.RowCount == 0)
                        _rgvTabla.Columns.Clear();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public static void RefrescarRejilla(string _cConexion, string _cNombreFormulario, string[] _acCamposBuscar, RadGridView _rgvTabla, string _cNombreTabla, string[] _acClavePrimaria, string _cUltimosEncontrados = null, bool _ldebeCoincidirNumeroCampos = true, bool _lSeleccionMulti = false, string _orderBy = null, bool _lMostrarNoEncontrados = true, bool _lMantenerPosicion = false)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        RefrescarRejilla(oComando, _cNombreFormulario, _acCamposBuscar, _rgvTabla, _cNombreTabla, _acClavePrimaria, _cUltimosEncontrados, _ldebeCoincidirNumeroCampos, _lSeleccionMulti, _orderBy, _lMostrarNoEncontrados, _lMantenerPosicion);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        public static void RefrescarRejilla(NpgsqlCommand _oComando, string _cNombreFormulario, string[] _acCamposBuscar, RadGridView _rgvTabla, string _cNombreTabla, string[] _acClavePrimaria, string _cUltimosEncontrados = null, bool _ldebeCoincidirNumeroCampos = true, bool _lSeleccionMulti = false, string _orderBy = null, bool _lMostrarNoEncontrados = true, bool _lMantenerPosicion = false)
        {
            try
            {
                RadScrollBarElement vScrollBar = null;
                int vScrollBarValue = -1;
                RadScrollBarElement hScrollBar = null;
                int hScrollBarValue = -1;

                if (_lMantenerPosicion)
                {
                    vScrollBar = _rgvTabla.TableElement.VScrollBar;
                    vScrollBarValue = vScrollBar.Value;
                    hScrollBar = _rgvTabla.TableElement.HScrollBar;
                    hScrollBarValue = hScrollBar.Value;
                }

                if (_rgvTabla.RowCount > 0)
                {
                    _rgvTabla.Rows.Clear();
                    _rgvTabla.Columns.Clear();
                }

                // Generamos la SQL. Si trae un array de campos a buscar construimos el select con dichos campos
                StringBuilder cSQL = new StringBuilder();
                if (_acCamposBuscar == null)
                    cSQL.Append("SELECT * FROM " + _cNombreTabla);
                else
                    cSQL.Append("SELECT " + string.Join(", ", _acCamposBuscar) + " FROM " + _cNombreTabla);

                // Añadimos las condiciones
                if (!string.IsNullOrWhiteSpace(_cUltimosEncontrados))
                {
                    cSQL.Append(" WHERE " + _cUltimosEncontrados);
                }

                if (string.IsNullOrWhiteSpace(_orderBy))
                {
                    cSQL.Append(" ORDER BY " + string.Join(", ", _acClavePrimaria));
                }
                else
                {
                    cSQL.Append(" ORDER BY " + _orderBy);
                }

                _oComando.CommandText = cSQL.ToString();

                BRSLib.WriteLogDebug(BRSLibBD.AnalizarNpgsqlCommand(_oComando), nameof(BRSLibBD), System.Reflection.MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, _oComando);

                using (NpgsqlDataReader oDataReader = _oComando.ExecuteReader())
                {
                    if (oDataReader.HasRows)
                    {
                        _rgvTabla.MasterTemplate.LoadFrom(oDataReader);
                        BRSLibRejilla.CargarConfig(_rgvTabla, _cNombreTabla, _acCamposBuscar, new string[] { }, BRSLib.nUsuario, _cNombreFormulario, _ldebeCoincidirNumeroCampos, _lSeleccionMulti, _oComando.Connection.ConnectionString);

                        if (_lMantenerPosicion)
                        {
                            //_rgvTabla.TableElement.HScrollBar.Value = ClampValue(hScrollBarValue, hScrollBar.Minimum, hScrollBar.Maximum);
                            //_rgvTabla.TableElement.VScrollBar.Value = ClampValue(vScrollBarValue, vScrollBar.Minimum, vScrollBar.Maximum - vScrollBar.LargeChange + 1);
                        }
                    }
                    else
                    {
                        if (_lMostrarNoEncontrados)
                            BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
                    }
                }

            }
            catch (Exception)
            {
                BRSLib.cUltimosEncontrados = "";
                throw;
            }
        }

        private static int ClampValue(int value, int minimum, int maximum)
        {
            if (value < minimum)
            {
                return minimum;
            }
            if (maximum > 0 && value > maximum)
            {
                return maximum;
            }
            return value;
        }

        #endregion

        #region Funciones para comprobar si un registro está bloqueado

        /// <summary>
        /// Función que indica si un registro se encuentra bloqueado por otro usuario
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <param name="_cNombreTabla">El nombre de la tabla</param>
        /// <param name="_acCampoValor">Parametros según campo - valor con los rangos a encontrar</param>
        /// <returns>Verdadero o falso si el registro está bloqueado o no</returns>
        /// /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static bool RegistroBloqueado(string _cConexion, string _cNombreTabla, params object[] _acCampoValor)
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(_cConexion))
            {
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    try
                    {
                        oConexion.Open();
                        return RegistroBloqueado(oComando, _cNombreTabla, _acCampoValor);
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Función que indica si un registro se encuentra bloqueado por otro usuario
        /// </summary>
        /// <param name="_oComando">Un objeto comando para mantener la transacción</param>
        /// <param name="_cNombreTabla">El nombre de la tabla</param>
        /// <param name="_acCampoValor">Parametros según campo - valor con los rangos a encontrar</param>
        /// <returns>Verdadero o falso si el registro está bloqueado o no</returns>
        /// /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static bool RegistroBloqueado(NpgsqlCommand _oComando, string _cNombreTabla, params object[] _acCampoValor)
        {
            bool lBloqueado;
            try
            {

                if (_acCampoValor.Length % 2 != 0)
                    throw new ArgumentException(Cadenas.ParametrosNoValidos);

                string[] acCampos = _acCampoValor.Select(i => Convert.ToString(i)).Where((value, index) => index % 2 == 0).ToArray();
                object[] acValores = _acCampoValor.Where((value, index) => index % 2 != 0).ToArray();

                StringBuilder cSQL = new StringBuilder("SELECT * FROM " + _cNombreTabla + " WHERE ");
                for (int i = 0; i < acCampos.Length; i++)
                {
                    if (i != 0)
                        cSQL.Append(" AND ");
                    cSQL.Append(acCampos[i] + " = :param" + i);
                }
                cSQL.Append(" FOR UPDATE NOWAIT;");

                LanzarNonQuery(_oComando, cSQL.ToString(), acValores);
                lBloqueado = false;
            }
            catch (NpgsqlException ex)
            { // Si se captura una excepción de Npgsql
                if (ex.Code == Excepciones.CodErrorRegistroBloqueado)
                { // Si el error es el producido por un registro bloqueado
                    lBloqueado = true;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return lBloqueado;
        }

        #endregion

        #region Funciones auxiliares

        public static string AnalizarCommand(IDbCommand _oComando)
        {
            if (_oComando is OleDbCommand oleDbCommand)
                return AnalizarOleDbCommand(oleDbCommand);
            else if (_oComando is NpgsqlCommand npgsqlCommand)
                return AnalizarNpgsqlCommand(npgsqlCommand);
            else
                return "";
        }

        /// <summary>
        /// Función que permite analizar el contenido de un objeto NpgsqlCommand parametrizado
        /// </summary>
        /// <param name="_oComando">El objeto con la consulta a analizar</param>
        /// <returns>La consulta en formato SQL sin parametrizar</returns>
        public static string AnalizarOleDbCommand(OleDbCommand _oComando)
        {
            int pos;
            string l = _oComando.CommandText;
            for (int i = 0; i < _oComando.Parameters.Count; i++)
            {
                try
                {
                    string valor;
                    if (_oComando.Parameters[i].Value.GetType().UnderlyingSystemType.Name == "DBNull")
                        valor = $"({_oComando.Parameters[i].DbType.ToString()})null";
                    else
                        valor = $"({_oComando.Parameters[i].DbType.ToString()})'{_oComando.Parameters[i].Value.ToString()}'";
                    pos = l.IndexOf('?');
                    if (pos >= 0)
                        l = l.Substring(0, pos) + valor + l.Substring(pos + 1);
                }
                catch (Exception) { Console.WriteLine("Error al AnalizarOleDbCommand: " + _oComando.CommandText); }
            }
            if (_oComando.Parameters.Count == 0)
            {
                l = _oComando.CommandText;
            }
            return l;
        }

        /// <summary>
        /// Función que permite analizar el contenido de un objeto NpgsqlCommand parametrizado
        /// </summary>
        /// <param name="_oComando">El objeto con la consulta a analizar</param>
        /// <returns>La consulta en formato SQL sin parametrizar</returns>
        public static string AnalizarNpgsqlCommand(NpgsqlCommand _oComando)
        {
            string l = _oComando.CommandText;
            for (int i = 0; i < _oComando.Parameters.Count; i++)
            {
                // Selecciona los que coinciden con el nombre del parámetro
                // y el parámetro termina en espacio, coma o punto y coma
                // para que por ejemplo no reemplace el :param100; como valor00; al pasar por el índice 1
                var regex = new Regex(":" + _oComando.Parameters[i].ParameterName + "(?![^\\s,);])");
                try
                {
                    string valor;
                    if (_oComando.Parameters[i].NpgsqlValue.GetType().UnderlyingSystemType.Name == "DBNull")
                        valor = "null";
                    else
                        valor = "'" + _oComando.Parameters[i].NpgsqlValue.ToString() + "'";
                    l = regex.Replace(l, valor, 1);
                }
                catch (Exception) { Console.WriteLine("Error al AnalizarNpgsqlCommand: " + _oComando.CommandText); }
            }
            if (_oComando.Parameters.Count == 0)
            {
                l = _oComando.CommandText;
            }
            return l;
        }

        public static string AnalizarSQLParametrizado(string _cSQL, object[] _parametros)
        {
            string l = _cSQL;
            for (int i = 0; i < _parametros.Length; i++)
            {
                // Selecciona los que coinciden con el nombre del parámetro
                // y el parámetro termina en espacio, coma o punto y coma
                // para que por ejemplo no reemplace el :param100; como valor00; al pasar por el índice 1
                var regex = new Regex(":param" + i + "(?![^\\s,);])");
                try
                {
                    string valor;
                    if (_parametros[i] == null)
                        valor = "null";
                    else
                        valor = "'" + Convert.ToString(_parametros[i]) + "'";
                    l = regex.Replace(l, valor, 1);
                }
                catch (Exception) { Console.WriteLine("Error al AnalizarSQLParametrizado: " + _cSQL); }
            }
            if (_parametros.Length == 0)
            {
                l = _cSQL;
            }
            return l;
        }


        /// <summary>
        /// Función que devuelve la fecha del servidor
        /// </summary>
        /// <returns>Un datetime con la fecha</returns>
        public static DateTime ObtenerFechaServidor()
        {
            try
            {
                string cSQL = "SELECT now();";
                return SelectScalarFecha(BRSLibBD.cConexionBRSERP, cSQL);
            }
            catch (Exception)
            {
                throw;
            }
        }


        /// <summary>
        /// Función auxiliar para insertar los parámetros en el objeto comando
        /// </summary>
        /// <param name="_oComando">El objeto comando en el que queremos meter los parámetros</param>
        /// <param name="_aoParametros">Los parámetros a insertar</param>
        private static void InsertarParametros(NpgsqlCommand _oComando, params object[] _aoParametros)
        {
            _oComando.Parameters.Clear();
            if (_aoParametros != null)
            {
                for (int i = 0; i < _aoParametros.Length; i++)
                {
                    // Por cada parámetros
                    Object aux;
                    if (_aoParametros[i] is string cadena)
                    {
                        // Si el parámetro es una cadena, si la cadena está vacía guardamos nulo, si no guardamos la cadena
                        if (string.IsNullOrEmpty(cadena))
                            aux = DBNull.Value;
                        else
                            aux = cadena;
                    }
                    else if (_aoParametros[i] is RadTextBox textBox)
                    {
                        // Si el parametro es un RadTextBox, insertamos el texto del RadTextBox
                        if (string.IsNullOrEmpty(textBox.Text))
                            aux = DBNull.Value;
                        else
                            aux = textBox.Text;
                    }
                    else
                    {
                        // Si el parámetros no es una cadena, si esta nulo guardamos nulo, si no guardamos el parámetro
                        aux = _aoParametros[i] == null ? DBNull.Value : _aoParametros[i];
                    }

                    _oComando.Parameters.Add(new NpgsqlParameter("param" + i, aux));
                }
            }
        }

        public static void InsertarParametrosAccess(OleDbCommand _oComando, params object[] _aoParametros)
        {
            _oComando.Parameters.Clear();
            if (_aoParametros != null)
            {
                for (int i = 0; i < _aoParametros.Length; i++)
                {
                    // Por cada parámetros
                    Object aux;
                    if (_aoParametros[i] is string cadena)
                    {
                        // Si el parámetro es una cadena, si la cadena está vacía guardamos nulo, si no guardamos la cadena
                        if (string.IsNullOrEmpty(cadena))
                            aux = DBNull.Value;
                        else
                            aux = cadena;
                    }
                    else if (_aoParametros[i] is RadTextBox textBox)
                    {
                        // Si el parametro es un RadTextBox, insertamos el texto del RadTextBox
                        if (string.IsNullOrEmpty(textBox.Text))
                            aux = DBNull.Value;
                        else
                            aux = textBox.Text;
                    }
                    else
                    {
                        // Si el parámetros no es una cadena, si esta nulo guardamos nulo, si no guardamos el parámetro
                        aux = _aoParametros[i] == null ? DBNull.Value : _aoParametros[i];
                    }

                    _oComando.Parameters.Add(new OleDbParameter("param" + i, aux));
                }
            }
        }


        /// <summary>
        /// Función auxiliar para rellenar un objeto BRSRegistro con los datos de un datareader. El datareader debe pasarse habiendo leido anteriormente
        /// </summary>
        /// <param name="_oDataReader">El datareader con los datos a insertar</param>
        /// <returns>Un objeto BRSRegistro rellenado</returns>
        private static BRSRegistro RellenarRegistroDataReader(NpgsqlDataReader _oDataReader)
        {
            BRSRegistro registro = new BRSRegistro { Indice = 0 };

            if (_oDataReader.HasRows)
            { // Si el datareader trae filas
                _oDataReader.Read();
                for (int i = 0; i < _oDataReader.FieldCount; i++)
                { // Por cada campo en la consulta, insertamos un nuevo campo en el registro
                    registro.insertKey(Convert.ToString(_oDataReader.GetName(i)), _oDataReader[i]);
                }
            }
            else
            { // Si el datareader no trae filas
                for (int i = 0; i < _oDataReader.FieldCount; i++)
                { // Por cada campo en la consulta, insertamos un nuevo campo vacío en el registro
                    registro.insertKey(Convert.ToString(_oDataReader.GetName(i)), null);
                }
            }

            return registro;
        }

        /// <summary>
        /// Función auxiliar para rellenar un objeto BRSRegistro con los datos de un datareader. El datareader debe pasarse habiendo leido anteriormente
        /// </summary>
        /// <param name="_oDataReader">El datareader con los datos a insertar</param>
        /// <returns>Un objeto BRSRegistro rellenado</returns>
        private static BRSRegistro RellenarRegistroDataReaderAccess(OleDbDataReader _oDataReader)
        {
            BRSRegistro registro = new BRSRegistro { Indice = 0 };

            if (_oDataReader.HasRows)
            { // Si el datareader trae filas
                _oDataReader.Read();
                for (int i = 0; i < _oDataReader.FieldCount; i++)
                { // Por cada campo en la consulta, insertamos un nuevo campo en el registro
                    registro.insertKey(Convert.ToString(_oDataReader.GetName(i)), _oDataReader[i]);
                }
            }
            else
            { // Si el datareader no trae filas
                for (int i = 0; i < _oDataReader.FieldCount; i++)
                { // Por cada campo en la consulta, insertamos un nuevo campo vacío en el registro
                    registro.insertKey(Convert.ToString(_oDataReader.GetName(i)), null);
                }
            }

            return registro;
        }

        /// <summary>
        /// Función auxiliar que inserta en la consulta los campos de la clave primaria si la consulta
        /// no los incluía
        /// </summary>
        /// <param name="_cSQL">La consulta</param>
        /// <param name="_acClavePrimaria">La clave primaria</param>
        /// <returns>La consulta con los campos de la clave primaria agregados</returns>
        private static string AnadirClaveAConsulta(string _cSQL, string[] _acClavePrimaria)
        {
            string cSQLClave = _cSQL;

            if (_acClavePrimaria != null)
            { // Si la clave primaria no es nula, comprobamos si la consulta contiene la clave primaria
                int indice, longitud;
                string cadenaCampos;
                StringBuilder cadenaCamposAux;
                string[] camposSelect;

                indice = _cSQL.IndexOf("SELECT ") + "SELECT ".Length;
                longitud = _cSQL.IndexOf(" FROM") - "SELECT ".Length;
                // Hacemos un substring, empezando por e
                cadenaCampos = cSQLClave.Substring(indice, longitud);
                cadenaCamposAux = new StringBuilder(cSQLClave.Substring(indice, longitud));

                if (cadenaCampos.Trim() != "*")
                { // Si no estamos buscando todos los campos
                    camposSelect = cadenaCampos.Split(',').Select(p => p.Trim()).ToArray();

                    foreach (string clave in _acClavePrimaria)
                    { // Por cada campo de la clave primaria
                        if (!camposSelect.Contains(clave))
                        { // Si el campo de la clave no se encontró entre los campos, lo añadimos a la consulta
                            cadenaCamposAux.Append(", " + clave);
                        }
                    }

                    cSQLClave = _cSQL.Replace(cadenaCampos, cadenaCamposAux.ToString());
                }
            }

            return cSQLClave;
        }


        /// <summary>
        /// Función que extrae el nombre de una base de datos a través de su cadena de conexión
        /// </summary>
        /// <param name="_cConexion">La cadena de conexión</param>
        /// <returns>El nombre de la base de datos</returns>
        /// <exception cref="Exception">Cuando ocurre algún error</exception>
        public static string ExtraerBaseDatosConexion(string _cConexion)
        {
            try
            {
                string cDatabase = null;
                if (!string.IsNullOrWhiteSpace(_cConexion))
                {
                    string[] splitAux = _cConexion.Split(';');
                    foreach (string split in splitAux)
                    {
                        if (split.ToUpper().StartsWith("DATABASE"))
                        {
                            cDatabase = split.Split('=')[1];
                            break;
                        }
                    }
                }
                return cDatabase;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función que devuelve uno a uno los nombres de las bases de datos de tesorería
        /// </summary>
        /// <returns></returns>
        public static IEnumerable<string> SeleccionarBDTesoreria()
        {
            NpgsqlConnection oConexion = null;
            NpgsqlCommand oComando = null;
            NpgsqlDataReader oDataReader = null;
            try
            {
                oConexion = new NpgsqlConnection(BRSLibBD.cConexionBRSERP);
                oComando = oConexion.CreateCommand();
                oConexion.Open();

                string cSQL = "SELECT datname FROM pg_shdescription " +
                          "JOIN pg_database ON objoid = pg_database.oid " +
                          "WHERE description LIKE 'BBDD TESORERIA%' ORDER BY datname;";
                oComando.CommandText = cSQL;
                oDataReader = oComando.ExecuteReader();
            }
            catch (Exception)
            {
                throw;
            }

            if (oDataReader != null)
            { // Si la consulta no fue errónea
                while (oDataReader.Read())
                {
                    yield return Convert.ToString(oDataReader["datname"]);
                }
            }

            if (oDataReader != null)
                oDataReader.Close();
            if (oConexion != null)
            {
                if (oConexion.State == System.Data.ConnectionState.Open)
                    oConexion.Close();
                oConexion.Dispose();
            }
        }

        /// <summary>
        /// Función que devuelve uno a uno los nombres de las bases de datos de contabilidad
        /// </summary>
        /// <param name="_nGrupoCentro"></param>
        /// <returns></returns>
        public static IEnumerable<string> SeleccionarBDContabilidad(int _nGrupoCentro = -1)
        {
            NpgsqlConnection oConexion = null;
            NpgsqlCommand oComando = null;
            NpgsqlDataReader oDataReader = null;
            try
            {
                oConexion = new NpgsqlConnection(BRSLibBD.cConexionBRSERP);
                oComando = oConexion.CreateCommand();
                oConexion.Open();

                string cSQL = "SELECT datname FROM pg_shdescription ";
                cSQL += " JOIN pg_database ON objoid = pg_database.oid ";
                cSQL += " WHERE description LIKE 'BBDD CONTABILIDAD%'";
                if (_nGrupoCentro != -1)
                    cSQL += " AND SUBSTRING(datname FROM 1 FOR 4) = '" + Convert.ToString(_nGrupoCentro).PadLeft(4, '0') + "'";
                cSQL += " ORDER BY datname;";
                oComando.CommandText = cSQL;
                oDataReader = oComando.ExecuteReader();
            }
            catch (Exception)
            {
                throw;
            }

            if (oDataReader != null)
            { // Si la consulta no fue errónea
                while (oDataReader.Read())
                {
                    yield return Convert.ToString(oDataReader["datname"]);
                }
            }

            if (oDataReader != null)
                oDataReader.Close();
            if (oConexion != null)
            {
                if (oConexion.State == System.Data.ConnectionState.Open)
                    oConexion.Close();
                oConexion.Dispose();
            }
        }

        /// <summary>
        /// Función que devuelve una cadena de conexión con la base de datos genérica de access para la
        /// gestión con el programa de Frutos Secos Reyes.
        /// </summary>
        /// <returns></returns>
        public static string CadenaConexionAccess()
        {
            if (string.IsNullOrWhiteSpace(BRSLibBD.cGenericaAccess)) return "";
            return "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + BRSLibBD.cGenericaAccess;
        }

        /// <summary>
        /// Función que devuelve una cadena de conexión con la base de datos genérica de access para la
        /// gestión con el programa de Frutos Secos Reyes.
        /// </summary>
        /// <returns></returns>
        public static string CadenaConexionAccess(string rutaFichero)
        {
            return "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + rutaFichero;
        }

        /// <summary>
        /// Función que devuelve una cadena de conexión de la BD deseada
        /// </summary>
        /// <param name="_cDatabase">El nombre de la base de datos</param>
        /// <returns>La cadena de conexión a la base de datos</returns>
        public static string CadenaConexion(string _cDatabase)
        {
            NpgsqlConnectionStringBuilder builder = new NpgsqlConnectionStringBuilder
            {
                Host = cIPServidorBD,
                Port = cPuertoBD.AsInt(),
                UserName = cUserID,
                Password = cPassword,
                Database = _cDatabase,
                ApplicationName = BRSLib.cNombreApp,
                CommandTimeout = 0,
            };
            return builder.ConnectionString;
        }

        /// <summary>
        /// Función que devuelve una cadena de conexión de la BD deseada
        /// </summary>
        /// <param name="_cServidor">La ruta del servidor donde se encuentra la base de datos</param>
        /// <param name="_cPuerto">El puerto de escucha del servidor</param>
        /// <param name="_cDatabase">El nombre de la base de datos</param>
        /// <returns>La cadena de conexión a la base de datos</returns>
        public static string CadenaConexion(string _cServidor, string _cPuerto, string _cDatabase)
        {
            NpgsqlConnectionStringBuilder builder = new NpgsqlConnectionStringBuilder
            {
                Host = _cServidor,
                Port = _cPuerto.AsInt(),
                UserName = cUserID,
                Password = cPassword,
                Database = _cDatabase,
                ApplicationName = BRSLib.cNombreApp,
            };
            return builder.ConnectionString;
        }

        /// <summary>
        /// Función que devuelve una cadena de conexión de la BD deseada
        /// </summary>
        /// <param name="_cServidor">La ruta del servidor donde se encuentra la base de datos</param>
        /// <param name="_cPuerto">El puerto de escucha del servidor</param>
        /// <param name="_cDatabase">El nombre de la base de datos</param>
        /// <param name="_cUsuario">El usuario con el que nos conectaremos</param>
        /// <param name="_cPassword">La contraseña del usuario</param>
        /// <returns>La cadena de conexión a la base de datos</returns>
        public static string CadenaConexion(string _cServidor, string _cPuerto, string _cDatabase, string _cUsuario, string _cPassword)
        {
            NpgsqlConnectionStringBuilder builder = new NpgsqlConnectionStringBuilder
            {
                Host = _cServidor,
                Port = _cPuerto.AsInt(),
                UserName = _cUsuario,
                Password = _cPassword,
                Database = _cDatabase,
                ApplicationName = BRSLib.cNombreApp,
            };
            return builder.ConnectionString;
        }

        public static bool EnUso(string _conexion, string _tabla, string _campo, object _parametro)
        {
            return EnUso(_conexion, _tabla, new string[] { _campo }, new object[] { _parametro });
        }

        public static bool EnUso(string _conexion, string _tabla, string[] _campos, object[] _parametros)
        {
            int param = 0;
            StringBuilder cSQL = new StringBuilder("SELECT COUNT(*) FROM " + _tabla + " WHERE");
            foreach (string campo in _campos)
                cSQL.Append(" " + campo + " = :param" + (param++));
            cSQL.Append(";");

            return SelectScalarEnteroSinLog(_conexion, cSQL.ToString(), _parametros) > 0;
        }

        public static string[] SQLToStringArray(string _cconexion, string _tabla, string _campo, string _rango = null)
        {
            try
            {
                return SQLToStringList(_cconexion, _tabla, _campo, _rango).ToArray();
            }
            catch (Exception)
            {
                throw;
            }
        }

        public static int[] SQLToIntArray(string _cconexion, string _tabla, string _campo, string _rango = null)
        {
            try
            {
                return SQLToIntList(_cconexion, _tabla, _campo, _rango).ToArray();
            }
            catch (Exception)
            {
                throw;
            }
        }

        public static List<string> SQLToStringList(string _cconexion, string _tabla, string _campo, string _rango = null)
        {
            try
            {
                using (NpgsqlConnection oConexion = new NpgsqlConnection(_cconexion))
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    oConexion.Open();
                    return SQLToStringList(oComando, _tabla, _campo, _rango);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public static List<string> SQLToStringList(NpgsqlCommand _ocomando, string _tabla, string _campo, string _rango = null)
        {
            _ocomando.CommandText = "SELECT " + _campo + " FROM " + _tabla;
            if (!string.IsNullOrWhiteSpace(_rango))
            {
                _ocomando.CommandText += " WHERE " + _rango;
            }

            using (NpgsqlDataReader oDataReader = _ocomando.ExecuteReader())
            {
                List<string> lista = new List<string>();

                while (oDataReader.Read())
                {
                    lista.Anadir(Convert.ToString(oDataReader[0]));
                }

                return lista;
            }
        }


        public static List<int> SQLToIntList(string _cconexion, string _tabla, string _campo, string _rango = null, bool _distinct = false)
        {
            try
            {
                using (NpgsqlConnection oConexion = new NpgsqlConnection(_cconexion))
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    oConexion.Open();
                    return SQLToIntList(oComando, _tabla, _campo, _rango, _distinct);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public static List<int> SQLToIntList(NpgsqlCommand _ocomando, string _tabla, string _campo, string _rango = null, bool _distinct = false)
        {
            if (_distinct)
                _ocomando.CommandText = "SELECT DISTINCT " + _campo + " FROM " + _tabla;
            else
                _ocomando.CommandText = "SELECT " + _campo + " FROM " + _tabla;

            if (!string.IsNullOrWhiteSpace(_rango))
            {
                _ocomando.CommandText += " WHERE " + _rango;
            }

            using (NpgsqlDataReader oDataReader = _ocomando.ExecuteReader())
            {
                List<int> lista = new List<int>();

                while (oDataReader.Read())
                {
                    if (oDataReader[0] != DBNull.Value)
                        lista.Anadir(Convert.ToInt32(oDataReader[0]));
                }

                return lista;
            }
        }

        public static Dictionary<string, string> SQLToStringStringDictionary(string _cconexion, string _tabla, string _clave, string _valor, string _rango = null, bool _distinct = false)
        {
            try
            {
                using (NpgsqlConnection oConexion = new NpgsqlConnection(_cconexion))
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    oConexion.Open();
                    return SQLToStringStringDictionary(oComando, _tabla, _clave, _valor, _rango, _distinct);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public static Dictionary<string, string> SQLToStringStringDictionary(NpgsqlCommand _ocomando, string _tabla, string _clave, string _valor, string _rango = null, bool _distinct = false)
        {
            try
            {
                if (_distinct)
                    _ocomando.CommandText = "SELECT DISTINCT " + _clave + ", " + _valor + " FROM " + _tabla;
                else
                    _ocomando.CommandText = "SELECT " + _clave + ", " + _valor + " FROM " + _tabla;
                if (!string.IsNullOrEmpty(_rango))
                {
                    _ocomando.CommandText += " WHERE " + _rango;
                }

                using (NpgsqlDataReader oDataReader = _ocomando.ExecuteReader())
                {
                    Dictionary<string, string> diccionario = new Dictionary<string, string>();

                    while (oDataReader.Read())
                    {
                        diccionario.Anadir(Convert.ToString(oDataReader[0]), Convert.ToString(oDataReader[1]));
                    }

                    return diccionario;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region Funciones para comprobar valores en la rejilla

        /// <summary>
        /// Devuelve si el campo de una fila de la rejilla se encuentra vacío
        /// </summary>
        /// <param name="_rgvTabla">La rejilla que estamos comprobando</param>
        /// <param name="_nombreCampo">El nombre del campo</param>
        /// <returns></returns>
        public static bool RejillaCampoVacio(RadGridView _rgvTabla, string _nombreCampo)
        {
            return string.IsNullOrWhiteSpace(Convert.ToString(_rgvTabla.CurrentRow.Cells[_nombreCampo].Value));
        }

        /// <summary>
        /// Función que comprueba si una base de datos se encuentra creada
        /// </summary>
        /// <param name="_cDatabase">El nombre de la base de datos que queremos comprobar si existe</param>
        /// <returns>Si la base de datos existe</returns>
        public static bool ComprobarBDEXiste(string _cDatabase)
        {
            bool lCreada;

            // Generamos la cadena de conexión con la base de datos de postgres
            string cConexion = CadenaConexion("postgres");

            string cSQL = "SELECT COUNT(datname)" +
                         " FROM pg_database" +
                         " WHERE datname = :param0;";

            lCreada = SelectScalarEntero(cConexion, cSQL, _cDatabase) > 0;

            return lCreada;
        }

        #endregion

        /// <summary>
        /// Función que obtiene una lista con todas las columnas de la tabla
        /// </summary>
        /// <param name="cConexion">Cadena de conexión con la BD Postgres</param>
        /// <param name="cNombreTabla">Nombre de la tabla de la que obtener las columnas</param>
        /// <returns></returns>
        public static List<string> ObtenerColumnasTabla_List(string cConexion, string cNombreTabla)
        {
            try
            {
                List<string> acColumnasBD = new List<string>();
                string cSQL = "SELECT c.column_name" +
                            " FROM information_schema.columns c" +
                            " WHERE UPPER(c.table_name) = upper(:param0)" +
                            " ORDER BY c.ordinal_position ";

                using (NpgsqlConnection oConexion = new NpgsqlConnection(cConexion))
                {
                    using (NpgsqlCommand oComando = oConexion.CreateCommand())
                    {
                        oConexion.Open();
                        oComando.CommandText = cSQL;
                        oComando.Parameters.AddWithValue(":param0", cNombreTabla);
                        using (NpgsqlDataReader oDataReader = oComando.ExecuteReader())
                        {
                            while (oDataReader.Read())
                            {
                                if (oDataReader.GetString(0) != "fechainsert" && oDataReader.GetString(0) != "fechaupdate")
                                    acColumnasBD.Add(Convert.ToString(oDataReader.GetString(0)));
                            }
                        }
                    }
                }

                return acColumnasBD;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Función que obtiene un array con todas las columnas de la tabla
        /// </summary>
        /// <param name="cConexion">Cadena de conexión con la BD Postgres</param>
        /// <param name="cNombreTabla">Nombre de la tabla de la que obtener las columnas</param>
        /// <returns></returns>
        public static string[] ObtenerColumnasTabla_Array(string cConexion, string cNombreTabla)
        {
            return ObtenerColumnasTabla_List(cConexion, cNombreTabla).ToArray();
        }

        /// <summary>
        /// Función que genera la SQL para los Insert o los Update en función de los campos suministrados
        /// </summary>
        /// <param name="nModo">El modo de la pantalla ó 1 para Insert ó 2 para Update</param>
        /// <param name="cNombreTabla">El nombre de la tabla en la que queremos hacer el Insert o el Update</param>
        /// <param name="acClavePrimaria">Los campos de la clave primaria de la tabla</param>
        /// <param name="acNombreCampos">Los campos que queremos incluir en el Insert o el Update</param>
        /// <returns>Una consulta insert o update parametrizada</returns>
        public static string GenerarInsertUpdate(int nModo, string cNombreTabla, string[] acClavePrimaria, string[] acNombreCampos)
        {
            acNombreCampos = acNombreCampos.Where(c => c != null).ToArray();
            switch (nModo)
            {
                case ModoPantalla.INSERTAR:
                    return $"INSERT INTO {cNombreTabla} ({string.Join(", ", acNombreCampos)})" +
                          $" VALUES ({string.Join(", ", acNombreCampos.Select(c => ":param" + Array.IndexOf(acNombreCampos, c)))});";
                case ModoPantalla.MODIFICAR:
                    return $"UPDATE {cNombreTabla}" +
                          $" SET {string.Join(", ", acNombreCampos.Where(c => !acClavePrimaria.Contains(c)).Select(c => $"{c} = :param" + Array.IndexOf(acNombreCampos, c)))}" +
                          $" WHERE {string.Join(" AND ", acNombreCampos.Where(c => acClavePrimaria.Contains(c)).Select(c => $"{c} = :param" + Array.IndexOf(acNombreCampos, c)))};";
                default:
                    return "";
            }
        }

        /// <summary>
        /// Función que recupera un sólo valor de la base de datos pasándole el campo y la tabla
        /// </summary>
        /// <param name="cConexion">La cadena de conexión hacia la base de datos donde se encuentra el valor a buscar</param>
        /// <param name="cSelect">El nombre del campo que queremos recuperar</param>
        /// <param name="cFrom">El nombre de la tabla donde se encuentra el valor</param>
        /// <param name="cWhere">Parámetros adicionales para la consulta</param>
        /// <returns></returns>
        public static string SelectValor(string cConexion, string cSelect, string cFrom, string cWhere = null)
        {
            try
            {
                string cSQL;
                cSQL = cWhere.Vacio() ? $"SELECT {cSelect} FROM {cFrom};" : $"SELECT {cSelect} FROM {cFrom} WHERE {cWhere};";
                return SelectScalarCadena(cConexion, cSQL);
            }
            catch (Exception ex)
            {
                BRSLib.Logger.LogExcepcion(ex);
                return "";
            }
        }

        /// <summary>
        /// obtiene el campo indicado en la variable Select de la tabla indicada en la variable From
        /// a partir de la clave primaria indicada en la variable Where
        /// </summary>
        /// <param name="cSelect">nombre del campo</param>
        /// <param name="cFrom">nombre de la tabla</param>
        /// <param name="cWhere">condición de búsqueda</param>
        /// <param name="cWhere2"></param>
        /// <param name="cCadenaConexion">cadena de conexión; si es null usa sConexion</param>
        /// <returns>cadena conteniendo la SQL</returns>
        public static string ObtenerSQLPostgres(string cSelect, string cFrom, string cWhere, string cWhere2 = null, string cCadenaConexion = null)
        {
            // TODO Reemplazar gradualmente por BRSLibBD.SelectValor

            NpgsqlConnection oConexionPostgres = new NpgsqlConnection();
            if (cCadenaConexion == null) oConexionPostgres.ConnectionString = BRSLibBD.cConexionCentro; else oConexionPostgres.ConnectionString = cCadenaConexion;
            string cResultado = null;
            string cSQL = null;
            try
            {
                cSQL = "SELECT " + cSelect + " FROM " + cFrom + " WHERE " + cWhere + " ";
                //if (cWhere2 != null) cSQL += "AND " + cWhere2;
                if (!string.IsNullOrWhiteSpace(cWhere2)) cSQL += "AND " + cWhere2;

                NpgsqlCommand oComandoPostgres = new NpgsqlCommand(cSQL, oConexionPostgres);
                oConexionPostgres.Open();
                BRSLib.WriteLogDebug(AnalizarNpgsqlCommand(oComandoPostgres), "BRSLib", System.Reflection.MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, oComandoPostgres);

                cResultado = Convert.ToString(oComandoPostgres.ExecuteScalar());
                oConexionPostgres.Close();
            }
            catch (Exception ex)
            {
                BRSLib.WriteLogDebug("Error al obtener al obtener el valor de un campo", "BRSLib", System.Reflection.MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.ERROR_EXCEPCION, "", BRSLog.LINEAVACIA.NO, ex);

                BRSLib.MostrarMensaje(ex.Message + "\n\rBRSLib : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
            return cResultado;
        }

        /// <summary>
        /// obtiene el campo indicado en la variable Select de la tabla indicada en la variable From
        /// a partir de la clave primaria indicada en la variable Where
        /// </summary>
        /// <param name="cSelect">nombre del campo</param>
        /// <param name="cFrom">nombre de la tabla</param>
        /// <param name="cWhere">condición de búsqueda</param>
        /// <param name="cWhere2"></param>
        /// <param name="cCadenaConexion">cadena de conexión; si es null usa sConexion</param>
        /// <returns>cadena conteniendo la SQL</returns>
        public static string ObtenerSQLAccess(string cSelect, string cFrom, string cWhere, string cWhere2 = null, string cCadenaConexion = null)
        {
            // TODO Reemplazar gradualmente por BRSLibBD.SelectValor

            string cResultado = null;
            string cSQL = null;

            try
            {
                using (OleDbConnection oConexion = new OleDbConnection(cCadenaConexion))
                {
                    cSQL = "SELECT " + cSelect + " FROM " + cFrom + " WHERE " + cWhere + " ";
                    //if (cWhere2 != null) cSQL += "AND " + cWhere2;
                    if (!string.IsNullOrWhiteSpace(cWhere2)) cSQL += "AND " + cWhere2;
                    cSQL = cSQL.Trim() + ";";

                    using (OleDbCommand oComando = new OleDbCommand(cSQL, oConexion))
                    {
                        oConexion.Open();
                        BRSLib.WriteLogDebug(AnalizarOleDbCommand(oComando), "BRSLib", MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.CONSULTA, "", BRSLog.LINEAVACIA.NO, null, oComando);

                        cResultado = Convert.ToString(oComando.ExecuteScalar());
                    }
                    oConexion.Close();
                }
            }
            catch (Exception ex)
            {
                BRSLib.WriteLogDebug("Error al obtener al obtener el valor de un campo", "BRSLib", MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.ERROR_EXCEPCION, "", BRSLog.LINEAVACIA.NO, ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\rBRSLib : " + MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }

            return cResultado;
        }

        // BUG Descomentar función para volver a activar el unaccent
        //public static void EncontrarPostgres_GESTION(RadGridView rgvTabla, string cNombreTabla, string cNombreCodigo, string cNombreCodigo2 = null, string cCadenaConexion = null, string cOrderby = null, string cCondicion = null, string cNombreCodigo3 = null, string[] camposBuscar = null, bool mostrarNoEncontrados = true)
        //{
        //    try
        //    {
        //        string cSQL = null;
        //        cUltimosEncontrados = null;

        //        NpgsqlConnection oConexionPostgres = new NpgsqlConnection();
        //        if (cCadenaConexion == null) oConexionPostgres.ConnectionString = cConexionGR; else oConexionPostgres.ConnectionString = cCadenaConexion;
        //        NpgsqlDataReader oDataReaderPostgres = null;
        //        NpgsqlCommand oComandoPostgres = new NpgsqlCommand(cSQL, oConexionPostgres);

        //        Cursor.Current = Cursors.WaitCursor;
        //        Application.DoEvents();
        //        short x = 0; // contador de campos a consultar
        //        while (acCampos_ENCONTRAR[x] != null)
        //        {
        //            bool lEsHora = false;
        //            string cCampo = acCampos_ENCONTRAR[x];
        //            string cValor = acValores_ENCONTRAR[x];
        //            string cTipoCampo = acTipoCampos_ENCONTRAR[x];

        //            if (x > 0) cUltimosEncontrados += " AND "; //hay más de una condición

        //            if (cTipoCampo == "hora" || cTipoCampo == "horah" || cTipoCampo == "HORA" || cTipoCampo == "HORAH")
        //            {
        //                lEsHora = true;

        //                if (cValor.Contains(":"))
        //                    if (cValor.Split(':').Length == 2)
        //                        cValor += ":00";
        //            }


        //            if (cValor.Contains("*") || cValor.Contains("?")) // contiene * ó ?
        //            {
        //                cUltimosEncontrados += "(UNACCENT(UPPER(CAST(" + cCampo + " AS TEXT))) LIKE UNACCENT('" + cValor.ToUpper().Replace("*", "%").Replace("?", "_") + "%'))";
        //            }
        //            else if (cValor.Contains(":") && !lEsHora) // entre A y B
        //            {
        //                switch (cTipoCampo)
        //                {
        //                    case "2":
        //                        cUltimosEncontrados += "(" + cCampo + " BETWEEN " + RestaurarNumero(FormatearNumero(cValor.Split(':')[0], 6, false)) + " AND " + RestaurarNumero(FormatearNumero(cValor.Split(':')[1], 6, false)) + ")";
        //                        break;
        //                    case "3":
        //                        cUltimosEncontrados += "(" + cCampo + " BETWEEN " + GenerarFechaEncontrar(cValor.Split(':')[0]).Quoted() + " AND " + GenerarFechaEncontrar(cValor.Split(':')[1]).Quoted() + ")";
        //                        break;
        //                    case "4":
        //                        cUltimosEncontrados += "(UNACCENT(" + cCampo + ") BETWEEN UNACCENT(" + cValor.Split(':')[0].Quoted() + ") AND UNACCENT(" + cValor.Split(':')[1].Quoted() + "))";
        //                        break;
        //                    default:
        //                        cUltimosEncontrados += "(" + cCampo + " BETWEEN " + cValor.Split(':')[0] + " AND " + cValor.Split(':')[1] + ")";
        //                        break;

        //                }
        //            }
        //            else if (cValor.Contains("|")) // A,B,C...
        //            {
        //                string[] acPartes = cValor.Split('|');
        //                cUltimosEncontrados += "(";
        //                foreach (string cParte in acPartes)
        //                    if (cTipoCampo == "2")
        //                        cUltimosEncontrados += cCampo + " = " + RestaurarNumero(FormatearNumero(cParte, 6, false)) + " OR ";
        //                    else if (cTipoCampo == "3")
        //                        cUltimosEncontrados += cCampo + " = " + GenerarFechaEncontrar(cParte).Quoted() + " OR ";
        //                    else if (cTipoCampo == "4" || lEsHora)
        //                        cUltimosEncontrados += "UNACCENT(" + cCampo + ") = UNACCENT(" + cParte.Quoted() + ") OR ";
        //                    else
        //                        cUltimosEncontrados += cCampo + " = " + cParte + " OR ";
        //                // quitamos el último OR y cerramos paréntesis
        //                cUltimosEncontrados = cUltimosEncontrados.Substring(0, cUltimosEncontrados.Length - 3) + ")";
        //            }
        //            else if (cValor.Contains("<>")) // A <> B
        //            {
        //                if (cTipoCampo == "2")
        //                    cUltimosEncontrados += "(" + cCampo + " <> " + RestaurarNumero(FormatearNumero(cValor.Split('>')[1], 6, false)) + ")";
        //                else if (cTipoCampo == "3")
        //                    cUltimosEncontrados += "(" + cCampo + "<>" + GenerarFechaEncontrar(cValor.Split('>')[1]).Quoted() + ")";
        //                else if (cTipoCampo == "4" || lEsHora)
        //                    cUltimosEncontrados += "(UNACCENT(" + cCampo + ")<>UNACCENT(" + cValor.Split('>')[1].Quoted() + "))";
        //                else
        //                    cUltimosEncontrados += "(" + cCampo + "<>" + (cValor.Split('>')[1]) + ")";
        //            }
        //            else if (cValor.Contains(">=")) // A >= B
        //            {
        //                if (cTipoCampo == "2")
        //                    cUltimosEncontrados += "(" + cCampo + ">= " + RestaurarNumero(FormatearNumero(cValor.Split('=')[1], 6, false)) + ")";
        //                else if (cTipoCampo == "3")
        //                    cUltimosEncontrados += "(" + cCampo + ">=" + GenerarFechaEncontrar(cValor.Split('=')[1]).Quoted() + ")";
        //                else if (cTipoCampo == "4" || lEsHora)
        //                    cUltimosEncontrados += "(UNACCENT(" + cCampo + ")>=UNACCENT(" + cValor.Split('=')[1].Quoted() + "))";
        //                else
        //                    cUltimosEncontrados += "(" + cCampo + ">=" + (cValor.Split('=')[1]) + ")";
        //            }
        //            else if (cValor.Contains(">")) // A > B
        //            {
        //                if (cTipoCampo == "2")
        //                    cUltimosEncontrados += "(" + cCampo + " > " + RestaurarNumero(FormatearNumero(cValor.Split('>')[1], 6, false)) + ")";
        //                else if (cTipoCampo == "3")
        //                    cUltimosEncontrados += "(" + cCampo + ">" + GenerarFechaEncontrar(cValor.Split('>')[1]).Quoted() + ")";
        //                else if (cTipoCampo == "4" || lEsHora)
        //                    cUltimosEncontrados += "(UNACCENT(" + cCampo + ")>UNACCENT(" + cValor.Split('>')[1].Quoted() + "))";
        //                else
        //                    cUltimosEncontrados += "(" + cCampo + ">" + cValor.Split('>')[1] + ")";
        //            }
        //            else if (cValor.Contains("<=")) // A <= B
        //            {
        //                if (cTipoCampo == "2")
        //                    cUltimosEncontrados += "(" + cCampo + "<=" + RestaurarNumero(FormatearNumero(cValor.Split('=')[1], 6, false)) + ")";
        //                else if (cTipoCampo == "3")
        //                    cUltimosEncontrados += "(" + cCampo + "<=" + GenerarFechaEncontrar(cValor.Split('=')[1]).Quoted() + ")";
        //                else if (cTipoCampo == "4" || lEsHora)
        //                    cUltimosEncontrados += "(UNACCENT(" + cCampo + ") <= UNACCENT(" + cValor.Split('=')[1].Quoted() + "))";
        //                else
        //                    cUltimosEncontrados += "(" + cCampo + "<=" + (cValor.Split('=')[1]) + ")";
        //            }
        //            else if (cValor.Contains("<")) // A < B
        //            {
        //                if (cTipoCampo == "2")
        //                    cUltimosEncontrados += "(" + cCampo + "<" + RestaurarNumero(FormatearNumero(cValor.Split('<')[1], 6, false)) + ")";
        //                else if (cTipoCampo == "3")
        //                    cUltimosEncontrados += "(" + cCampo + "<" + GenerarFechaEncontrar(cValor.Split('<')[1]).Quoted() + ")";
        //                else if (cTipoCampo == "4" || lEsHora)
        //                    cUltimosEncontrados += "(UNACCENT(" + cCampo + ") < UNACCENT(" + cValor.Split('<')[1].Quoted() + "))";
        //                else
        //                    cUltimosEncontrados += "(" + cCampo + "<" + cValor.Split('<')[1] + ")";
        //            }
        //            else if (cValor.Contains(" IN ")) // IN
        //            {
        //                if (cValor.Contains(" NOT ")) // NOT IN
        //                {
        //                    if (cTipoCampo == "4")
        //                    {
        //                        cUltimosEncontrados += "(UNACCENT(" + cCampo + ") NOT IN UNACCENT(" + cValor.Substring(cValor.IndexOf(" NOT IN ") + 8).Quoted() + "))";
        //                    }
        //                    else
        //                    {
        //                        cUltimosEncontrados += "(" + cCampo + " NOT IN" + cValor.Substring(cValor.IndexOf(" NOT IN ") + 8) + ")";
        //                    }
        //                }
        //                else
        //                {
        //                    if (cTipoCampo == "4")
        //                    {
        //                        cUltimosEncontrados += "(UNACCENT(" + cCampo + ") IN UNACCENT(" + cValor.Substring(cValor.IndexOf(" IN ") + 4).Quoted() + "))";
        //                    }
        //                    else
        //                    {
        //                        cUltimosEncontrados += "(" + cCampo + " IN" + cValor.Substring(cValor.IndexOf(" IN ") + 4) + ")";
        //                    }
        //                }
        //            }
        //            else if (cValor.Contains("=NULL") || cValor.Contains("=null") || cValor.Contains("null") || cValor.Contains("NULL")) // is null
        //            {
        //                cUltimosEncontrados += "(" + cCampo + " IS null" + ")";
        //            }
        //            else //asignación directa
        //            {
        //                if (cTipoCampo == "2")
        //                    cUltimosEncontrados += "(" + cCampo + "= " + RestaurarNumero(FormatearNumero(cValor, 6, false)) + ")";
        //                else if (cTipoCampo == "3")
        //                    cUltimosEncontrados += "(" + cCampo + "= " + GenerarFechaEncontrar(cValor).Quoted() + ")";
        //                else if (cTipoCampo == "4")
        //                    cUltimosEncontrados += "(UNACCENT(" + cCampo + ") = UNACCENT(" + cValor.Quoted() + "))";
        //                else if (cTipoCampo.ToUpper() == "HORA")
        //                    cUltimosEncontrados += "(" + cCampo + "= " + FormatearHora(cValor).Quoted() + ")";
        //                else
        //                    cUltimosEncontrados += "(" + cCampo + "= " + cValor + ")";
        //            }
        //            x++;
        //        }

        //        //construímos la SQL
        //        if (camposBuscar == null)
        //        {
        //            if (x == 0)
        //            {
        //                cSQL = "SELECT * FROM " + cNombreTabla;
        //                if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " WHERE " + cCondicion;
        //            }
        //            else
        //            {
        //                cSQL = "SELECT * FROM " + cNombreTabla + " WHERE " + cUltimosEncontrados;
        //                if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " AND " + cCondicion;
        //            }
        //        }
        //        else
        //        // Si trae un array de campos a buscar construimos el select con dichos campos
        //        {
        //            string aux = "SELECT ";
        //            for (int i = 0; i < camposBuscar.Length; i++)
        //            {
        //                if (camposBuscar[i] != null)
        //                {
        //                    if (i != 0)
        //                        aux += ", ";
        //                    aux += camposBuscar[i];
        //                }
        //            }
        //            aux += " FROM ";

        //            if (x == 0)
        //            {
        //                cSQL = aux + cNombreTabla;
        //                if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " WHERE " + cCondicion;
        //            }
        //            else
        //            {
        //                cSQL = aux + cNombreTabla + " WHERE " + cUltimosEncontrados;
        //                if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " AND " + cCondicion;
        //            }
        //        }

        //        if (cOrderby != null)
        //            cSQL += " ORDER BY " + cOrderby;
        //        else if (cNombreCodigo != null)
        //        {
        //            cSQL += " ORDER BY " + cNombreCodigo;
        //            if (cNombreCodigo2 != null)
        //            {
        //                cSQL += ", " + cNombreCodigo2;
        //                if (cNombreCodigo3 != null) cSQL += ", " + cNombreCodigo3;
        //            }
        //        }

        //        BRSLib.WriteLogDebug(cSQL, "BRSLib", "EncontrarPostres_Gestion", BRSLog.PALABRA_CLAVE.ENCONTRAR, "", BRSLog.LINEAVACIA.NO, null, oComandoPostgres);
        //        oComandoPostgres.CommandText = cSQL;
        //        oConexionPostgres.Open();
        //        oDataReaderPostgres = oComandoPostgres.ExecuteReader();

        //        if (oDataReaderPostgres.HasRows)
        //        {
        //            rgvTabla.MasterTemplate.LoadFrom(oDataReaderPostgres);
        //            oDataReaderPostgres.Close();
        //            oConexionPostgres.Close();

        //            Cursor.Current = Cursors.Default;
        //            Application.DoEvents();
        //        }
        //        else
        //        {
        //            Cursor.Current = Cursors.Default;
        //            Application.DoEvents();

        //            oDataReaderPostgres.Close();
        //            oConexionPostgres.Close();

        //            if (mostrarNoEncontrados)
        //            {
        //                BRSLib.CalcularIntervalo(BRSLib.AccionWatch.PAUSE);
        //                BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
        //                BRSLib.CalcularIntervalo(BRSLib.AccionWatch.PAUSE);
        //            }
        //        }
        //    }
        //    catch (NpgsqlException ex)
        //    {
        //        if (ex.Code == "22007" || ex.Code == "22008")
        //        // Si el error capturado es el error provocado por formato de fecha incorrecto
        //        {
        //            // Mostramos el mensaje de cancelación
        //            Cursor.Current = Cursors.Default;
        //            Application.DoEvents();

        //            BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado + "\nFormato de fecha incorrecto.", " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
        //        }
        //        else
        //        // Si fue otro error
        //        {
        //            // Mostramos un mensaje genérico
        //            Cursor.Current = Cursors.Default;
        //            Application.DoEvents();

        //            BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado + "; " + ex.Message, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        Cursor.Current = Cursors.Default;
        //        Application.DoEvents();

        //        BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado + "; " + ex.Message, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
        //    }
        //}

        public static Task EncontrarPostgres_GESTIONAsync(RadGridView rgvTabla, string cNombreTabla, string cNombreCodigo,
            string cNombreCodigo2 = null, string cCadenaConexion = null, string cOrderby = null,
            string cCondicion = null, string cNombreCodigo3 = null, string[] camposBuscar = null,
            bool mostrarNoEncontrados = true)
        {
            return Task.Run(() => EncontrarPostgres_GESTION(rgvTabla, cNombreTabla, cNombreCodigo,
                cNombreCodigo2, cCadenaConexion, cOrderby, cCondicion, cNombreCodigo3, camposBuscar,
                mostrarNoEncontrados));
        }

        public static void EncontrarPostgres_GESTION(RadGridView rgvTabla, string cNombreTabla, string cNombreCodigo, string cNombreCodigo2 = null, string cCadenaConexion = null, string cOrderby = null, string cCondicion = null, string cNombreCodigo3 = null, string[] camposBuscar = null, bool mostrarNoEncontrados = true)
        {
            try
            {
                string cSQL = null;
                BRSLib.cUltimosEncontrados = null;

                NpgsqlConnection oConexionPostgres = new NpgsqlConnection(cCadenaConexion);
                NpgsqlDataReader oDataReaderPostgres = null;
                NpgsqlCommand oComandoPostgres = new NpgsqlCommand(cSQL, oConexionPostgres);

                Cursor.Current = Cursors.WaitCursor;
                Application.DoEvents();
                short x = 0; // contador de campos a consultar
                while (BRSLib.acCampos_ENCONTRAR[x] != null)
                {
                    bool lEsHora = false;
                    string cCampo = BRSLib.acCampos_ENCONTRAR[x];
                    string cValor = BRSLib.acValores_ENCONTRAR[x];
                    string cTipoCampo = BRSLib.acTipoCampos_ENCONTRAR[x];

                    if (x > 0) BRSLib.cUltimosEncontrados += " AND "; //hay más de una condición

                    if (cTipoCampo == "hora" || cTipoCampo == "horah" || cTipoCampo == "HORA" || cTipoCampo == "HORAH")
                    {
                        lEsHora = true;

                        if (cValor.Contains(":"))
                            if (cValor.Split(':').Length == 2)
                                cValor += ":00";
                    }


                    if (cValor.Contains("*") || cValor.Contains("?")) // contiene * ó ?
                    {
                        BRSLib.cUltimosEncontrados += "(UPPER(CAST(" + cCampo + " AS TEXT)) LIKE '" + cValor.ToUpper().Replace("*", "%").Replace("?", "_") + "%')";
                    }
                    else if (cValor.Contains(":") && !lEsHora) // entre A y B
                    {
                        switch (cTipoCampo)
                        {
                            case "2":
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " BETWEEN " + cValor.Split(':')[0].FormatearNumero(6, false).RestaurarNumero() + " AND " + cValor.Split(':')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                                break;
                            case "3":
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " BETWEEN " + BRSLib.GenerarFechaEncontrar(cValor.Split(':')[0]).Quoted() + " AND " + BRSLib.GenerarFechaEncontrar(cValor.Split(':')[1]).Quoted() + ")";
                                break;
                            case "4":
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " BETWEEN " + cValor.Split(':')[0].Quoted() + " AND " + cValor.Split(':')[1].Quoted() + ")";
                                break;
                            default:
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " BETWEEN " + cValor.Split(':')[0] + " AND " + cValor.Split(':')[1] + ")";
                                break;

                        }
                    }
                    else if (cValor.Contains("|")) // A,B,C...
                    {
                        string[] acPartes = cValor.Split('|');
                        BRSLib.cUltimosEncontrados += "(";
                        foreach (string cParte in acPartes)
                            if (cTipoCampo == "2")
                                BRSLib.cUltimosEncontrados += cCampo + " = " + cParte.FormatearNumero(6, false).RestaurarNumero() + " OR ";
                            else if (cTipoCampo == "3")
                                BRSLib.cUltimosEncontrados += cCampo + " = " + BRSLib.GenerarFechaEncontrar(cParte).Quoted() + " OR ";
                            else if (cTipoCampo == "4" || lEsHora)
                                BRSLib.cUltimosEncontrados += cCampo + " = " + cParte.Quoted() + " OR ";
                            else
                                BRSLib.cUltimosEncontrados += cCampo + " = " + cParte + " OR ";
                        // quitamos el último OR y cerramos paréntesis
                        BRSLib.cUltimosEncontrados = BRSLib.cUltimosEncontrados.Substring(0, BRSLib.cUltimosEncontrados.Length - 3) + ")";
                    }
                    else if (cValor.Contains("<>")) // A <> B
                    {
                        if (cTipoCampo.ToUpper() == "COLUMNA")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + " <> " + cValor.Split('>')[1] + ")";
                        else if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + " <> " + cValor.Split('>')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<>" + BRSLib.GenerarFechaEncontrar(cValor.Split('>')[1]).Quoted() + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<>" + cValor.Split('>')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<>" + (cValor.Split('>')[1]) + ")";
                    }
                    else if (cValor.Contains(">=")) // A >= B
                    {
                        if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">= " + cValor.Split('=')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">=" + BRSLib.GenerarFechaEncontrar(cValor.Split('=')[1]).Quoted() + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">=" + cValor.Split('=')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">=" + (cValor.Split('=')[1]) + ")";
                    }
                    else if (cValor.Contains(">")) // A > B
                    {
                        if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + " > " + cValor.Split('>')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">" + BRSLib.GenerarFechaEncontrar(cValor.Split('>')[1]).Quoted() + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">" + cValor.Split('>')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">" + cValor.Split('>')[1] + ")";
                    }
                    else if (cValor.Contains("<=")) // A <= B
                    {
                        if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<=" + cValor.Split('=')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<=" + BRSLib.GenerarFechaEncontrar(cValor.Split('=')[1]).Quoted() + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<=" + cValor.Split('=')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<=" + (cValor.Split('=')[1]) + ")";
                    }
                    else if (cValor.Contains("<")) // A < B
                    {
                        if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<" + cValor.Split('<')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<" + BRSLib.GenerarFechaEncontrar(cValor.Split('<')[1]).Quoted() + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<" + cValor.Split('<')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<" + cValor.Split('<')[1] + ")";
                    }
                    else if (cValor.Contains(" IN ")) // IN
                    {
                        if (cValor.Contains(" NOT ")) // NOT IN
                        {
                            if (cTipoCampo == "4")
                            {
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " NOT IN " + (cValor.Substring(cValor.IndexOf(" NOT IN ") + 8)).Quoted() + ")";
                            }
                            else
                            {
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " NOT IN" + cValor.Substring(cValor.IndexOf(" NOT IN ") + 8) + ")";
                            }
                        }
                        else
                        {
                            if (cTipoCampo == "4")
                            {
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " IN " + (cValor.Substring(cValor.IndexOf(" IN ") + 4)).Quoted() + ")";
                            }
                            else
                            {
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " IN" + cValor.Substring(cValor.IndexOf(" IN ") + 4) + ")";
                            }
                        }
                    }
                    else if (cValor.Contains("=NULL") || cValor.Contains("=null") || cValor.Contains("null") || cValor.Contains("NULL")) // is null
                    {
                        BRSLib.cUltimosEncontrados += "(" + cCampo + " IS null" + ")";
                    }
                    else //asignación directa
                    {
                        if (cTipoCampo.ToUpper() == "COLUMNA")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + cValor + ")";
                        else if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + cValor.FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + BRSLib.GenerarFechaEncontrar(cValor).Quoted() + ")";
                        else if (cTipoCampo == "4")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + cValor.Quoted() + ")";
                        else if (cTipoCampo.ToUpper() == "HORA")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + BRSLib.FormatearHora(cValor).Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + cValor + ")";
                    }
                    x++;
                }

                //construímos la SQL
                if (camposBuscar == null)
                {
                    if (x == 0)
                    {
                        cSQL = "SELECT * FROM " + cNombreTabla;
                        if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " WHERE " + cCondicion;
                    }
                    else
                    {
                        cSQL = "SELECT * FROM " + cNombreTabla + " WHERE " + BRSLib.cUltimosEncontrados;
                        if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " AND " + cCondicion;
                    }
                }
                else
                // Si trae un array de campos a buscar construimos el select con dichos campos
                {
                    string aux = "SELECT ";
                    for (int i = 0; i < camposBuscar.Length; i++)
                    {
                        if (camposBuscar[i] != null)
                        {
                            if (i != 0)
                                aux += ", ";
                            aux += camposBuscar[i];
                        }
                    }
                    aux += " FROM ";

                    if (x == 0)
                    {
                        cSQL = aux + cNombreTabla;
                        if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " WHERE " + cCondicion;
                    }
                    else
                    {
                        cSQL = aux + cNombreTabla + " WHERE " + BRSLib.cUltimosEncontrados;
                        if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " AND " + cCondicion;
                    }
                }

                if (cOrderby != null)
                    cSQL += " ORDER BY " + cOrderby;
                else if (cNombreCodigo != null)
                {
                    cSQL += " ORDER BY " + cNombreCodigo;
                    if (cNombreCodigo2 != null)
                    {
                        cSQL += ", " + cNombreCodigo2;
                        if (cNombreCodigo3 != null) cSQL += ", " + cNombreCodigo3;
                    }
                }

                BRSLib.WriteLogDebug(cSQL, "BRSLib", "EncontrarPostres_Gestion", BRSLog.PALABRA_CLAVE.ENCONTRAR, "", BRSLog.LINEAVACIA.NO, null, oComandoPostgres);
                oComandoPostgres.CommandText = cSQL;
                oConexionPostgres.Open();
                oDataReaderPostgres = oComandoPostgres.ExecuteReader();

                if (oDataReaderPostgres.HasRows)
                {
                    rgvTabla.MasterTemplate.LoadFrom(oDataReaderPostgres);
                    oDataReaderPostgres.Close();
                    oConexionPostgres.Close();

                    Cursor.Current = Cursors.Default;
                    Application.DoEvents();
                }
                else
                {
                    Cursor.Current = Cursors.Default;
                    Application.DoEvents();

                    oDataReaderPostgres.Close();
                    oConexionPostgres.Close();

                    if (mostrarNoEncontrados)
                    {
                        BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
                    }
                }
            }
            catch (NpgsqlException ex)
            {
                if (ex.Code == "22007" || ex.Code == "22008")
                // Si el error capturado es el error provocado por formato de fecha incorrecto
                {
                    // Mostramos el mensaje de cancelación
                    Cursor.Current = Cursors.Default;
                    Application.DoEvents();

                    BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado + "\nFormato de fecha incorrecto.", " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
                }
                else
                // Si fue otro error
                {
                    // Mostramos un mensaje genérico
                    Cursor.Current = Cursors.Default;
                    Application.DoEvents();

                    BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado + "; " + ex.Message, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
                }
            }
            catch (Exception ex)
            {
                Cursor.Current = Cursors.Default;
                Application.DoEvents();

                BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado + "; " + ex.Message, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
            }
        }

        public static void EncontrarPostgres_GESTION(RadGridView rgvTabla, string cNombreTabla, string cNombreCodigo, string cNombreCodigo2, NpgsqlCommand oComando, string cOrderby = null, string cCondicion = null, string cNombreCodigo3 = null, string[] camposBuscar = null, bool mostrarNoEncontrados = true, string cCondicionOR = null, bool porJoin = false)
        {
            try
            {
                string cSQL = null;
                BRSLib.cUltimosEncontrados = null;
                NpgsqlDataReader oDataReaderPostgres;

                Cursor.Current = Cursors.WaitCursor;
                Application.DoEvents();
                short x = 0; // contador de campos a consultar
                while (BRSLib.acCampos_ENCONTRAR[x] != null)
                {
                    bool lEsHora = false;
                    string cCampo = BRSLib.acCampos_ENCONTRAR[x];
                    string cValor = BRSLib.acValores_ENCONTRAR[x];
                    string cTipoCampo = BRSLib.acTipoCampos_ENCONTRAR[x];

                    if (x > 0) BRSLib.cUltimosEncontrados += " AND "; //hay más de una condición

                    if (cTipoCampo == "hora" || cTipoCampo == "horah" || cTipoCampo == "HORA" || cTipoCampo == "HORAH")
                    {
                        lEsHora = true;

                        if (cValor.Contains(":"))
                            if (cValor.Split(':').Length == 2)
                                cValor += ":00";
                    }


                    if (cValor.Contains("*") || cValor.Contains("?")) // contiene * ó ?
                    {
                        BRSLib.cUltimosEncontrados += "(UPPER(CAST(" + cCampo + " AS TEXT)) LIKE '" + cValor.ToUpper().Replace("*", "%").Replace("?", "_") + "%')";
                    }
                    else if (cValor.Contains(":") && !lEsHora) // entre A y B
                    {
                        switch (cTipoCampo)
                        {
                            case "2":
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " BETWEEN " + cValor.Split(':')[0].FormatearNumero(6, false).RestaurarNumero() + " AND " + cValor.Split(':')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                                break;
                            case "3":
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " BETWEEN " + BRSLib.GenerarFechaEncontrar(cValor.Split(':')[0]).Quoted() + " AND " + BRSLib.GenerarFechaEncontrar(cValor.Split(':')[1]).Quoted() + ")";
                                break;
                            case "4":
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " BETWEEN " + cValor.Split(':')[0].Quoted() + ") AND " + cValor.Split(':')[1].Quoted() + ")";
                                break;
                            default:
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " BETWEEN " + cValor.Split(':')[0] + " AND " + cValor.Split(':')[1] + ")";
                                break;

                        }
                    }
                    else if (cValor.Contains("|") && !cValor.Contains("||")) // A,B,C...
                    {
                        string[] acPartes = cValor.Split('|');
                        BRSLib.cUltimosEncontrados += "(";
                        foreach (string cParte in acPartes)
                            if (cTipoCampo == "2")
                                BRSLib.cUltimosEncontrados += cCampo + " = " + cParte.FormatearNumero(6, false).RestaurarNumero() + " OR ";
                            else if (cTipoCampo == "3")
                                BRSLib.cUltimosEncontrados += cCampo + " = " + BRSLib.GenerarFechaEncontrar(cParte).Quoted() + " OR ";
                            else if (cTipoCampo == "4" || lEsHora)
                                BRSLib.cUltimosEncontrados += cCampo + " = " + cParte.Quoted() + " OR ";
                            else
                                BRSLib.cUltimosEncontrados += cCampo + " = " + cParte + " OR ";
                        // quitamos el último OR y cerramos paréntesis
                        BRSLib.cUltimosEncontrados = BRSLib.cUltimosEncontrados.Substring(0, BRSLib.cUltimosEncontrados.Length - 3) + ")";
                    }
                    else if (cValor.Contains("<>")) // A <> B
                    {
                        if (cTipoCampo.ToUpper() == "COLUMNA")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + " <> " + cValor.Split('>')[1] + ")";
                        else if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + " <> " + cValor.Split('>')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<>" + BRSLib.GenerarFechaEncontrar(cValor.Split('>')[1]).Quoted() + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<>" + cValor.Split('>')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<>" + (cValor.Split('>')[1]) + ")";
                    }
                    else if (cValor.Contains(">=")) // A >= B
                    {
                        if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">= " + cValor.Split('=')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">=" + BRSLib.GenerarFechaEncontrar(cValor.Split('=')[1]).Quoted() + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">=" + cValor.Split('=')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">=" + (cValor.Split('=')[1]) + ")";
                    }
                    else if (cValor.Contains(">")) // A > B
                    {
                        if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + " > " + cValor.Split('>')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">" + BRSLib.GenerarFechaEncontrar(cValor.Split('>')[1]).Quoted() + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">" + cValor.Split('>')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">" + cValor.Split('>')[1] + ")";
                    }
                    else if (cValor.Contains("<=")) // A <= B
                    {
                        if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<=" + cValor.Split('=')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<=" + BRSLib.GenerarFechaEncontrar(cValor.Split('=')[1]).Quoted() + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<=" + cValor.Split('=')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<=" + (cValor.Split('=')[1]) + ")";
                    }
                    else if (cValor.Contains("<")) // A < B
                    {
                        if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<" + cValor.Split('<')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<" + BRSLib.GenerarFechaEncontrar(cValor.Split('<')[1]).Quoted() + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<" + cValor.Split('<')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<" + cValor.Split('<')[1] + ")";
                    }
                    else if (cValor.Contains(" IN ")) // IN
                    {
                        if (cValor.Contains(" NOT ")) // NOT IN
                        {
                            if (cTipoCampo == "4")
                            {
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " NOT IN " + (cValor.Substring(cValor.IndexOf(" NOT IN ") + 8)).Quoted() + ")";
                            }
                            else
                            {
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " NOT IN" + cValor.Substring(cValor.IndexOf(" NOT IN ") + 8) + ")";
                            }
                        }
                        else
                        {
                            if (cTipoCampo == "4")
                            {
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " IN " + (cValor.Substring(cValor.IndexOf(" IN ") + 4)).Quoted() + ")";
                            }
                            else
                            {
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " IN" + cValor.Substring(cValor.IndexOf(" IN ") + 4) + ")";
                            }
                        }
                    }
                    else if (cValor.ToUpper().Contains("=NULL") || cValor.ToUpper().Contains("NULL")) // is null
                    {
                        if (cValor.ToUpper().Contains("NOT ")) BRSLib.cUltimosEncontrados += "(" + cCampo + " IS NOT null" + ")";
                        else BRSLib.cUltimosEncontrados += "(" + cCampo + " IS null" + ")";
                    }
                    else //asignación directa
                    {
                        if (cTipoCampo.ToUpper() == "COLUMNA")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + cValor + ")";
                        else if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + cValor.FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + BRSLib.GenerarFechaEncontrar(cValor).Quoted() + ")";
                        else if (cTipoCampo == "4")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + cValor.Quoted() + ")";
                        else if (cTipoCampo.ToUpper() == "HORA")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + BRSLib.FormatearHora(cValor).Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + cValor + ")";
                    }
                    x++;
                }

                //construímos la SQL
                if (camposBuscar == null)
                {
                    if (!porJoin)
                    {
                        if (x == 0)
                        {
                            cSQL = "SELECT * FROM " + cNombreTabla;
                            if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " WHERE " + cCondicion;
                        }
                        else
                        {
                            cSQL = "SELECT * FROM " + cNombreTabla + " WHERE " + BRSLib.cUltimosEncontrados;
                            if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " AND " + cCondicion;
                        }
                    }
                    else
                    {
                        if (x == 0)
                        {
                            cSQL = "SELECT DISTINCT * FROM " + cNombreTabla;
                            if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " WHERE " + cCondicion;
                        }
                        else
                        {
                            cSQL = "SELECT DISTINCT * FROM " + cNombreTabla + " WHERE " + BRSLib.cUltimosEncontrados;
                            if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " AND " + cCondicion;
                        }
                    }
                }
                else
                // Si trae un array de campos a buscar construimos el select con dichos campos
                {
                    string aux = "SELECT ";
                    if (porJoin)
                        aux += "DISTINCT ";
                    for (int i = 0; i < camposBuscar.Length; i++)
                    {
                        if (camposBuscar[i] != null)
                        {
                            if (i != 0)
                                aux += ", ";
                            aux += camposBuscar[i];
                        }
                    }
                    aux += " FROM ";

                    if (x == 0)
                    {
                        cSQL = aux + cNombreTabla;
                        if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " WHERE " + cCondicion;
                        else if (!string.IsNullOrWhiteSpace(cCondicionOR)) cSQL += " WHERE " + cCondicionOR;
                    }
                    else
                    {
                        cSQL = aux + cNombreTabla + " WHERE " + BRSLib.cUltimosEncontrados;
                        if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " AND " + cCondicion;
                        else if (!string.IsNullOrWhiteSpace(cCondicionOR)) cSQL += " OR " + cCondicionOR;

                    }
                }

                if (cOrderby != null)
                    cSQL += " ORDER BY " + cOrderby;
                else if (cNombreCodigo != null)
                {
                    cSQL += " ORDER BY " + cNombreCodigo;
                    if (cNombreCodigo2 != null)
                    {
                        cSQL += ", " + cNombreCodigo2;
                        if (cNombreCodigo3 != null) cSQL += ", " + cNombreCodigo3;
                    }
                }

                BRSLib.WriteLogDebug(cSQL, "BRSLib", "EncontrarPostres_Gestion", BRSLog.PALABRA_CLAVE.ENCONTRAR, "", BRSLog.LINEAVACIA.NO, null, oComando);
                oComando.CommandText = cSQL;
                oDataReaderPostgres = oComando.ExecuteReader();

                if (oDataReaderPostgres.HasRows)
                {
                    rgvTabla.MasterTemplate.LoadFrom(oDataReaderPostgres);
                    oDataReaderPostgres.Close();

                    Cursor.Current = Cursors.Default;
                    Application.DoEvents();
                }
                else
                {
                    Cursor.Current = Cursors.Default;
                    Application.DoEvents();

                    oDataReaderPostgres.Close();

                    if (mostrarNoEncontrados)
                    {
                        BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
                    }
                }
            }
            catch (NpgsqlException ex)
            {
                if (ex.Code == "22007" || ex.Code == "22008")
                // Si el error capturado es el error provocado por formato de fecha incorrecto
                {
                    // Mostramos el mensaje de cancelación
                    Cursor.Current = Cursors.Default;
                    Application.DoEvents();

                    BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado + "\nFormato de fecha incorrecto.", " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
                }
                else if (ex.Code == "57014")
                { // Si el error es porque el usuario cancelo el proceso
                    // No hacemos nada
                }
                else
                // Si fue otro error
                {
                    // Mostramos un mensaje genérico
                    Cursor.Current = Cursors.Default;
                    Application.DoEvents();

                    BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado + "; " + ex.Message, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
                }
            }
            catch (Exception ex)
            {
                Cursor.Current = Cursors.Default;
                Application.DoEvents();

                BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado + "; " + ex.Message, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
            }
        }

        public static void EncontrarAccess(RadGridView rgvTabla, string cNombreTabla, string cNombreCodigo, string cNombreCodigo2 = null, string cCadenaConexion = null, string cOrderby = null, string cCondicion = null, string cNombreCodigo3 = null, string[] camposBuscar = null, bool mostrarNoEncontrados = true)
        {
            try
            {
                string cSQL = null;
                BRSLib.cUltimosEncontrados = null;

                OleDbConnection oConexion = new OleDbConnection(cCadenaConexion);
                OleDbDataReader oDataReader = null;
                OleDbCommand oComando = new OleDbCommand(cSQL, oConexion);

                Cursor.Current = Cursors.WaitCursor;
                Application.DoEvents();
                short x = 0; // contador de campos a consultar
                while (BRSLib.acCampos_ENCONTRAR[x] != null)
                {
                    bool lEsHora = false;
                    string cCampo = BRSLib.acCampos_ENCONTRAR[x];
                    string cValor = BRSLib.acValores_ENCONTRAR[x];
                    string cTipoCampo = BRSLib.acTipoCampos_ENCONTRAR[x];

                    if (x > 0) BRSLib.cUltimosEncontrados += " AND "; //hay más de una condición

                    if (cTipoCampo == "hora" || cTipoCampo == "horah" || cTipoCampo == "HORA" || cTipoCampo == "HORAH")
                    {
                        lEsHora = true;

                        if (cValor.Contains(":"))
                            if (cValor.Split(':').Length == 2)
                                cValor += ":00";
                    }


                    if (cValor.Contains("*") || cValor.Contains("?")) // contiene * ó ?
                    {
                        BRSLib.cUltimosEncontrados += "(UCase(" + cCampo + ") LIKE '" + cValor.ToUpper().Replace("*", "%").Replace("?", "_") + "%')";
                    }
                    else if (cValor.Contains(":") && !lEsHora) // entre A y B
                    {
                        switch (cTipoCampo)
                        {
                            case "2":
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " BETWEEN " + cValor.Split(':')[0].FormatearNumero(6, false).RestaurarNumero() + " AND " + cValor.Split(':')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                                break;
                            case "3":
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " BETWEEN " + BRSLib.GenerarFechaEncontrarAccess(cValor.Split(':')[0]) + " AND " + BRSLib.GenerarFechaEncontrarAccess(cValor.Split(':')[1]) + ")";
                                break;
                            case "4":
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " BETWEEN " + cValor.Split(':')[0].Quoted() + " AND " + cValor.Split(':')[1].Quoted() + ")";
                                break;
                            default:
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " BETWEEN " + cValor.Split(':')[0] + " AND " + cValor.Split(':')[1] + ")";
                                break;

                        }
                    }
                    else if (cValor.Contains("|")) // A,B,C...
                    {
                        string[] acPartes = cValor.Split('|');
                        BRSLib.cUltimosEncontrados += "(";
                        foreach (string cParte in acPartes)
                            if (cTipoCampo == "2")
                                BRSLib.cUltimosEncontrados += cCampo + " = " + cParte.FormatearNumero(6, false).RestaurarNumero() + " OR ";
                            else if (cTipoCampo == "3")
                                BRSLib.cUltimosEncontrados += cCampo + " = " + BRSLib.GenerarFechaEncontrarAccess(cParte) + " OR ";
                            else if (cTipoCampo == "4" || lEsHora)
                                BRSLib.cUltimosEncontrados += cCampo + " = " + cParte.Quoted() + " OR ";
                            else
                                BRSLib.cUltimosEncontrados += cCampo + " = " + cParte + " OR ";
                        // quitamos el último OR y cerramos paréntesis
                        BRSLib.cUltimosEncontrados = BRSLib.cUltimosEncontrados.Substring(0, BRSLib.cUltimosEncontrados.Length - 3) + ")";
                    }
                    else if (cValor.Contains("<>")) // A <> B
                    {
                        if (cTipoCampo.ToUpper() == "COLUMNA")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + " <> " + cValor.Split('>')[1] + ")";
                        else if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + " <> " + cValor.Split('>')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<>" + BRSLib.GenerarFechaEncontrarAccess(cValor.Split('>')[1]) + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<>" + cValor.Split('>')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<>" + (cValor.Split('>')[1]) + ")";
                    }
                    else if (cValor.Contains(">=")) // A >= B
                    {
                        if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">= " + cValor.Split('=')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">=" + BRSLib.GenerarFechaEncontrarAccess(cValor.Split('=')[1]) + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">=" + cValor.Split('=')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">=" + (cValor.Split('=')[1]) + ")";
                    }
                    else if (cValor.Contains(">")) // A > B
                    {
                        if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + " > " + cValor.Split('>')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">" + BRSLib.GenerarFechaEncontrarAccess(cValor.Split('>')[1]) + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">" + cValor.Split('>')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + ">" + cValor.Split('>')[1] + ")";
                    }
                    else if (cValor.Contains("<=")) // A <= B
                    {
                        if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<=" + cValor.Split('=')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<=" + BRSLib.GenerarFechaEncontrarAccess(cValor.Split('=')[1]) + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<=" + cValor.Split('=')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<=" + (cValor.Split('=')[1]) + ")";
                    }
                    else if (cValor.Contains("<")) // A < B
                    {
                        if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<" + cValor.Split('<')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<" + BRSLib.GenerarFechaEncontrarAccess(cValor.Split('<')[1]) + ")";
                        else if (cTipoCampo == "4" || lEsHora)
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<" + cValor.Split('<')[1].Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "<" + cValor.Split('<')[1] + ")";
                    }
                    else if (cValor.Contains(" IN ")) // IN
                    {
                        if (cValor.Contains(" NOT ")) // NOT IN
                        {
                            if (cTipoCampo == "4")
                            {
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " NOT IN " + (cValor.Substring(cValor.IndexOf(" NOT IN ") + 8)).Quoted() + ")";
                            }
                            else
                            {
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " NOT IN" + cValor.Substring(cValor.IndexOf(" NOT IN ") + 8) + ")";
                            }
                        }
                        else
                        {
                            if (cTipoCampo == "4")
                            {
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " IN " + (cValor.Substring(cValor.IndexOf(" IN ") + 4)).Quoted() + ")";
                            }
                            else
                            {
                                BRSLib.cUltimosEncontrados += "(" + cCampo + " IN" + cValor.Substring(cValor.IndexOf(" IN ") + 4) + ")";
                            }
                        }
                    }
                    else if (cValor.Contains("=NULL") || cValor.Contains("=null") || cValor.Contains("null") || cValor.Contains("NULL")) // is null
                    {
                        BRSLib.cUltimosEncontrados += "(" + cCampo + " IS null" + ")";
                    }
                    else //asignación directa
                    {
                        if (cTipoCampo.ToUpper() == "COLUMNA")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + cValor + ")";
                        else if (cTipoCampo == "2")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + cValor.FormatearNumero(6, false).RestaurarNumero() + ")";
                        else if (cTipoCampo == "3")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + BRSLib.GenerarFechaEncontrarAccess(cValor) + ")";
                        else if (cTipoCampo == "4")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + cValor.Quoted() + ")";
                        else if (cTipoCampo.ToUpper() == "HORA")
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + BRSLib.FormatearHora(cValor).Quoted() + ")";
                        else
                            BRSLib.cUltimosEncontrados += "(" + cCampo + "= " + cValor + ")";
                    }
                    x++;
                }

                //construímos la SQL
                if (camposBuscar == null)
                {
                    if (x == 0)
                    {
                        cSQL = "SELECT * FROM " + cNombreTabla;
                        if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " WHERE " + cCondicion;
                    }
                    else
                    {
                        cSQL = "SELECT * FROM " + cNombreTabla + " WHERE " + BRSLib.cUltimosEncontrados;
                        if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " AND " + cCondicion;
                    }
                }
                else
                // Si trae un array de campos a buscar construimos el select con dichos campos
                {
                    string aux = "SELECT ";
                    for (int i = 0; i < camposBuscar.Length; i++)
                    {
                        if (camposBuscar[i] != null)
                        {
                            if (i != 0)
                                aux += ", ";
                            aux += camposBuscar[i];
                        }
                    }
                    aux += " FROM ";

                    if (x == 0)
                    {
                        cSQL = aux + cNombreTabla;
                        if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " WHERE " + cCondicion;
                    }
                    else
                    {
                        cSQL = aux + cNombreTabla + " WHERE " + BRSLib.cUltimosEncontrados;
                        if (!string.IsNullOrWhiteSpace(cCondicion)) cSQL += " AND " + cCondicion;
                    }
                }

                if (cOrderby != null)
                    cSQL += " ORDER BY " + cOrderby;
                else if (cNombreCodigo != null)
                {
                    cSQL += " ORDER BY " + cNombreCodigo;
                    if (cNombreCodigo2 != null)
                    {
                        cSQL += ", " + cNombreCodigo2;
                        if (cNombreCodigo3 != null) cSQL += ", " + cNombreCodigo3;
                    }
                }
                cSQL += ";";

                BRSLib.WriteLogDebug(cSQL, "BRSLib", MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.ENCONTRAR, "", BRSLog.LINEAVACIA.NO, null, oComando);
                oComando.CommandText = cSQL;
                oConexion.Open();
                oDataReader = oComando.ExecuteReader();

                if (oDataReader.HasRows)
                {
                    rgvTabla.MasterTemplate.LoadFrom(oDataReader);
                    oDataReader.Close();
                    oConexion.Close();

                    Cursor.Current = Cursors.Default;
                    Application.DoEvents();
                }
                else
                {
                    Cursor.Current = Cursors.Default;
                    Application.DoEvents();

                    rgvTabla.MasterTemplate.Rows.Clear();
                    oDataReader.Close();
                    oConexion.Close();

                    if (mostrarNoEncontrados)
                    {
                        BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
                    }
                }
            }
            catch (NpgsqlException ex)
            {
                if (ex.Code == "22007" || ex.Code == "22008")
                // Si el error capturado es el error provocado por formato de fecha incorrecto
                {
                    // Mostramos el mensaje de cancelación
                    Cursor.Current = Cursors.Default;
                    Application.DoEvents();

                    BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado + "\nFormato de fecha incorrecto.", " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
                }
                else
                // Si fue otro error
                {
                    // Mostramos un mensaje genérico
                    Cursor.Current = Cursors.Default;
                    Application.DoEvents();

                    BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado + "; " + ex.Message, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
                }
            }
            catch (Exception ex)
            {
                Cursor.Current = Cursors.Default;
                Application.DoEvents();

                BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistroEncontrado + "; " + ex.Message, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
            }
        }

        public static string GenerarWhereEncontrar()
        {
            string cWhere = null;
            short x = 0; // contador de campos a consultar
            while (BRSLib.acCampos_ENCONTRAR[x] != null)
            {
                bool lEsHora = false;
                string cCampo = BRSLib.acCampos_ENCONTRAR[x];
                string cValor = BRSLib.acValores_ENCONTRAR[x];
                string cTipoCampo = BRSLib.acTipoCampos_ENCONTRAR[x];

                if (x > 0) cWhere += " AND "; //hay más de una condición

                if (cTipoCampo == "hora" || cTipoCampo == "horah" || cTipoCampo == "HORA" || cTipoCampo == "HORAH")
                {
                    lEsHora = true;

                    if (cValor.Contains(":"))
                        if (cValor.Split(':').Length == 2)
                            cValor += ":00";
                }


                if (cValor.Contains("*") || cValor.Contains("?")) // contiene * ó ?
                {
                    cWhere += "(UPPER(CAST(" + cCampo + " AS TEXT)) LIKE '" + cValor.ToUpper().Replace("*", "%").Replace("?", "_") + "%')";
                }
                else if (cValor.Contains(":") && !lEsHora) // entre A y B
                {
                    switch (cTipoCampo)
                    {
                        case "2":
                            cWhere += "(" + cCampo + " BETWEEN " + cValor.Split(':')[0].FormatearNumero(6, false).RestaurarNumero() + " AND " + cValor.Split(':')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                            break;
                        case "3":
                            cWhere += "(" + cCampo + " BETWEEN " + BRSLib.GenerarFechaEncontrar(cValor.Split(':')[0]).Quoted() + " AND " + BRSLib.GenerarFechaEncontrar(cValor.Split(':')[1]).Quoted() + ")";
                            break;
                        case "4":
                            cWhere += "(" + cCampo + " BETWEEN " + cValor.Split(':')[0].Quoted() + ") AND " + cValor.Split(':')[1].Quoted() + ")";
                            break;
                        default:
                            cWhere += "(" + cCampo + " BETWEEN " + cValor.Split(':')[0] + " AND " + cValor.Split(':')[1] + ")";
                            break;

                    }
                }
                else if (cValor.Contains("|")) // A,B,C...
                {
                    string[] acPartes = cValor.Split('|');
                    cWhere += "(";
                    foreach (string cParte in acPartes)
                        if (cTipoCampo == "2")
                            cWhere += cCampo + " = " + cParte.FormatearNumero(6, false).RestaurarNumero() + " OR ";
                        else if (cTipoCampo == "3")
                            cWhere += cCampo + " = " + BRSLib.GenerarFechaEncontrar(cParte).Quoted() + " OR ";
                        else if (cTipoCampo == "4" || lEsHora)
                            cWhere += cCampo + " = " + cParte.Quoted() + " OR ";
                        else
                            cWhere += cCampo + " = " + cParte + " OR ";
                    // quitamos el último OR y cerramos paréntesis
                    cWhere = cWhere.Substring(0, cWhere.Length - 3) + ")";
                }
                else if (cValor.Contains("<>")) // A <> B
                {
                    if (cTipoCampo.ToUpper() == "COLUMNA")
                        cWhere += "(" + cCampo + " <> " + cValor.Split('>')[1] + ")";
                    else if (cTipoCampo == "2")
                        cWhere += "(" + cCampo + " <> " + cValor.Split('>')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                    else if (cTipoCampo == "3")
                        cWhere += "(" + cCampo + "<>" + BRSLib.GenerarFechaEncontrar(cValor.Split('>')[1]).Quoted() + ")";
                    else if (cTipoCampo == "4" || lEsHora)
                        cWhere += "(" + cCampo + "<>" + cValor.Split('>')[1].Quoted() + ")";
                    else
                        cWhere += "(" + cCampo + "<>" + (cValor.Split('>')[1]) + ")";
                }
                else if (cValor.Contains(">=")) // A >= B
                {
                    if (cTipoCampo == "2")
                        cWhere += "(" + cCampo + ">= " + cValor.Split('=')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                    else if (cTipoCampo == "3")
                        cWhere += "(" + cCampo + ">=" + BRSLib.GenerarFechaEncontrar(cValor.Split('=')[1]).Quoted() + ")";
                    else if (cTipoCampo == "4" || lEsHora)
                        cWhere += "(" + cCampo + ">=" + cValor.Split('=')[1].Quoted() + ")";
                    else
                        cWhere += "(" + cCampo + ">=" + (cValor.Split('=')[1]) + ")";
                }
                else if (cValor.Contains(">")) // A > B
                {
                    if (cTipoCampo == "2")
                        cWhere += "(" + cCampo + " > " + cValor.Split('>')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                    else if (cTipoCampo == "3")
                        cWhere += "(" + cCampo + ">" + BRSLib.GenerarFechaEncontrar(cValor.Split('>')[1]).Quoted() + ")";
                    else if (cTipoCampo == "4" || lEsHora)
                        cWhere += "(" + cCampo + ">" + cValor.Split('>')[1].Quoted() + ")";
                    else
                        cWhere += "(" + cCampo + ">" + cValor.Split('>')[1] + ")";
                }
                else if (cValor.Contains("<=")) // A <= B
                {
                    if (cTipoCampo == "2")
                        cWhere += "(" + cCampo + "<=" + cValor.Split('=')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                    else if (cTipoCampo == "3")
                        cWhere += "(" + cCampo + "<=" + BRSLib.GenerarFechaEncontrar(cValor.Split('=')[1]).Quoted() + ")";
                    else if (cTipoCampo == "4" || lEsHora)
                        cWhere += "(" + cCampo + "<=" + cValor.Split('=')[1].Quoted() + ")";
                    else
                        cWhere += "(" + cCampo + "<=" + (cValor.Split('=')[1]) + ")";
                }
                else if (cValor.Contains("<")) // A < B
                {
                    if (cTipoCampo == "2")
                        cWhere += "(" + cCampo + "<" + cValor.Split('<')[1].FormatearNumero(6, false).RestaurarNumero() + ")";
                    else if (cTipoCampo == "3")
                        cWhere += "(" + cCampo + "<" + BRSLib.GenerarFechaEncontrar(cValor.Split('<')[1]).Quoted() + ")";
                    else if (cTipoCampo == "4" || lEsHora)
                        cWhere += "(" + cCampo + "<" + cValor.Split('<')[1].Quoted() + ")";
                    else
                        cWhere += "(" + cCampo + "<" + cValor.Split('<')[1] + ")";
                }
                else if (cValor.Contains(" IN ")) // IN
                {
                    if (cValor.Contains(" NOT ")) // NOT IN
                    {
                        if (cTipoCampo == "4")
                        {
                            cWhere += "(" + cCampo + " NOT IN " + (cValor.Substring(cValor.IndexOf(" NOT IN ") + 8)).Quoted() + ")";
                        }
                        else
                        {
                            cWhere += "(" + cCampo + " NOT IN" + cValor.Substring(cValor.IndexOf(" NOT IN ") + 8) + ")";
                        }
                    }
                    else
                    {
                        if (cTipoCampo == "4")
                        {
                            cWhere += "(" + cCampo + " IN " + (cValor.Substring(cValor.IndexOf(" IN ") + 4)).Quoted() + ")";
                        }
                        else
                        {
                            cWhere += "(" + cCampo + " IN" + cValor.Substring(cValor.IndexOf(" IN ") + 4) + ")";
                        }
                    }
                }
                else if (cValor.ToUpper().Contains("=NULL") || cValor.ToUpper().Contains("NULL")) // is null
                {
                    if (cValor.ToUpper().Contains("NOT ")) cWhere += "(" + cCampo + " IS NOT null" + ")";
                    else cWhere += "(" + cCampo + " IS null" + ")";
                }
                else //asignación directa
                {
                    if (cTipoCampo.ToUpper() == "COLUMNA")
                        cWhere += "(" + cCampo + "= " + cValor + ")";
                    else if (cTipoCampo == "2")
                        cWhere += "(" + cCampo + "= " + cValor.FormatearNumero(6, false).RestaurarNumero() + ")";
                    else if (cTipoCampo == "3")
                        cWhere += "(" + cCampo + "= " + BRSLib.GenerarFechaEncontrar(cValor).Quoted() + ")";
                    else if (cTipoCampo == "4")
                        cWhere += "(" + cCampo + "= " + cValor.Quoted() + ")";
                    else if (cTipoCampo.ToUpper() == "HORA")
                        cWhere += "(" + cCampo + "= " + BRSLib.FormatearHora(cValor).Quoted() + ")";
                    else
                        cWhere += "(" + cCampo + "= " + cValor + ")";
                }
                x++;
            }

            return cWhere;
        }


        public static IDbConnection CrearConexion(string cConexion)
        {
            if (cConexion.StartsWith("Provider="))
            {
                return new OleDbConnection(cConexion);
            }
            else
            {
                return new NpgsqlConnection(cConexion);
            }
        }
    }
}