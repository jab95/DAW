using Ionic.Zip;
using Newtonsoft.Json;
using Npgsql;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;

namespace BRSActReyes
{
    public partial class frmPrincipal : Form
    {
        #region Nombres de procesos

        /// <summary>Nombre de los distintos procesos para saber que aplicaciones debe cerrar el actualizador</summary>
        public class NombresProcesos
        {
            public const string BRSACT = "BRSAct";
            public const string BRSERPREYES = "BRSERPREYES";
            public const string BRSLIB = "BRSLib";
        }

        #endregion

        #region Variables

        /// <summary>Ruta local hacia la carpeta donde se encuentran los archivos ejecutables de Postgres</summary>
        readonly string cRutaFichero_pg_dump = Application.StartupPath + "\\Apps Externas\\Postgres\\";
        /// <summary>Versión de Postres utilizadas para buscar en la ruta de los ejecutables de Postgres</summary>
        readonly string cVERSION_POSTGRES = "9.3";

        /// <summary>Formulario que muestra los ficheros de ayuda</summary>
        frmAyuda ofrmAyuda;
        /// <summary>Nombre del fichero de ayuda</summary>
        string cFicheroAyuda = "actualizador.html";
        /// <summary>Nombre del fichero que guarda el histórico de versiones</summary>
        string cFicheroHistorico = "historico.json";
        /// <summary>Variable de control para ejecutar un proceso una sola vez</summary>
        bool lPrimeraVez = true;

        /// <summary>Lista de archivos a ejecutar</summary>
        List<ArchivosUpdateBD> aoArchivosUpdateBD;

        /// <summary>Prefijo para las copias de seguridad</summary>
        const string cPrefijoBak = "BRS_bak_";
        /// <summary>Prefijo para los archivos temporales</summary>
        const string cPrefijoTmp = "bktmp_";
        /// <summary>Formato para las fechas</summary>
        const string cFormatoFecha = "ddMMyyyy";
        /// <summary>Formato para las fechas y horas</summary>
        const string cFormatoFecha_Hora = "ddMMyyyy_HHmmss";

        /// <summary>Fecha formateada en la que se inició el proceso de actualización</summary>
        readonly string cFecha = System.DateTime.Now.ToString(cFormatoFecha);
        /// <summary>Fecha y hora formateada en la que se inición el proceso de actualización</summary>
        readonly string cFecha_Hora = System.DateTime.Now.ToString(cFormatoFecha_Hora);

        /// <summary>Prefijo para el comentario de las BBDD</summary>
        const string cPrefijoComentarioBBDD = "BBDD ";

        /// <summary>Ruta donde se almacenarán los ficheros temporales</summary>
        string directorioTemporal;

        /// <summary>Lista de ficheros DLL que se reemplazarán con la actualización</summary>
        readonly string[] acFicherosDLL = { "BRSLib", "SEPA", "Mono.Security", "Npgsql", "Npgsql.resources", "Newtonsoft.Json", "SuministroInmediatoInformacion" };

        /// <summary>Variable de control que indica si el proceso de actualización se encuentra en ejecución</summary>
        bool lActualizando;

        /// <summary>Variable de control que indica si hubo algún error durante el proceso de actualización</summary>
        bool lERROR;

        /// <summary>Modo de actualización</summary>
        enum ModoActualizacion
        {
            /// <summary>Cambios en la versión del módulo actualizador</summary>
            BRSAct,
            /// <summary>Cambios en BRSLib o en las BBDD</summary>
            BRSLib
        };

        #endregion

        #region Formulario

        /// <summary>
        /// Constructor
        /// </summary>
        public frmPrincipal()
        {
            InitializeComponent();

            string[] acVersion = Assembly.GetExecutingAssembly().GetName().Version.ToString().Split('.');
            string cVersion = string.Join(".", acVersion.Select(c => c.PadLeft(2, '0')));
            Text = "BRSAct Versión " + cVersion;

            MaximumSize = MinimumSize = Size;
        }

        /// <summary>
        /// Evento activated
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void frmPrincipal_Activated(object sender, EventArgs e)
        {
            if (lPrimeraVez)
            { // Si es la primera vez que se activa la ventana
                lPrimeraVez = false;
                progressBar1.Maximum = 15000; // Para un ZIP de 30 MB. aproximadamente

                // Deshabilitamos la botonera
                opcionesToolStripMenuItem.Enabled = false;
                tsbAyuda.Enabled = false;
                tsbSalir.Enabled = false;

                // Iniciamos el proceso de actualización
                lActualizando = true;
                backgroundWorker1.RunWorkerAsync();
            }
        }

        #endregion

        #region Menu

        private void mnuAcercaDe_Click(object sender, EventArgs e)
        {
            using (frmAcercaDe ofrmAcercaDe = new frmAcercaDe())
            {
                ofrmAcercaDe.ShowDialog();
            }
        }

        private void mnuAyuda_Click(object sender, EventArgs e)
        {
            ofrmAyuda = new frmAyuda(cFicheroAyuda);
            ofrmAyuda.Show();
        }

        private void mnuSalir_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        #endregion

        #region Métodos privados

        /// <summary>
        /// Inicia el proceso de actualización
        /// </summary>
        private void Actualizar()
        {
            try
            {
                // Recogemos el primer módulo para comprobar si es BRSAct o BRSLib y establecer el modo de actualización
                Modulo oPrimerModulo = Program.acListaModulosActualizar[0];
                ModoActualizacion? eModoActualizacion = null;
                switch (oPrimerModulo.Nombre)
                {
                    case "BRSAct": eModoActualizacion = ModoActualizacion.BRSAct; break;
                    case "BRSLib": eModoActualizacion = ModoActualizacion.BRSLib; break;
                    default: break;
                }

                // Iniciamos las variables necesarias
                List<string> aoHistoricoVersiones = new List<string>();
                lERROR = false;

                // Lanzamos las funciones de actualización
                MostrarInformacionInicial(eModoActualizacion, oPrimerModulo);
                VerificarRequisitosIniciales(ref aoHistoricoVersiones);
                ObtenerArchivoZipDelFTP(eModoActualizacion, oPrimerModulo);
                ObtenerArchivoSQLDelFTP(eModoActualizacion, oPrimerModulo, aoHistoricoVersiones);
                ObtenerArchivoZipDelServidor(eModoActualizacion, oPrimerModulo);
                RealizarBackupArchivos();
                DetenerProcesos();
                LanzarConsultasSQL(eModoActualizacion);
                ReemplazarArchivos(eModoActualizacion, oPrimerModulo);
                GrabarVersionEnXML();
                ActualizarMostrarAcercaDe();
                MostrarMensajeFinal(eModoActualizacion);
            }
            finally
            {
                if (!string.IsNullOrWhiteSpace(Program.cRutaBackup))
                { // Si se especificó la ruta de copias de seguridad
                    if (Directory.Exists(Program.cRutaBackup))
                    { // Si la ruta existe
                        IEnumerable<string> acArchivosTmp = Directory.EnumerateFiles(Program.cRutaBackup, cPrefijoTmp + "*");
                        foreach (String cArchivo in acArchivosTmp)
                        { // Por cada archivo que empieza por el prefijo de archivos temporales
                            string cRuta = Path.GetDirectoryName(cArchivo);
                            string cNombre = Path.GetFileNameWithoutExtension(cArchivo);
                            string cExtension = Path.GetExtension(cArchivo);
                            string cNuevoNombre = Path.Combine(cRuta, cNombre.Substring(cPrefijoTmp.Length) + System.DateTime.Now.ToString("_HHmmss") + cExtension);
                            Logs.WriteLogDebug("Movemos " + cArchivo + " a " + cNuevoNombre, MethodBase.GetCurrentMethod().Name);
                            File.Move(cArchivo, cNuevoNombre);
                        }
                    }

                    // Limitamos a 5 las carpetas dentro del directorio de backup
                    Program.cRutaBackup = Program.cRutaBackup.Replace(cPrefijoBak + cFecha_Hora, "");
                    while (Directory.GetDirectories(Program.cRutaBackup, cPrefijoBak + "*").Length > 5)
                    { // Mientras existan más de 5 directorios en la ruta de las copias de seguridad que empiecen por el prefijo de copias
                        string cCarpetaABorrar = null;
                        DateTime? oFecha = null;

                        IEnumerable<string> acCarpetasBackup = Directory.GetDirectories(Program.cRutaBackup, cPrefijoBak + "*");

                        foreach (string cArchivo in acCarpetasBackup)
                        {
                            string cNombre = Path.GetFileNameWithoutExtension(cArchivo);
                            DateTime oFechaAux = DateTime.ParseExact(cNombre.Split('_')[2] + "_" + cNombre.Split('_')[3], cFormatoFecha_Hora, System.Globalization.CultureInfo.InvariantCulture);

                            if (oFecha == null || oFechaAux.CompareTo(oFecha) < 0)
                                oFecha = oFechaAux;
                        }

                        if (oFecha != null)
                            cCarpetaABorrar = Program.cRutaBackup + "\\" + cPrefijoBak + String.Format("{0:" + cFormatoFecha_Hora + "}", oFecha);

                        if (!string.IsNullOrWhiteSpace(cCarpetaABorrar) && Directory.Exists(cCarpetaABorrar))
                        {
                            Logs.WriteLogDebug("Borramos la carpeta " + cCarpetaABorrar + " por ser la más antigua", MethodBase.GetCurrentMethod().Name);
                            Directory.Delete(cCarpetaABorrar, true);
                        }
                    }
                }

                if (File.Exists(Application.StartupPath + "\\Temp\\" + cFicheroHistorico))
                {
                    Logs.WriteLogDebug("Si existe el fichero " + Application.StartupPath + "\\Temp\\" + cFicheroHistorico + " lo borramos", MethodBase.GetCurrentMethod().Name);
                    File.Delete(Application.StartupPath + "\\Temp\\" + cFicheroHistorico);
                }
            }

            Logs.WriteLogDebug("Finaliza proceso de actualización", MethodBase.GetCurrentMethod().Name);
        }

        /// <summary>
        /// Función que muestra el mensaje inicial del actualizador
        /// </summary>
        /// <param name="eModoActualizacion">El modo de actualización</param>
        /// <param name="oPrimerModulo">El primer módulo a actualizar</param>
        private void MostrarInformacionInicial(ModoActualizacion? eModoActualizacion, Modulo oPrimerModulo)
        {
            Logs.WriteLogDebug("INFORMACIÓN INICIAL", MethodBase.GetCurrentMethod().Name, -1);

            backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "----------------------------------------------------------------------");
            backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Fecha de inicio: " + DateTime.Now.ToShortDateString());
            backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Hora de inicio: " + DateTime.Now.ToShortTimeString());

            Logs.WriteLogDebug("Mostramos el nombre de los módulos y sus versiones a actualizar", MethodBase.GetCurrentMethod().Name);
            if (eModoActualizacion == ModoActualizacion.BRSLib)
            { // Si se trata de actualizar la aplicación
                backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "BRSERPREYES -> Versión a actualizar: ");
                backgroundWorker1.ReportProgress(TipoReporte.AppendTextNegrita, oPrimerModulo.VersionNueva);
                Logs.WriteLogDebug("Actualizar aplicación completa " + oPrimerModulo.VersionActual + " a " + oPrimerModulo.VersionNueva, MethodBase.GetCurrentMethod().Name);
            }
            else
            { // Si se trata de actualizar X módulos
                foreach (Modulo oModulo in Program.acListaModulosActualizar)
                {
                    backgroundWorker1.ReportProgress(TipoReporte.AppendLine, oModulo.Nombre + " -> Versión a actualizar: ");
                    backgroundWorker1.ReportProgress(TipoReporte.AppendTextNegrita, oModulo.VersionNueva);
                    Logs.WriteLogDebug("Actualizar " + oModulo.Nombre + " " + oPrimerModulo.VersionActual + " a " + oPrimerModulo.VersionNueva, MethodBase.GetCurrentMethod().Name);
                }
            }

            if (Program.nTerminal != 1)
            {
                backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Aplicación en el servidor: " + Program.cRutaServidor);
            }
            backgroundWorker1.ReportProgress(TipoReporte.BreakLine);
            backgroundWorker1.ReportProgress(TipoReporte.BreakLine);
        }

        /// <summary>
        /// Función que comprueba los requisitios antes de iniciar el proceso, como comprobar si las carpetas están creadas
        /// </summary>
        /// <param name="aoHistoricoVersiones">La lista de versiones a actualizar</param>
        private void VerificarRequisitosIniciales(ref List<string> aoHistoricoVersiones)
        {
            Logs.WriteLogDebug("VERIFICANDO REQUISITOS INICIALES", MethodBase.GetCurrentMethod().Name, -1);

            backgroundWorker1.ReportProgress(TipoReporte.AppendText, "Verificando requisitos iniciales: ");
            try
            {
                directorioTemporal = Application.StartupPath + "\\Temp";

                Logs.WriteLogDebug("Comprueba si existe el directorio " + directorioTemporal, MethodBase.GetCurrentMethod().Name);
                if (!Directory.Exists(Application.StartupPath + "\\Temp"))
                {
                    Logs.WriteLogDebug("Crea el directorio " + directorioTemporal, MethodBase.GetCurrentMethod().Name);
                    Directory.CreateDirectory(Application.StartupPath + "\\Temp");
                }

                Program.cRutaBackup = Application.StartupPath + "\\Backup";
                Logs.WriteLogDebug("Comprueba si existe el directorio " + Program.cRutaBackup, MethodBase.GetCurrentMethod().Name);
                if (!Directory.Exists(Application.StartupPath + "\\Backup"))
                {
                    Logs.WriteLogDebug("Crea el directorio " + Program.cRutaBackup, MethodBase.GetCurrentMethod().Name);
                    Directory.CreateDirectory(Application.StartupPath + "\\Backup");
                }

                Logs.WriteLogDebug("Comprueba si existe el fichero " + directorioTemporal + cFicheroHistorico, MethodBase.GetCurrentMethod().Name);
                if (!File.Exists(Application.StartupPath + "\\Temp\\" + cFicheroHistorico))
                {
                    if (!DescargarArchivoTempFTP(Program.cServidorFTP, Program.cUsuarioFTP, Program.cPassFTP, "ACTFTP/BRSERPReyes", cFicheroHistorico))
                    {
                        backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se pudo obtener el archivo " + cFicheroHistorico + " del FTP");
                        lERROR = true;
                    }
                }

                if (!lERROR)
                {
                    // Cargamos lista histórico de versiones
                    using (StreamReader oReader = new StreamReader(Application.StartupPath + "\\Temp\\" + cFicheroHistorico))
                    {
                        string cJSON = oReader.ReadToEnd();
                        aoHistoricoVersiones = JsonConvert.DeserializeObject<List<string>>(cJSON);
                        Logs.WriteLogDebug("Lee el archivo " + cFicheroHistorico + " y lo deserializa", MethodBase.GetCurrentMethod().Name);
                    }

                    backgroundWorker1.ReportProgress(TipoReporte.AppendOk);
                }
            }
            catch (Exception ex)
            {
                backgroundWorker1.ReportProgress(TipoReporte.AppendLine, ex.Message);
                Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name, 0, ex);
                Logs.WriteLineException(ex);
                lERROR = true;
            }
            Application.DoEvents();
        }

        /// <summary>
        /// Función que recoge del FTP los archivos ejecutables de actualización
        /// </summary>
        /// <param name="eModoActualizacion">El modo de actualización</param>
        /// <param name="oPrimerModulo">El primer módulo a actualizar</param>
        private void ObtenerArchivoZipDelFTP(ModoActualizacion? eModoActualizacion, Modulo oPrimerModulo)
        {
            Logs.WriteLogDebug("OBTENER ARCHIVO ZIP / EJECUTABLES DEL FTP", MethodBase.GetCurrentMethod().Name, -1);

            if (!lERROR && Program.nTerminal == 1)
            {
                Logs.WriteLogDebug("Si estamos en el servidor", MethodBase.GetCurrentMethod().Name);
                if (eModoActualizacion == ModoActualizacion.BRSLib)
                {
                    Logs.WriteLogDebug("Si estamos actualizando la aplicación completa", MethodBase.GetCurrentMethod().Name);
                    Logs.WriteLogDebug("Descargando el archivo de la actualización completa del FTP", MethodBase.GetCurrentMethod().Name);
                    string cNombreArchivo = oPrimerModulo.VersionNuevaSinPunto() + ".zip";
                    
                    backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Obteniendo archivo " + cNombreArchivo + " del servidor FTP: ");
                    Application.DoEvents();

                    try
                    {
                        if (DescargarArchivoTempFTP(Program.cServidorFTP, Program.cUsuarioFTP, Program.cPassFTP, "/ACTFTP/BRSERPReyes/Actual/", cNombreArchivo))
                        {
                            Application.DoEvents();
                            backgroundWorker1.ReportProgress(TipoReporte.AppendOk);
                        }
                        else
                        {
                            backgroundWorker1.ReportProgress(TipoReporte.AppendError);
                            lERROR = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        backgroundWorker1.ReportProgress(TipoReporte.AppendLine, ex.Message);
                        Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name);
                        Logs.WriteLineException(ex);
                        lERROR = true;
                    }
                }
                else
                {
                    Logs.WriteLogDebug("Si estamos actualizando solo algunos módulos", MethodBase.GetCurrentMethod().Name);
                    foreach (Modulo oModulo in Program.acListaModulosActualizar)
                    {
                        Logs.WriteLogDebug("Descargando el archivo de la actualización de " + oModulo.Nombre + " del FTP", MethodBase.GetCurrentMethod().Name);

                        string cNombreArchivo = oModulo.Nombre + ".exe";
                        backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Obteniendo archivo " + cNombreArchivo + " del servidor FTP: ");
                        Application.DoEvents();

                        try
                        {
                            //copia los archivos EXE nuevos del FTP a la carpeta /Temp
                            if (DescargarArchivoTempFTP(Program.cServidorFTP, Program.cUsuarioFTP, Program.cPassFTP, "/ACTFTP/BRSERPReyes/Actual/", cNombreArchivo))
                            {
                                Application.DoEvents();
                                backgroundWorker1.ReportProgress(TipoReporte.AppendOk);
                            }
                            else
                            {
                                backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se pudo obtener el archivo " + cNombreArchivo + " del FTP");
                                lERROR = true;
                            }
                        }
                        catch (Exception ex)
                        {
                            backgroundWorker1.ReportProgress(TipoReporte.AppendLine, ex.Message);
                            Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name);
                            Logs.WriteLineException(ex);
                            lERROR = true;
                        }
                    }
                }
                Application.DoEvents();
            }
        }

        /// <summary>
        /// Función que recoge del FTP los archivos ejecutables de actualización
        /// </summary>
        /// <param name="eModoActualizacion">El modo de actualización</param>
        /// <param name="oPrimerModulo">El primer módulo a actualizar</param>
        /// <param name="aoHistoricoVersiones">Lista con las versiones</param>
        private void ObtenerArchivoSQLDelFTP(ModoActualizacion? eModoActualizacion, Modulo oPrimerModulo, List<string> aoHistoricoVersiones)
        {
            if (!lERROR && Program.nTerminal == 1)
            {
                if (eModoActualizacion == ModoActualizacion.BRSLib)
                {
                    Logs.WriteLogDebug("OBTENER ARCHIVOS SQL / INFORMES DEL FTP", MethodBase.GetCurrentMethod().Name, -1);
                    Logs.WriteLogDebug("Descargando archivos SQL e informes de la actualización completa del FTP", MethodBase.GetCurrentMethod().Name);
                    // Crearemos un archivo por cada salto de versión/revisión
                    int nVersionActual = Convert.ToInt32(oPrimerModulo.VersionActualSinPunto());
                    int nVersionNueva = Convert.ToInt32(oPrimerModulo.VersionNuevaSinPunto());


                    try
                    {
                        aoArchivosUpdateBD = new List<ArchivosUpdateBD>();
                        for (int i = nVersionActual + 1; i <= nVersionNueva; i++)
                        {
                            if (aoHistoricoVersiones.Contains(i.ToString("D8")))
                            {
                                string cVersion = i.ToString("D8");
                                string cCarpetaPadre = cVersion.Substring(0, 4);
                                string cCarpetaVersion = cVersion.Substring(0, 6);
                                string cNombreArchivo = "sql_" + cVersion + ".zip";

                                Logs.WriteLogDebug("Se actualizarán SQL e informes del archivo " + cNombreArchivo, MethodBase.GetCurrentMethod().Name);
                                aoArchivosUpdateBD.Add(new ArchivosUpdateBD(cCarpetaPadre, cCarpetaVersion, cNombreArchivo, cVersion));
                            }
                        }

                        backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Obteniendo archivos SQL / informes del servidor FTP:");
                        Application.DoEvents();
                        foreach (ArchivosUpdateBD oArchivo in aoArchivosUpdateBD)
                        {
                            backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "  - " + oArchivo.Archivo + " ");
                            if (!DescargarArchivoTempFTP(Program.cServidorFTP, Program.cUsuarioFTP, Program.cPassFTP, "/ACTFTP/BRSERPReyes/Update/" + oArchivo.ObtenerRuta, oArchivo.Archivo))
                            {
                                backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se pudo obtener el archivo " + oArchivo + " del FTP");
                                lERROR = true;
                                break;
                            }
                            else
                            {
                                backgroundWorker1.ReportProgress(TipoReporte.AppendOk);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                       backgroundWorker1.ReportProgress(TipoReporte.AppendLine, ex.Message);
                        Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name);
                        Logs.WriteLineException(ex);
                        lERROR = true;
                    }
                }
                Application.DoEvents();
            }
        }

        /// <summary>
        /// Función que recoge del servidor de actualizaciones los archivos ejecutables de actualización
        /// </summary>
        /// <param name="eModoActualizacion">El modo de actualización</param>
        /// <param name="oPrimerModulo">El primer módulo a actualizar</param>
        private void ObtenerArchivoZipDelServidor(ModoActualizacion? eModoActualizacion, Modulo oPrimerModulo)
        {
            if (!lERROR && Program.nTerminal != 1)
            {
                string directorioTemporalServidor = Program.cRutaServidor + "\\Temp";

                Logs.WriteLogDebug("OBTENER ARCHIVO ZIP / EJECUTABLES DEL SERVIDOR", MethodBase.GetCurrentMethod().Name, -1);
                if (eModoActualizacion == ModoActualizacion.BRSLib)
                {
                    Logs.WriteLogDebug("Si estamos actualizando la aplicación completa", MethodBase.GetCurrentMethod().Name);
                    string cNombreArchivo = oPrimerModulo.VersionNuevaSinPunto() + ".zip";
                    string cRutaArchivo = directorioTemporalServidor + "\\" + cNombreArchivo;
                    backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Obteniendo archivo " + cNombreArchivo + " de " + directorioTemporalServidor + ": ");
                    Application.DoEvents();
                    try
                    {
                        Logs.WriteLogDebug("Comprueba si existe el archivo " + cRutaArchivo, MethodBase.GetCurrentMethod().Name);
                        if (File.Exists(cRutaArchivo))
                        {
                            Logs.WriteLogDebug("Copia el archivo " + cRutaArchivo + " a " + directorioTemporal + "\\" + cNombreArchivo, MethodBase.GetCurrentMethod().Name);
                            File.Copy(Program.cRutaServidor + "\\Temp\\" + cNombreArchivo, Application.StartupPath + "\\Temp\\" + cNombreArchivo, true);
                            backgroundWorker1.ReportProgress(TipoReporte.AppendOk);
                        }
                        else
                        {
                            Logs.WriteLogDebug("No existe el archivo " + cRutaArchivo, MethodBase.GetCurrentMethod().Name);
                            backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se pudo obtener el archivo " + cNombreArchivo + " del servidor");
                            lERROR = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        backgroundWorker1.ReportProgress(TipoReporte.AppendLine, ex.Message);
                        Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name);
                        Logs.WriteLineException(ex);
                        lERROR = true;
                    }
                }
                else
                {
                    Logs.WriteLogDebug("Si estamos actualizando solo algunos módulos", MethodBase.GetCurrentMethod().Name);
                    foreach (Modulo oModulo in Program.acListaModulosActualizar)
                    {
                        string cNombreArchivo = oModulo.Nombre + ".exe";
                        string cRutaArchivo = directorioTemporalServidor + "\\" + cNombreArchivo;
                        backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Obteniendo archivo " + cNombreArchivo + " de " + directorioTemporalServidor + ": ");
                        Application.DoEvents();
                        try
                        {
                            Logs.WriteLogDebug("Comprueba si existe el archivo " + cRutaArchivo, MethodBase.GetCurrentMethod().Name);
                            if (File.Exists(cRutaArchivo))
                            {
                                Logs.WriteLogDebug("Copia el archivo " + cRutaArchivo + " a " + directorioTemporal + "\\" + cNombreArchivo, MethodBase.GetCurrentMethod().Name);
                                File.Copy(Program.cRutaServidor + "\\Temp\\" + cNombreArchivo, Application.StartupPath + "\\Temp\\" + cNombreArchivo, true);
                                backgroundWorker1.ReportProgress(TipoReporte.AppendOk);
                            }
                            else
                            {
                                Logs.WriteLogDebug("No existe el archivo " + cRutaArchivo, MethodBase.GetCurrentMethod().Name);
                                backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se pudo obtener el archivo " + cNombreArchivo + " del servidor");
                                lERROR = true;
                            }
                        }
                        catch (Exception ex)
                        {
                            backgroundWorker1.ReportProgress(TipoReporte.AppendLine, ex.Message);
                            Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name);
                            Logs.WriteLineException(ex);
                            lERROR = true;
                        }
                    }
                }
                Application.DoEvents();
            }
        }

        /// <summary>
        /// Función que realiza la copia de seguridad de los archivos del puesto
        /// </summary>
        private void RealizarBackupArchivos()
        {
            Logs.WriteLogDebug("HACER COPIA DE RESPALDO DE LOS ARCHIVOS VIEJOS", MethodBase.GetCurrentMethod().Name, -1);
            if (!lERROR)
            {
                if (Program.cRutaBackup == "" || Program.cRutaBackup == null)
                    Program.cRutaBackup = Application.StartupPath + "\\Backup\\" + cPrefijoBak + cFecha_Hora; //ruta de la copia
                else
                    Program.cRutaBackup += "\\" + cPrefijoBak + cFecha_Hora;

                if (!Directory.Exists(Program.cRutaBackup))
                    Directory.CreateDirectory(Program.cRutaBackup);

                string cNombreArchivo = "BRSERPReyes_" + cFecha_Hora + ".zip";

                // Selecciona solo los tipos de archivo originales de la aplicación. Evita sobre todo los ZIP con copias anteriores
                string cSeleccion = "name=*.exe OR name=*.dll OR name=*.ico OR name=*.reg OR name=*.jpg OR name=*.xml OR name=*.html OR name=*.png OR name=*.sql OR name=*.ini OR name=*.log OR name=*.css OR name=*.frl";
                try
                {
                    backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Realizando copia de respaldo de la aplicación: ");
                    Application.DoEvents();

                    // Crea el zip
                    using (ZipFile zip = new ZipFile())
                    {
                        zip.ZipErrorAction = ZipErrorAction.Skip;
                        zip.AddSelectedFiles(cSeleccion, true);
                        zip.ParallelDeflateThreshold = -1;
                        zip.Save(cNombreArchivo);
                    }

                    Logs.WriteLogDebug("Comprueba si se creó el archivo " + Application.StartupPath + "\\" + cNombreArchivo, MethodBase.GetCurrentMethod().Name);
                    if (File.Exists(Application.StartupPath + "\\" + cNombreArchivo))
                    {
                        Logs.WriteLogDebug("Movemos el archivo " + Application.StartupPath + "\\" + cNombreArchivo + " a " + Program.cRutaBackup + "\\" + cNombreArchivo, MethodBase.GetCurrentMethod().Name);
                        File.Copy(Application.StartupPath + "\\" + cNombreArchivo, Program.cRutaBackup + "\\" + cNombreArchivo, true);
                        File.Delete(Application.StartupPath + "\\" + cNombreArchivo);
                        backgroundWorker1.ReportProgress(TipoReporte.AppendOk);
                    }
                    else
                    {
                        backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se creó el archivo con la copia de seguridad de los archivos del puesto");
                        lERROR = true;
                    }
                }
                catch (Exception ex)
                {
                    backgroundWorker1.ReportProgress(TipoReporte.AppendLine, ex.Message);
                    Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name);
                    Logs.WriteLineException(ex);
                    lERROR = true;
                }
                Application.DoEvents();
            }
        }

        /// <summary>
        /// Función que detiene la ejecución de las otras aplicaciones
        /// </summary>
        private void DetenerProcesos()
        {
            Logs.WriteLogDebug("DETENER TODOS LOS PROCESOS EN EJECUCIÓN", MethodBase.GetCurrentMethod().Name, -1);
            //----------------------- detener todos los procesos en ejecución -----------------------
            if (!lERROR)
            {
                backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Buscando y cerrando módulos: ");
                Application.DoEvents();
                try
                {
                    string[] acNombreProcesos = { "BRSERPReyes" };
                    Process[] myProcesses;

                    foreach (string cNombre in acNombreProcesos)
                    {
                        Logs.WriteLogDebug("Cerrando módulo " + cNombre, MethodBase.GetCurrentMethod().Name);
                        myProcesses = Process.GetProcessesByName(cNombre);
                        foreach (Process myProcess in myProcesses)
                            myProcess.Kill();
                    }

                    Thread.Sleep(6000); //pausa
                    backgroundWorker1.ReportProgress(TipoReporte.AppendOk);
                }
                catch (Exception ex)
                {
                    backgroundWorker1.ReportProgress(TipoReporte.AppendError, ex.Message);
                    lERROR = true;
                }
                Application.DoEvents();
            }
        }

        /// <summary>
        /// Función que realiza la copia de seguridad de las bases de datos y ejecuta los scripts sql
        /// </summary>
        /// <param name="eModoActualizacion">El modo de actualización</param>
        private void LanzarConsultasSQL(ModoActualizacion? eModoActualizacion)
        {
            if (!lERROR && Program.nTerminal == 1)
            {
                if (eModoActualizacion == ModoActualizacion.BRSLib)
                {
                    Logs.WriteLogDebug("EJECUTAR SCRIPT SQL CON LAS MODIFICACIONES", MethodBase.GetCurrentMethod().Name, -1);
                    backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Actualizando estructura de la base de datos: ");
                    Application.DoEvents();

                    Logs.WriteLogDebug("Comprueba si existe el archivo " + Program.cRutaPostgres + "\\psql.exe", MethodBase.GetCurrentMethod().Name);
                    if (!File.Exists(Program.cRutaPostgres + "\\psql.exe"))
                    {
                        Logs.WriteLogDebug("Como no existe establece la variable Program.cRutaPostgres a " + cRutaFichero_pg_dump + cVERSION_POSTGRES, MethodBase.GetCurrentMethod().Name);
                        Program.cRutaPostgres = cRutaFichero_pg_dump + cVERSION_POSTGRES;
                    }

                    if (File.Exists(Program.cRutaPostgres + "\\psql.exe"))
                    {
                        lERROR = !ProcesarArchivosUpdate();
                    }
                    else
                    {
                        Logs.WriteLogDebug("No existe el archivo " + Program.cRutaPostgres + "\\psql.exe", MethodBase.GetCurrentMethod().Name);
                        backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se encuentra PSQL.EXE");
                        lERROR = true;
                    }

                    Application.DoEvents();
                }
            }
        }

        /// <summary>
        /// Función función que descomprime el zip con los ejecutables y sobreescribe los actuales
        /// </summary>
        /// <param name="eModoActualizacion">El modo de actualización</param>
        /// <param name="oPrimerModulo">El primer módulo a actualizar</param>
        private void ReemplazarArchivos(ModoActualizacion? eModoActualizacion, Modulo oPrimerModulo)
        {
            Logs.WriteLogDebug("SUSTITUIR LOS ARCHIVOS ANTIGUOS POR LOS NUEVOS", MethodBase.GetCurrentMethod().Name, -1);
            if (!lERROR)
            {
                if (eModoActualizacion == ModoActualizacion.BRSLib)
                {
                    Logs.WriteLogDebug("Si estamos actualizando la aplicación completa", MethodBase.GetCurrentMethod().Name);
                    string cNombreArchivo = oPrimerModulo.VersionNuevaSinPunto() + ".zip";

                    backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Descomprimiendo archivo " + cNombreArchivo + " en la carpeta de la aplicación: ");
                    try
                    {
                        // Para reemplazar los archivos DLL sin error, renombramos el actual añadiendo "_old" y descomprimimos
                        foreach (string cFicheroDLL in acFicherosDLL)
                        {
                            // Eliminamos todos los old.DLL anteriores
                            if (File.Exists(Application.StartupPath + "\\" + cFicheroDLL + "_old.dll"))
                            {
                                Logs.WriteLogDebug("Si existe el archivo " + Application.StartupPath + "\\" + cFicheroDLL + "_old.dll lo borra", MethodBase.GetCurrentMethod().Name);
                                File.Delete(Application.StartupPath + "\\" + cFicheroDLL + "_old.dll");
                            }

                            // Si existe el archivo DLL, lo renombramos
                            if (File.Exists(Application.StartupPath + "\\" + cFicheroDLL + ".dll"))
                            {
                                Logs.WriteLogDebug("Si existe el archivo " + Application.StartupPath + "\\" + cFicheroDLL + ".dll lo renombra a " + Application.StartupPath + "\\" + cFicheroDLL + "_old.dll", MethodBase.GetCurrentMethod().Name);
                                File.Move(Application.StartupPath + "\\" + cFicheroDLL + ".dll", Application.StartupPath + "\\" + cFicheroDLL + "_old.dll");
                            }
                        }

                        using (ZipFile zip = ZipFile.Read(Application.StartupPath + "\\Temp\\" + cNombreArchivo))
                        {
                            Logs.WriteLogDebug("Descomprimiendo fichero " + Application.StartupPath + "\\Temp\\" + cNombreArchivo, MethodBase.GetCurrentMethod().Name);

                            foreach (ZipEntry ze in zip)
                            {
                                if (ze.FileName == "BRSAct.exe")
                                {
                                    if (File.Exists(Application.StartupPath + "\\BRSAct_old.exe"))
                                    {
                                        Logs.WriteLogDebug("Si existe el archivo " + Application.StartupPath + "\\BRSAct_old.exe lo borramos", MethodBase.GetCurrentMethod().Name);
                                        File.Delete(Application.StartupPath + "\\BRSAct_old.exe");
                                    }
                                    Logs.WriteLogDebug("Renombramos el archivo " + Application.StartupPath + "\\BRSAct.exe a " + Application.StartupPath + "\\BRSAct_old.exe", MethodBase.GetCurrentMethod().Name);
                                    File.Move(Application.StartupPath + "\\BRSAct.exe", Application.StartupPath + "\\BRSAct_old.exe");
                                }
                                if (ze.FileName == "Ionic.Zip.dll")
                                {
                                    if (File.Exists(Application.StartupPath + "\\Ionic.Zip_old.dll"))
                                    {
                                        Logs.WriteLogDebug("Si existe el archivo " + Application.StartupPath + "\\Ionic.Zip_old.dll lo borramos", MethodBase.GetCurrentMethod().Name);
                                        File.Delete(Application.StartupPath + "\\Ionic.Zip_old.dll");
                                    }
                                    Logs.WriteLogDebug("Renombramos el archivo " + Application.StartupPath + "\\Ionic.Zip.dll a " + Application.StartupPath + "\\Ionic.Zip_old.dll", MethodBase.GetCurrentMethod().Name);
                                    File.Move(Application.StartupPath + "\\Ionic.Zip.dll", Application.StartupPath + "\\Ionic.Zip_old.dll");
                                }

                                try
                                {
                                    Logs.WriteLogDebug("Extrayendo archivo " + ze.FileName + " en " + Application.StartupPath, MethodBase.GetCurrentMethod().Name);
                                    ze.Extract(Application.StartupPath, ExtractExistingFileAction.OverwriteSilently);
                                }
                                catch (IOException ex)
                                {
                                    Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name);
                                    bool b = false;
                                    foreach (var postFix in new[] { ".tmp", ".PendingOverwrite" })
                                    {
                                        var errorPath = Path.Combine(Application.StartupPath, ze.FileName) + postFix;
                                        if (File.Exists(errorPath))
                                        {
                                            Logs.WriteLogDebug("Si existe el archivo " + errorPath + " lo borramos", MethodBase.GetCurrentMethod().Name);
                                            File.Delete(errorPath);
                                            b = true;
                                        }
                                    }
                                    if (!b)
                                    {
                                        throw ex;
                                    }
                                    Logs.WriteLogDebug("Volvemos a intentar extraer el archivo " + ze.FileName + " en " + Application.StartupPath, MethodBase.GetCurrentMethod().Name);
                                    ze.Extract(Application.StartupPath, ExtractExistingFileAction.OverwriteSilently);
                                }
                            }
                        }
                        backgroundWorker1.ReportProgress(TipoReporte.AppendOk);
                    }
                    catch (Exception ex)
                    {
                        backgroundWorker1.ReportProgress(TipoReporte.AppendLine, ex.Message);
                        Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name);
                        Logs.WriteLineException(ex);
                        lERROR = true;
                    }
                }
                else
                {
                    Logs.WriteLogDebug("Si estamos actualizando solo algunos módulos", MethodBase.GetCurrentMethod().Name);
                    foreach (Modulo oModulo in Program.acListaModulosActualizar)
                    {
                        Logs.WriteLogDebug("Procesando módulo " + oModulo, MethodBase.GetCurrentMethod().Name);
                        string cNombreArchivo = oModulo.Nombre + ".exe";
                        backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Copiando archivo " + cNombreArchivo + " en la carpeta de la aplicación: ");
                        try
                        {
                            // Copia el ejecutable nuevo
                            if (File.Exists(Application.StartupPath + "\\Temp\\" + cNombreArchivo))
                            {
                                Logs.WriteLogDebug("Si existe el archivo " + Application.StartupPath + "\\Temp\\" + cNombreArchivo, MethodBase.GetCurrentMethod().Name);
                                // Para reemplazar el ejecutable del actualizador sin error, renombramos el actual añadiendo "_old" y copiamos el nuevo
                                if (eModoActualizacion == ModoActualizacion.BRSAct)
                                {
                                    Logs.WriteLogDebug("Si estamos actualizando el actualizador", MethodBase.GetCurrentMethod().Name);
                                    if (File.Exists(Application.StartupPath + "\\BRSAct_old.exe"))
                                    {
                                        Logs.WriteLogDebug("Si existe el archivo " + Application.StartupPath + "\\BRSAct_old.exe lo borramos", MethodBase.GetCurrentMethod().Name);
                                        File.Delete(Application.StartupPath + "\\BRSAct_old.exe");
                                    }
                                    Logs.WriteLogDebug("Renombramos el archivo " + Application.StartupPath + "\\BRSAct.exe a " + Application.StartupPath + "\\BRSAct_old.exe", MethodBase.GetCurrentMethod().Name);
                                    File.Move(Application.StartupPath + "\\BRSAct.exe", Application.StartupPath + "\\BRSAct_old.exe");
                                }
                                Logs.WriteLogDebug("Copiamos el archivo " + Application.StartupPath + "\\Temp\\" + cNombreArchivo + " a " + Application.StartupPath + "\\" + cNombreArchivo, MethodBase.GetCurrentMethod().Name);
                                File.Copy(Application.StartupPath + "\\Temp\\" + cNombreArchivo, Application.StartupPath + "\\" + cNombreArchivo, true);
                                backgroundWorker1.ReportProgress(TipoReporte.AppendOk);
                            }
                            else
                            {
                                Logs.WriteLogDebug("No existe el archivo " + Application.StartupPath + "\\Temp\\" + cNombreArchivo, MethodBase.GetCurrentMethod().Name);
                                backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se pudo copiar el archivo " + cNombreArchivo);
                                lERROR = true;
                            }
                        }
                        catch (Exception ex)
                        {
                            backgroundWorker1.ReportProgress(TipoReporte.AppendLine, ex.Message);
                            Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name);
                            Logs.WriteLineException(ex);
                            lERROR = true;
                        }
                    }
                }
                Application.DoEvents();
            }
        }

        /// <summary>
        /// Función que guarda el número de la versión en el xml de versiones
        /// </summary>
        private void GrabarVersionEnXML()
        {
            if (!lERROR && Program.nTerminal == 1)
            {
                Logs.WriteLogDebug("GRABANDO EL NÚMERO DE VERSIÓN EN EL XML", MethodBase.GetCurrentMethod().Name);
                string cNombreArchivo = "version.new.xml";
                backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Sobreescribiendo archivo \"" + cNombreArchivo + "\": ");
                Application.DoEvents();

                try
                {
                    //copia los archivos EXE nuevos del FTP a la carpeta /Temp
                    if (DescargarArchivoTempFTP(Program.cServidorFTP, Program.cUsuarioFTP, Program.cPassFTP, "/ACTFTP/BRSERPReyes/", cNombreArchivo))
                    {
                        // Copia el ejecutable nuevo
                        if (File.Exists(Application.StartupPath + "\\Temp\\" + cNombreArchivo))
                        {
                            Logs.WriteLogDebug("Si existe el archivo " + Application.StartupPath + "\\Temp\\" + cNombreArchivo + " lo copiamos a " + Application.StartupPath + "\\" + cNombreArchivo, MethodBase.GetCurrentMethod().Name);


                            //File.Copy(Application.StartupPath + "\\Temp\\" + cNombreArchivo, Application.StartupPath + "\\" + cNombreArchivo, true);
                            XmlDocument documentoFTP = new XmlDocument();
                            documentoFTP.Load(Application.StartupPath + "\\Temp\\" + cNombreArchivo);
                            XmlDocument documentoEquipo = new XmlDocument();
                            documentoEquipo.Load(Application.StartupPath + "\\" + cNombreArchivo);

                            foreach (Modulo modulo in Program.acListaModulosActualizar)
                            {
                                if (modulo.Nombre == "BRSLib")
                                {
                                    string[] nodos = { "BRSLib", "BRSERPREYES" };
                                    foreach (string nodo in nodos)
                                    {
                                        string cNodo = "/BRSERPREYES/module[@name=\"" + nodo + "\"]";
                                        documentoEquipo.SelectSingleNode(cNodo).SelectSingleNode("version").InnerText = documentoFTP.SelectSingleNode(cNodo).SelectSingleNode("version").InnerText;
                                        documentoEquipo.SelectSingleNode(cNodo).SelectSingleNode("revision").InnerText = documentoFTP.SelectSingleNode(cNodo).SelectSingleNode("revision").InnerText;
                                    }
                                }
                                else
                                {
                                    string cNodo = "/BRSERPREYES/module[@name=\"" + modulo.Nombre + "\"]";
                                    documentoEquipo.SelectSingleNode(cNodo).SelectSingleNode("version").InnerText = documentoFTP.SelectSingleNode(cNodo).SelectSingleNode("version").InnerText;
                                    documentoEquipo.SelectSingleNode(cNodo).SelectSingleNode("revision").InnerText = documentoFTP.SelectSingleNode(cNodo).SelectSingleNode("revision").InnerText;
                                }
                            }

                            documentoEquipo.Save(Application.StartupPath + "\\" + cNombreArchivo);

                            backgroundWorker1.ReportProgress(TipoReporte.AppendOk);
                        }
                        else
                        {
                            Logs.WriteLogDebug("No existe el archivo " + Application.StartupPath + "\\Temp\\" + cNombreArchivo, MethodBase.GetCurrentMethod().Name);
                            backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se pudo copiar el archivo " + cNombreArchivo);
                            lERROR = true;
                        }
                    }
                    else
                    {
                        backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se pudo obtener el archivo " + cNombreArchivo + " del FTP");
                        lERROR = true;
                    }
                }
                catch (Exception ex)
                {
                    backgroundWorker1.ReportProgress(TipoReporte.AppendLine, ex.Message);
                    Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name);
                    Logs.WriteLineException(ex);
                    lERROR = true;
                }

                Application.DoEvents();
            }
        }

        private void ActualizarMostrarAcercaDe()
        {
            using (NpgsqlConnection oConexion = new NpgsqlConnection(Program.cCadenaConexion))
            using (NpgsqlCommand oComando = oConexion.CreateCommand())
            {
                oConexion.Open();
                oComando.CommandText = "UPDATE usuarios SET lmostraracercade = true;";
                oComando.ExecuteNonQuery();
            }
        }

        private void MostrarMensajeFinal(ModoActualizacion? eModoActualizacion)
        {
            Logs.WriteLogDebug("MENSAJE FINAL", MethodBase.GetCurrentMethod().Name);
            //----------------------- mensaje final -----------------------
            //txtLog.BreakLine(2);
            backgroundWorker1.ReportProgress(TipoReporte.BreakLine);
            backgroundWorker1.ReportProgress(TipoReporte.BreakLine);
            if (!lERROR)
            {
                try
                {
                    // Si la actualización ha ido bien, eliminamos los archivos temporales de SQL's e informes
                    if (aoArchivosUpdateBD != null && aoArchivosUpdateBD.Count > 0)
                    {
                        foreach (ArchivosUpdateBD oArchivo in aoArchivosUpdateBD)
                        {
                            if (Directory.Exists(Application.StartupPath + "\\Temp\\" + oArchivo.Archivo.Split('.')[0]))
                            {
                                Logs.WriteLogDebug("Si existe el directorio " + Application.StartupPath + "\\Temp\\" + oArchivo.Archivo.Split('.')[0] + " lo borramos", MethodBase.GetCurrentMethod().Name);
                                Directory.Delete(Application.StartupPath + "\\Temp\\" + oArchivo.Archivo.Split('.')[0], true);
                            }

                            if (File.Exists(Application.StartupPath + "\\Temp\\" + oArchivo.Archivo))
                            {
                                Logs.WriteLogDebug("Si existe el archivo " + Application.StartupPath + "\\Temp\\" + oArchivo.Archivo + " lo borramos", MethodBase.GetCurrentMethod().Name);
                                File.Delete(Application.StartupPath + "\\Temp\\" + oArchivo.Archivo);
                            }
                        }
                    }

                    EnviarCorreo(eModoActualizacion);

                    backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Actualización finalizada con éxito.");
                    MessageBox.Show("Actualización finalizada con éxito.", "", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name, 0, ex);
                    backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Sucedieron errores limpiando los archivos temporales.");
                    backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Póngase en contacto con nuestro servidio de soporte para finalizar la actualización o restaurar la copia de respaldo si fuese necesario.");
                    MessageBox.Show("Sucedieron errores limpiando los archivos temporales.\r\nPóngase en contacto con nuestro servicio de soporte para finalizar la actualización o restaurar la copia de respaldo si fuese necesario.\r\n", "", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            else
            {
                backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Sucedieron errores en la actualización");
                backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Póngase en contacto con nuestro servicio de soporte para finalizar la actualización o restaurar la copia de respaldo si fuese necesario.");
                MessageBox.Show("Sucedieron errores en la actualización.\r\nPóngase en contacto con nuestro servicio de soporte para finalizar la actualización o restaurar la copia de respaldo si fuese necesario.\r\n", "", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Descarga un archivo de un servidor FTP
        /// </summary>
        /// <param name="cServidor">Servidor FTP</param> 
        /// <param name="cUsuario">Usuario del servidor FTP</param> 
        /// <param name="cPass">Contraseña del servidor FTP</param> 
        /// <param name="cNombreCarpetaFTP">Nombre de la carpeta/s en el FTP</param> 
        /// <param name="sNombreArchivo">Nombre del archivo a descargar</param> 
        private bool DescargarArchivoTempFTP(string cServidor, string cUsuario, string cPass, string cNombreCarpetaFTP, string cNombreArchivo)
        {
            bool lDescargado = false;
            FileStream outputStream = null;
            try
            {
                Logs.WriteLogDebug("Descarga del servidor FTP el fichero " + cServidor + cNombreCarpetaFTP + cNombreArchivo + " a " + directorioTemporal + cNombreArchivo, MethodBase.GetCurrentMethod().Name);

                FtpWebRequest oFTP = null;
                int iBuffLength = 1024; //buffer de 1 KBytes
                byte[] aBuff = new byte[iBuffLength];
                //añade "ftp://" al servidor si es necesario
                if (cServidor.Length > 2 && !cServidor.Substring(0, 3).Contains("ftp")) cServidor = "ftp://" + cServidor;
                //ruta completa del archivo en el servidor FTP             
                String cRutaFTP = cServidor + "/" + cNombreCarpetaFTP + "/" + cNombreArchivo;

                //verifica la existencia de la carpeta "Temp"
                if (!Directory.Exists(Application.StartupPath + "\\Temp"))
                    Directory.CreateDirectory(Application.StartupPath + "\\Temp");

                outputStream = new FileStream(Application.StartupPath + "\\Temp\\" + cNombreArchivo, FileMode.Create);//archivo a guardar

                //propiedades del objeto FTP
                oFTP = (FtpWebRequest)FtpWebRequest.Create(cRutaFTP);
                oFTP.Method = WebRequestMethods.Ftp.GetFileSize;
                oFTP.Credentials = new NetworkCredential(cUsuario, cPass);

                int dataLength = (int)oFTP.GetResponse().ContentLength;

                oFTP = (FtpWebRequest)FtpWebRequest.Create(cRutaFTP);
                oFTP.Method = WebRequestMethods.Ftp.DownloadFile;
                oFTP.Credentials = new NetworkCredential(cUsuario, cPass);

                FtpWebResponse response = (FtpWebResponse)oFTP.GetResponse();
                Stream ftpStream = response.GetResponseStream();

                //progressBar1.Visible = true;
                backgroundWorker1.ReportProgress(TipoReporte.EstablecerMaximoBarra, dataLength);
                backgroundWorker1.ReportProgress(TipoReporte.MostrarBarra);
                Application.DoEvents();

                long nTamFichero = response.ContentLength;
                int i;

                i = ftpStream.Read(aBuff, 0, iBuffLength);

                while (i > 0)
                {
                    outputStream.Write(aBuff, 0, i);
                    i = ftpStream.Read(aBuff, 0, iBuffLength);
                    //barra de progreso aproximada
                    if (progressBar1.Value < progressBar1.Maximum)
                    {
                        //progressBar1.Value++;
                        backgroundWorker1.ReportProgress(TipoReporte.IncrementarBarra, i);
                    }
                }
                //progressBar1.Value = progressBar1.Maximum;
                backgroundWorker1.ReportProgress(TipoReporte.BarraAlMaximo);
                Application.DoEvents();
                outputStream.Close();
                response.Close();
                lDescargado = true;
                Thread.Sleep(500);
            }
            catch (Exception ex)
            {
                outputStream.Close();

                if (File.Exists(Application.StartupPath + "\\Temp\\" + cNombreArchivo))
                    File.Delete(Application.StartupPath + "\\Temp\\" + cNombreArchivo);

                Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name);

                MessageBox.Show("¡No ha sido posible obtener el archivo " + cNombreArchivo + " del servidor FTP!\r\n" + ex.Message, "Advertencia", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            finally
            {
                outputStream.Close();
                //progressBar1.Visible = false;
                backgroundWorker1.ReportProgress(TipoReporte.OcultarBarra);
            }
            return lDescargado;
        }

        /// <summary>
        /// Lanza el pg_dump.exe para realizar un backup de una base de datos
        /// </summary>
        /// <param name="cBaseDatos">Nombre de la base de datos para realizar el backup</param>
        /// <param name="cNombreFichero">Nombre de fichero que generará (Se guarda en la carpeta de backup)</param>
        /// <returns>True si todo va bien. False en caso de error</returns>
        private bool CrearBackupBBDD(string cBaseDatos, string cNombreFichero)
        {
            Logs.WriteLogDebug("Comprueba si no existe el fichero " + Program.cRutaBackup + "\\" + cNombreFichero, MethodBase.GetCurrentMethod().Name);
            if (!File.Exists(Program.cRutaBackup + "\\" + cNombreFichero))
            {
                StreamWriter sw = new StreamWriter(Application.StartupPath + "\\Temp\\pg_dump.bat"); //Script que generará el Backup
                StringBuilder oStringBuilder = new StringBuilder(); //Vamos almacenando los comandos para luego escribirlos en el fichero.bat

                cNombreFichero = cPrefijoTmp + "BBDD_" + cBaseDatos + "_" + cFecha + ".tar";
                oStringBuilder.AppendLine("cd /D " + Program.cRutaPostgres); //comandos para cambiar al directorio de herramientas postgres
                oStringBuilder.Append("pg_dump.exe --host " + Program.cServidorPostgres + " --port " + Program.cPuertoPostgres + " --inserts --username postgres --format tar --blobs --verbose --file "); //comando para realizar la copia  
                oStringBuilder.Append(" \"" + Program.cRutaBackup + "\\" + cNombreFichero + "\""); //nombre del fichero
                oStringBuilder.Append(" \"" + cBaseDatos + "\""); //nombre de la BD.

                Logs.WriteLogDebug("Crea el archivo " + Application.StartupPath + "\\Temp\\pg_dump.bat con el contenido " + oStringBuilder, MethodBase.GetCurrentMethod().Name);

                //Escribimos en el fichero
                sw.WriteLine(oStringBuilder);
                sw.Dispose();
                sw.Close();
                backgroundWorker1.ReportProgress(TipoReporte.RefrescarFormulario);
                Application.DoEvents();

                Logs.WriteLogDebug("Ejecuta " + Application.StartupPath + "\\Temp\\pg_dump.bat", MethodBase.GetCurrentMethod().Name);
                //ejecutamos el proceso
                backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "  - " + cBaseDatos + " ");

                Process oProcess = new Process();
                oProcess.StartInfo.FileName = Application.StartupPath + "\\Temp\\pg_dump.bat";
                oProcess.StartInfo.RedirectStandardOutput = true;
                oProcess.StartInfo.UseShellExecute = false;
                oProcess.StartInfo.CreateNoWindow = true; //es importante que el archivo pg_hba.conf de postgres tenga el acceso a "trust".
                oProcess.Start();
                oProcess.WaitForExit();

                //comprobamos si el archivo se generó con éxito
                if (File.Exists(Program.cRutaBackup + "\\" + cNombreFichero))
                {
                    Logs.WriteLogDebug("Backup de la base de datos " + cBaseDatos + " creado con éxito en " + Program.cRutaBackup + "\\" + cNombreFichero, MethodBase.GetCurrentMethod().Name);
                    backgroundWorker1.ReportProgress(TipoReporte.AppendOk);
                    return true;
                }
                else
                {
                    Logs.WriteLogDebug("No se creó el backup de la base de datos " + cBaseDatos, MethodBase.GetCurrentMethod().Name);
                    backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se pudo crear la copia de respaldo");
                    return false;
                }
            }
            else
            {
                return true;
            }
        }

        /// <summary>
        /// Recorrerá los archivos .zip con las SQLs y los informes y los reflejará en la base de datos
        /// </summary>
        /// <returns>True si todo va bien. False en caso de error</returns>
        private bool ProcesarArchivosUpdate()
        {
            try
            {
                //borramos LOG anterior
                Logs.WriteLogDebug("Si existe el archivo " + Application.StartupPath + "\\Temp\\psql.log", MethodBase.GetCurrentMethod().Name);
                if (File.Exists(Application.StartupPath + "\\Temp\\psql.log"))
                {
                    Logs.WriteLogDebug("Lo borramos", MethodBase.GetCurrentMethod().Name);
                    File.Delete(Application.StartupPath + "\\Temp\\psql.log");
                }

                bool backup_BD_ERP = false;
                bool backup_BD_CONTABILIDAD = false;
                bool backup_BD_GESTION = false;
                bool backup_BD_TESORERIA = false;

                // Comprobamos si hace falta hacer copias de seguridad de las base de datos
                foreach (ArchivosUpdateBD oArchivo in aoArchivosUpdateBD)
                {
                    string cCarpeta = Application.StartupPath + "\\Temp\\" + oArchivo.Archivo.Split('.')[0];

                    //Descomprime el archivo .zip de la versión
                    using (ZipFile zip = ZipFile.Read(Application.StartupPath + "\\Temp\\" + oArchivo.Archivo))
                    {
                        Logs.WriteLogDebug("Lee el archivo " + Application.StartupPath + "\\Temp\\" + oArchivo.Archivo, MethodBase.GetCurrentMethod().Name);
                        Logs.WriteLogDebug("Lo extrae en " + Application.StartupPath + "\\Temp\\", MethodBase.GetCurrentMethod().Name);
                        zip.ExtractAll(Application.StartupPath + "\\Temp\\", ExtractExistingFileAction.OverwriteSilently);

                        if (Directory.Exists(cCarpeta))
                        {
                            Logs.WriteLogDebug("Si existe la cartera " + cCarpeta, MethodBase.GetCurrentMethod().Name);
                            if (Directory.Exists(cCarpeta + "\\Sql"))
                            {
                                Logs.WriteLogDebug("Si Existe la carpeta " + cCarpeta + "\\Sql", MethodBase.GetCurrentMethod().Name);

                                foreach (string cArchivo in Directory.GetFiles(cCarpeta + "\\Sql"))
                                {
                                    Logs.WriteLogDebug("Analizando archivo " + cArchivo + " en " + cCarpeta + "\\Sql", MethodBase.GetCurrentMethod().Name);

                                    FileInfo file = new FileInfo(cArchivo);

                                    if (File.ReadAllLines(cArchivo).Any(l => !String.IsNullOrWhiteSpace(l.Trim())))
                                    {
                                        switch (Path.GetFileNameWithoutExtension(cArchivo))
                                        {
                                            case "BRSERPREYES": backup_BD_ERP = true; break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Logs.WriteLogDebug("Comprueba si existe el archivo " + Program.cRutaPostgres + "\\pg_dump.exe", MethodBase.GetCurrentMethod().Name);
                if (!File.Exists(Program.cRutaPostgres + "\\pg_dump.exe"))
                {
                    Program.cRutaPostgres = cRutaFichero_pg_dump + cVERSION_POSTGRES;
                }

                if (File.Exists(Program.cRutaPostgres + "\\pg_dump.exe"))
                {
                    if (backup_BD_ERP || backup_BD_CONTABILIDAD || backup_BD_GESTION || backup_BD_TESORERIA)
                        backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Realizando copia de respaldo de la base de datos: ");
                    // Realizamos las copias de seguridad de la base de datos
                    if (backup_BD_ERP)
                    {
                        string cNombreFichero = cPrefijoTmp + "BBDD_" + Program.cBaseDatos + "_" + cFecha + ".tar";

                        if (!CrearBackupBBDD(Program.cBaseDatos, cNombreFichero))
                            return false;
                    }
                    if (backup_BD_CONTABILIDAD)
                    {
                        List<string> acNombresBBDD = ObtenerNombresBBDD(cPrefijoComentarioBBDD + "CONTABILIDAD");
                        foreach (string cBaseDatos in acNombresBBDD)
                        {
                            string cNombreFichero = cPrefijoTmp + "BBDD_" + cBaseDatos + "_" + cFecha + ".tar";

                            if (!CrearBackupBBDD(cBaseDatos, cNombreFichero))
                                return false;
                        }
                    }
                    if (backup_BD_TESORERIA)
                    {
                        List<string> acNombresBBDD = ObtenerNombresBBDD(cPrefijoComentarioBBDD + "TESORERIA");
                        foreach (string cBaseDatos in acNombresBBDD)
                        {
                            string cNombreFichero = cPrefijoTmp + "BBDD_" + cBaseDatos + "_" + cFecha + ".tar";

                            if (!CrearBackupBBDD(cBaseDatos, cNombreFichero))
                                return false;
                        }
                    }
                    if (backup_BD_GESTION)
                    {
                        List<string> acNombresBBDD = ObtenerNombresBBDD(cPrefijoComentarioBBDD + "GESTION");
                        foreach (string cBaseDatos in acNombresBBDD)
                        {
                            string cNombreFichero = cPrefijoTmp + "BBDD_" + cBaseDatos + "_" + cFecha + ".tar";

                            if (!CrearBackupBBDD(cBaseDatos, cNombreFichero))
                                return false;
                        }
                    }

                    if (backup_BD_ERP || backup_BD_CONTABILIDAD || backup_BD_GESTION || backup_BD_TESORERIA)
                        backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "Procesando archivos SQL: ");
                    // Lanzamos los ficheros de actualización SQL
                    foreach (ArchivosUpdateBD oArchivo in aoArchivosUpdateBD)
                    {
                        string cCarpeta = Application.StartupPath + "\\Temp\\" + oArchivo.Archivo.Split('.')[0];

                        if (Directory.Exists(cCarpeta))
                        {
                            Logs.WriteLogDebug("Si existe la carpeta " + cCarpeta, MethodBase.GetCurrentMethod().Name);
                            if (Directory.Exists(cCarpeta + "\\Sql"))
                            {
                                Logs.WriteLogDebug("Si existe la carpeta " + cCarpeta + "\\Sql", MethodBase.GetCurrentMethod().Name);

                                foreach (string cArchivo in Directory.GetFiles(cCarpeta + "\\Sql"))
                                {
                                    Logs.WriteLogDebug("Analizando archivo " + cArchivo + " en " + cCarpeta + "\\Sql", MethodBase.GetCurrentMethod().Name);
                                    List<string> acNombresBBDD = new List<string>();

                                    string cVersion = oArchivo.Version;
                                    string cTipo = Path.GetFileNameWithoutExtension(cArchivo);

                                    switch (cTipo)
                                    {
                                        case "BRSERPREYES":
                                        case "INFORMES":
                                            if (!EjecutarProcesoSQL(Program.cBaseDatos, cArchivo, cVersion, cTipo))
                                            {
                                                return false;
                                            }
                                            else
                                            {
                                                InsertarHistoricoVersiones(Program.cBaseDatos, cVersion);
                                            }
                                            break;

                                        case "CONTABILIDAD":
                                        case "GESTION":
                                        case "TESORERIA":
                                            acNombresBBDD = ObtenerNombresBBDD(cPrefijoComentarioBBDD + Path.GetFileNameWithoutExtension(cArchivo));
                                            break;

                                        default:
                                            break;
                                    }

                                    if (acNombresBBDD.Count > 0)
                                    {
                                        foreach (string cBaseDatos in acNombresBBDD)
                                        {
                                            if (!EjecutarProcesoSQL(cBaseDatos, cArchivo, cVersion, cTipo))
                                            {
                                                return false;
                                            }
                                            else
                                            {
                                                InsertarHistoricoVersiones(cBaseDatos, cVersion);
                                            }
                                        }
                                    }
                                }
                            }

                            if (Directory.Exists(cCarpeta + "\\Informes nuevos"))
                            {
                                Logs.WriteLogDebug("Si existe la carpeta " + cCarpeta + "\\Informes nuevos", MethodBase.GetCurrentMethod().Name);
                                if (!ProcesarInformes(cCarpeta + "\\Informes nuevos"))
                                    return false;
                            }

                            if (Directory.Exists(cCarpeta + "\\Informes actualizados"))
                            {
                                Logs.WriteLogDebug("Si existe la carpeta " + cCarpeta + "\\Informes actualizados", MethodBase.GetCurrentMethod().Name);
                                if (!ProcesarInformes(cCarpeta + "\\Informes actualizados"))
                                    return false;
                            }
                        }
                    }

                    return true;
                }
                else
                {
                    Logs.WriteLogDebug("No se pudo encontrar el archivo " + Program.cRutaPostgres + "\\pg_dump.exe", MethodBase.GetCurrentMethod().Name);
                    backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se encuentra PG_DUMP.EXE");
                    lERROR = true;
                    return false;
                }
            }
            catch (Exception ex)
            {
                backgroundWorker1.ReportProgress(TipoReporte.AppendLine, ex.Message);
                Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name);
                Logs.WriteLineException(ex);
                lERROR = true;
                return false;
            }
        }

        /// <summary>
        /// Ejecuta un archivo SQL sobre una base de datos
        /// </summary>
        /// <param name="cBaseDatos">Base de datos sobre la que ejecutaremos el SQL</param>
        /// <param name="cArchivo">Archivo SQL a ejecutar</param>
        /// <returns>True si todo va bien. False en caso de error</returns>
        private bool EjecutarProcesoSQL(string cBaseDatos, string cArchivo, string cVersionBD, string cTipo)
        {
            // Realizamos un backup de la BD antes
            string cNombreFichero = cPrefijoTmp + "BBDD_" + cBaseDatos + "_" + cFecha + ".tar";

            ComprobarNivelAvisosSQL(cArchivo);

            string cArgumentos = "-h " + Program.cServidorPostgres + " " +                      // Servidor Postgres
                                 "-U postgres " +                                               // Usuario
                                 "-d " + cBaseDatos + " " +                                     // Base de datos
                                 "-f \"" + cArchivo + "\" " +                                   // Script a ejecutar
                                 "-L \"" + Application.StartupPath + "\\Temp\\psql.log\" " +    // Log
                                 "-1";                                                          // Transaccion

            Logs.WriteLogDebug("Ejecuta " + Program.cRutaPostgres + "\\psql.exe " + cArgumentos, MethodBase.GetCurrentMethod().Name);
            ProcessStartInfo info = new System.Diagnostics.ProcessStartInfo
            {
                FileName = Program.cRutaPostgres + "\\psql.exe",
                Arguments = cArgumentos
            };

            string nombreArchivo = cArchivo.Replace(Application.StartupPath + "\\Temp\\", "");
            backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "  - " + nombreArchivo + " para " + cBaseDatos + " ");
            info.CreateNoWindow = true;
            info.RedirectStandardOutput = true;
            info.RedirectStandardError = true;
            info.UseShellExecute = false;
            System.Diagnostics.Process proc = new System.Diagnostics.Process
            {
                StartInfo = info
            };
            proc.Start();

            backgroundWorker1.ReportProgress(TipoReporte.AppendOk);

            string cResultado = System.Threading.Tasks.Task.Factory.StartNew(() => proc.StandardError.ReadToEnd()).Result;
            proc.WaitForExit();

            if (string.IsNullOrWhiteSpace(cResultado))
            {
                return true;
            }
            else
            {
                Logs.WriteLogDebug("Hubo un error al lanzar el archivo sql " + cArchivo, MethodBase.GetCurrentMethod().Name);
                backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se pudo ejecutar el archivo sql");
                backgroundWorker1.ReportProgress(TipoReporte.AppendLine, "[" + cResultado.Split(new string[] { "\r\n", "\n" }, StringSplitOptions.None)[0] + "]\r\n");
                return false;
            }
        }

        /// <summary>
        /// Configura el archivo SQL para que sólo devuelva mensajes tipo ERROR, FATAL, y PANIC.
        /// </summary>
        /// <param name="cArchivo">Archivo SQL</param>
        private void ComprobarNivelAvisosSQL(string cArchivo)
        {
            string cNivelAviso = "SET client_min_messages TO ERROR;";
            if (!File.ReadLines(cArchivo).Any(line => line.Contains(cNivelAviso)))
            {
                Logs.WriteLogDebug("Añade al archivo " + cArchivo + " la linea " + cNivelAviso + " si no la contiene", MethodBase.GetCurrentMethod().Name);
                string cArchivoTemporal = Path.GetTempFileName();
                using (StreamWriter oWriter = new StreamWriter(cArchivoTemporal))
                using (StreamReader oReader = new StreamReader(cArchivo))
                {
                    oWriter.WriteLine(cNivelAviso + "\r\n");
                    while (!oReader.EndOfStream)
                        oWriter.WriteLine(oReader.ReadLine());
                }
                File.Copy(cArchivoTemporal, cArchivo, true);
            }
        }

        /// <summary>
        /// Lanza una consulta para obtener los nombres de las BBDD con un comentario concreto
        /// </summary>
        /// <param name="cComentarioBBDD">Comentario</param>
        /// <returns>Una lista con los nombres de todas las BBDD que tuvieran el comentario asignado</returns>
        private List<string> ObtenerNombresBBDD(string cComentarioBBDD)
        {
            Logs.WriteLogDebug("Recupera las bases de datos cuyo comentario es " + cComentarioBBDD, MethodBase.GetCurrentMethod().Name);
            List<string> acNombres = new List<string>();

            string cSQL = "SELECT datname FROM pg_shdescription " +
                          "JOIN pg_database ON objoid = pg_database.oid " +
                          "WHERE description LIKE '" + cComentarioBBDD + "%' " +
                          "ORDER BY datname";

            using (NpgsqlConnection oConexion = new NpgsqlConnection(Program.cCadenaConexion))
            {
                using (NpgsqlCommand oComando = new NpgsqlCommand(cSQL, oConexion))
                {
                    oConexion.Open();

                    using (NpgsqlDataReader oReader = oComando.ExecuteReader())
                    {
                        while (oReader.Read())
                        {
                            acNombres.Add(oReader["datname"].ToString());
                        }
                    }
                }
            }

            Logs.WriteLogDebug("Las bases de datos con ese comentario son " + string.Join(" ", acNombres.Select(x => string.Format("[{0}]", x))), MethodBase.GetCurrentMethod().Name);
            return acNombres;
        }

        /// <summary>
        /// Procesa todos los informes de una determinada carpeta para añadirlos a la BD
        /// </summary>
        /// <param name="cCarpeta">Directorio que contiene los informes a procesar</param>
        /// <returns>True si todo va bien. False en caso de error</returns>
        private bool ProcesarInformes(string cCarpeta)
        {
            string cArchivoAux = "";

            using (NpgsqlConnection oConexion = new NpgsqlConnection(Program.cCadenaConexion))
            {
                using (NpgsqlCommand oComando = new NpgsqlCommand(null, oConexion))
                {
                    oConexion.Open();

                    try
                    {
                        foreach (string cArchivo in Directory.GetFiles(cCarpeta))
                        {
                            Logs.WriteLogDebug("Procesando archivo " + cArchivo, MethodBase.GetCurrentMethod().Name);
                            cArchivoAux = cArchivo;

                            //Realizaremos la importacion si se trata de un fichero *.frn
                            if (Path.GetExtension(cArchivo).Equals(".frn"))
                            {
                                Logs.WriteLogDebug("Si es un archivo con extensión frn", MethodBase.GetCurrentMethod().Name);
                                string cFichero = Path.GetFileNameWithoutExtension(cArchivo);
                                bool lExisteTipoFormulario = false;

                                //Obtenemos el Tipo de formulario / Código de formulario
                                string cTipoFormulario = Convert.ToInt32(cFichero.Substring(0, 4)).ToString("###0");
                                string cCodFormulario = Convert.ToInt32(cFichero.Substring(4, 3)).ToString("###0");
                                Logs.WriteLogDebug("Recuperamos el tipo de formulario [" + cTipoFormulario + "] y el código de formulario [" + cCodFormulario + "]", MethodBase.GetCurrentMethod().Name);

                                //Comprobamos si existe el tipo de formulario
                                // Para permitir la actualización del tipo de formulario, existirá si hay más de uno.
                                // Si no, comprobamos si hay informes con una id inferior al que estamos procesando.
                                Logs.WriteLogDebug("Comprobamos cuantos informes existen con ntipo_informe_id = " + cTipoFormulario, MethodBase.GetCurrentMethod().Name);
                                oComando.CommandText = "SELECT COUNT(*) FROM informes WHERE ntipo_informe_id = " + cTipoFormulario;
                                if (Convert.ToInt32(oComando.ExecuteScalar()) > 1)
                                {
                                    Logs.WriteLogDebug("Existe más de uno", MethodBase.GetCurrentMethod().Name);
                                    lExisteTipoFormulario = true;
                                }
                                else
                                {
                                    Logs.WriteLogDebug("Comprobamos cuantos informes existen con ntipo_informe id = " + cTipoFormulario + " y ninforme_id < " + cCodFormulario, MethodBase.GetCurrentMethod().Name);
                                    oComando.CommandText = "SELECT COUNT(*) FROM informes WHERE ntipo_informe_id = " + cTipoFormulario + " AND ninforme_id < " + cCodFormulario;
                                    if (Convert.ToInt32(oComando.ExecuteScalar()) >= 1)
                                    {
                                        Logs.WriteLogDebug("Existe al menos uno", MethodBase.GetCurrentMethod().Name);
                                        lExisteTipoFormulario = true;
                                    }
                                }

                                using (StreamReader fimportar = new StreamReader(cArchivo))
                                {
                                    string cLinea;

                                    Logs.WriteLogDebug("Recorre el archivo " + cArchivo + " para ejecutar las consultas del informe", MethodBase.GetCurrentMethod().Name);
                                    Logs.WriteLogDebug("Reemplaza siempre en el archivo " + cArchivo + " el valor cCodFormulario por su valor [" + cCodFormulario + "]", MethodBase.GetCurrentMethod().Name);
                                    while ((cLinea = fimportar.ReadLine()) != null)
                                    {
                                        if (!string.IsNullOrWhiteSpace(cLinea))
                                        {
                                            //Sustituimos en la cLinea del fichero que estamos tratando el valor cCodFormulario por su valor correspondiente
                                            cLinea = cLinea.Replace("cCodFormulario", cCodFormulario);

                                            if (cLinea.ToUpper().Contains("TIPOSINFORMES"))
                                            {
                                                Logs.WriteLogDebug("Si la consulta contiene TIPOSINFORMES", MethodBase.GetCurrentMethod().Name);
                                                if (!lExisteTipoFormulario)
                                                {
                                                    Logs.WriteLogDebug("Si no existía ese tipo lanzamos la consulta", MethodBase.GetCurrentMethod().Name);
                                                    oComando.CommandText = cLinea;
                                                    oComando.ExecuteNonQuery();
                                                }
                                            }
                                            else
                                            {
                                                Logs.WriteLogDebug("Si la consulta no contiene TIPOSINFORMES lanzamos la consulta", MethodBase.GetCurrentMethod().Name);
                                                oComando.CommandText = cLinea;
                                                oComando.ExecuteNonQuery();
                                            }
                                        }
                                    }
                                }

                                // Recuperamos los datos codificados y los decodificamos
                                string sqlAux = "SELECT datos FROM informes WHERE ntipo_informe_id = " + cTipoFormulario + " AND ninforme_id = " + cCodFormulario;
                                oComando.CommandText = sqlAux;
                                Byte[] result = (Byte[])oComando.ExecuteScalar();
                                string resultString = System.Text.Encoding.UTF8.GetString(result);
                                result = Convert.FromBase64String(resultString);
                                resultString = System.Text.Encoding.UTF8.GetString(result);


                                sqlAux = "UPDATE informes SET datos = :param0 WHERE ntipo_informe_id = " + cTipoFormulario + " AND ninforme_id = " + cCodFormulario;
                                byte[] data = System.Text.Encoding.UTF8.GetBytes(resultString);
                                oComando.CommandText = sqlAux;
                                oComando.Parameters.Clear();
                                oComando.Parameters.Add(new NpgsqlParameter("param0", data));
                                oComando.ExecuteNonQuery();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logs.WriteLogDebug(ex.Message, MethodBase.GetCurrentMethod().Name);
                        backgroundWorker1.ReportProgress(TipoReporte.AppendError, "No se pudo importar el informe: " + cArchivoAux);
                        backgroundWorker1.ReportProgress(TipoReporte.AppendLine, ex.Message);
                        return false;
                    }
                }
            }

            return true;
        }

        #endregion

        private void frmPrincipal_FormClosed(object sender, FormClosedEventArgs e)
        {
            try
            {
                ProcessStartInfo startInfo = new ProcessStartInfo
                {
                    WorkingDirectory = Application.StartupPath,
                    FileName = Application.StartupPath + "\\BRSERPREYES.exe"
                };

                if (!string.IsNullOrWhiteSpace(Program.cLoginUsuario) && !string.IsNullOrWhiteSpace(Program.cLoginPassword))
                    startInfo.Arguments = "\"" + Program.cLoginUsuario + "\"" + " " + Program.cLoginPassword;

                Process.Start(startInfo);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + "\n\r" + this.Name + " : frmPrincipal_FormClosed()", " ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void frmPrincipal_Shown(object sender, EventArgs e)
        {
            CerrarProcesos(NombresProcesos.BRSERPREYES);
        }

        public void CerrarProcesos(params string[] _procesosCerrar)
        {
            Process[] oProcesos;
            foreach (string cProceso in _procesosCerrar)
            {
                oProcesos = Process.GetProcessesByName(cProceso);
                foreach (Process oProceso in oProcesos)
                    oProceso.Kill();
            }
        }

        private void txtLog_TextChanged(object sender, EventArgs e)
        {
            txtLog.Focus();
        }

        private void backgroundWorker1_DoWork(object sender, System.ComponentModel.DoWorkEventArgs e)
        {
            Actualizar();
        }

        private void backgroundWorker1_ProgressChanged(object sender, System.ComponentModel.ProgressChangedEventArgs e)
        {
            switch (e.ProgressPercentage)
            {
                case TipoReporte.AppendText: txtLog.AppendText(Convert.ToString(e.UserState)); break;
                case TipoReporte.AppendTextNegrita: txtLog.AppendText(Convert.ToString(e.UserState), Color.Black, FontStyle.Bold); break;
                case TipoReporte.AppendLine: txtLog.AppendLine(Convert.ToString(e.UserState)); break;
                case TipoReporte.BreakLine: txtLog.BreakLine(); break;
                case TipoReporte.AppendOk: txtLog.AppendOk(); break;
                case TipoReporte.AppendError: txtLog.AppendError(Convert.ToString(e.UserState)); break;
                case TipoReporte.AppendInfo: txtLog.AppendInfo(Convert.ToString(e.UserState)); break;
                case TipoReporte.MostrarBarra: progressBar1.Visible = true; break;
                case TipoReporte.OcultarBarra: progressBar1.Visible = false; break;
                case TipoReporte.IncrementarBarra:
                    if (progressBar1.Value != progressBar1.Maximum)
                    {
                        int incremento = Convert.ToInt32(e.UserState);
                        if (progressBar1.Value + incremento > progressBar1.Maximum)
                            progressBar1.Value = progressBar1.Maximum;
                        else
                            progressBar1.Value += incremento;
                    }
                    break;
                case TipoReporte.BarraAlMaximo: progressBar1.Value = progressBar1.Maximum; break;
                case TipoReporte.RefrescarFormulario: this.Refresh(); break;
                case TipoReporte.EstablecerMaximoBarra: progressBar1.Maximum = Convert.ToInt32(e.UserState); break;
            }
        }

        private void backgroundWorker1_RunWorkerCompleted(object sender, System.ComponentModel.RunWorkerCompletedEventArgs e)
        {
            //añadimos al LOG
            StreamWriter swLog = File.AppendText(Application.StartupPath + "\\Temp\\BRSAct.log");
            swLog.Write("\r\n\r\n" + txtLog.Text);
            swLog.Flush();
            swLog.Close();
            lActualizando = false;

            opcionesToolStripMenuItem.Enabled = true;
            tsbAyuda.Enabled = true;
            tsbSalir.Enabled = true;
            Cursor.Current = Cursors.Default;
        }

        private void frmPrincipal_FormClosing(object sender, FormClosingEventArgs e)
        {
            e.Cancel = lActualizando;
        }

        private void InsertarHistoricoVersiones(string cDatabase, string cArchivoZip)
        {
            try
            {
                using (NpgsqlConnection oConexion = new NpgsqlConnection(Program.cCadenaConexion))
                using (NpgsqlCommand oComando = oConexion.CreateCommand())
                {
                    oConexion.Open();
                    oComando.CommandText = "SELECT COUNT(*) FROM brs_version WHERE bbdd = '" + cDatabase + "' AND version_zip = '" + cArchivoZip + "';";
                    if (Convert.ToInt32(oComando.ExecuteScalar()) > 0)
                    {
                        oComando.CommandText = "UPDATE brs_version SET fecha = NOW() WHERE bbdd = '" + cDatabase + "' AND version_zip = '" + cArchivoZip + "';";
                    }
                    else
                    {
                        oComando.CommandText = "INSERT INTO brs_version (bbdd, version_zip, fecha) VALUES ('" + cDatabase + "', '" + cArchivoZip + "', NOW());";
                    }
                    oComando.ExecuteNonQuery();
                }
            }
            catch (Exception)
            {
                backgroundWorker1.ReportProgress(TipoReporte.BreakLine);
                backgroundWorker1.ReportProgress(TipoReporte.AppendInfo, "No se pudo actualizar el histórico de la versión. Póngase en contacto con nuestro servicio de soporte para actualizarlo manualmente.");
            }
        }

        private void EnviarCorreo(ModoActualizacion? eModoActualizacion)
        {
            try
            {
                if (Program.nTerminal == 1)
                {
                    string CodCliente = "0";
                    string NombreGrupo = "";

                    using (NpgsqlConnection oConexion = new NpgsqlConnection(Program.cCadenaConexion))
                    using (NpgsqlCommand oComando = oConexion.CreateCommand())
                    {
                        oComando.CommandText = "SELECT ncliact FROM configgeneral;";
                        oConexion.Open();
                        CodCliente = Convert.ToString(oComando.ExecuteScalar());
                        if (string.IsNullOrWhiteSpace(CodCliente) || CodCliente == "0" || CodCliente == "9999")
                        {
                            CodCliente = "0";
                            oComando.CommandText = "SELECT cnombre_grupo FROM gruposcentros;";
                            using (NpgsqlDataReader oDataReader = oComando.ExecuteReader())
                            {
                                while (oDataReader.Read())
                                {
                                    if (!string.IsNullOrWhiteSpace(NombreGrupo))
                                        NombreGrupo += ", ";
                                    NombreGrupo += "'" + Convert.ToString(oDataReader["cnombre_grupo"]) + "'";
                                }
                            }
                        }
                    }

                    StringBuilder sb = new StringBuilder();
                    if (string.IsNullOrWhiteSpace(NombreGrupo))
                        sb.AppendLine($"El cliente con código {CodCliente} ha actualizado BRSConta a la siguiente versión:");
                    else
                        sb.AppendLine($"El cliente con el grupo {NombreGrupo} ha actualizado BRSConta a la siguiente versión:");

                    foreach (var programa in Program.acListaModulosActualizar)
                    {
                        sb.AppendLine($"{programa.Nombre}: {programa.VersionActual} -> {programa.VersionNueva}");
                    }


                    MailMessage mail = new MailMessage();
                    SmtpClient client = new SmtpClient
                    {
                        Port = 25,
                        DeliveryMethod = SmtpDeliveryMethod.Network,
                        UseDefaultCredentials = false,
                        Host = "smtp.brsinformatica.com",
                        Credentials = new NetworkCredential("noreply@brsinformatica.com", "Meetiuu3")
                    };
                    //mail.IsBodyHtml = true;
                    mail.From = new MailAddress("noreply@brsinformatica.com");
                    mail.To.Add("borja@brsinformatica.com");
                    mail.To.Add("blas@brsinformatica.com");
                    mail.Subject = $"Cliente {CodCliente} actualizó BRSConta";
                    mail.Body = sb.ToString();
                    client.Send(mail);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    class TipoReporte
    {
        public const int AppendText = 1;
        public const int AppendLine = 2;
        public const int BreakLine = 3;
        public const int AppendOk = 4;
        public const int AppendError = 5;
        public const int MostrarBarra = 6;
        public const int OcultarBarra = 7;
        public const int IncrementarBarra = 8;
        public const int BarraAlMaximo = 9;
        public const int RefrescarFormulario = 10;
        public const int EstablecerMaximoBarra = 11;
        public const int AppendTextNegrita = 12;
        public const int AppendInfo = 13;
    }

    class ArchivosUpdateBD
    {
        private string cDirectorioPadre;

        public string DirectorioPadre
        {
            get { return cDirectorioPadre; }
            set { cDirectorioPadre = value; }
        }

        private string cDirectorioVersion;

        public string DirectorioVersion
        {
            get { return cDirectorioVersion; }
            set { cDirectorioVersion = value; }
        }

        private string cArchivo;

        public string Archivo
        {
            get { return cArchivo; }
            set { cArchivo = value; }
        }

        private string cVersion;

        public string Version
        {
            get { return cVersion; }
            set
            {
                cVersion = "V." + value.Substring(0, 2) + "." +
                                  value.Substring(2, 2) + "." +
                                  value.Substring(4, 2) + "." +
                                  value.Substring(6, 2);
            }
        }

        public string ObtenerRuta
        {
            get { return DirectorioPadre + "/" + DirectorioVersion + "/"; }
        }

        public ArchivosUpdateBD(string cDirectorioPadre, string cDirectorioVersion, string cArchivo, string cVersion)
        {
            DirectorioPadre = cDirectorioPadre;
            DirectorioVersion = cDirectorioVersion;
            Archivo = cArchivo;
            Version = cVersion;
        }

    }
}
