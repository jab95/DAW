using BRSLibReyes.BD;
using BRSLibReyes.Mensajes;
using BRSLibReyes.Temas;
using Npgsql;
using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using Telerik.WinControls;
using Telerik.WinControls.UI;

namespace BRSLibReyes
{
    public class BRSLibRejilla
    {
        private static bool lConfiguracionInicialBorrado;

        public static string cColumnaSeleccionMultipleCabecera = " "; // No es espacio es Alt + 0160
        public static string cColumnaSeleccionMultiple = BRSLib.cPrefijoColumnasCalculadas + "chkSeleccionMultiple";

        /// <summary>
        /// obtiene de un archivo XML la configuración de las columnas de un GridView
        /// </summary>
        private static bool lMostrarMensaje = true;
        public static void CargarConfig(RadGridView rgvTabla, string cNombreTabla, string[] acNombreCampos, string[] acNombreCamposPersonalizado, int nUsuario, string cNombreFormulario, bool lDebeCoincidirNumeroCampos = true, bool lSeleccionMulti = false, string cCadenaConexion = null, string[] acSQLFK = null, string[] acNombreCamposFK = null, string[] acWhereFK = null, bool lSelecMultiEstado = false)
        {
            if (Debugger.IsAttached /*&& !ES_VERSION_BRSERP*/)
            {
                if (acNombreCamposPersonalizado.Length != 0 && (acNombreCamposPersonalizado.Length != acNombreCampos.Count(cNombre => cNombre != null)))
                    if (lMostrarMensaje)
                    {
                        BRSLibMensajes.Mostrar("El número de campos personalizados no coincide con el número de campos de la tabla." + Cadenas.local_cFinMensajeErrorCargarDatos, "AVISO", Boton.OK, Icono.Warning);
                        lMostrarMensaje = false;
                    }
            }

            ((GridTableElement)rgvTabla.TableElement).AlternatingRowColor = BRSLibTemas.colorPautado;
            rgvTabla.RowFormatting += new RowFormattingEventHandler(BRSLib_rgvTabla_RowFormatting);
            rgvTabla.CellFormatting += new CellFormattingEventHandler(BRSLib_rgvTabla_CellFormatting);

            // Para evitar errores borramos la columna de selección
            if (rgvTabla.Columns.Contains(cColumnaSeleccionMultiple))
                rgvTabla.Columns.Remove(cColumnaSeleccionMultiple);

            // Aplica la configuración del archivo XML de usuario, si da fallo lo borra y tratamos de cargar el XML inicial
            if (File.Exists(BRSLib.cRutaXML + "\\" + nUsuario + "_" + cNombreFormulario + ".xml"))
            {
                string cRutaArchivo = BRSLib.cRutaXML + "\\" + nUsuario + "_" + cNombreFormulario + ".xml";
                if (ComprobarCamposXML(acNombreCampos, acNombreCamposPersonalizado, cRutaArchivo))
                {
                    // En el caso de tener guardado una ordenación por columna, devolvemos true para limpiarla
                    if (LimpiarNodosXML(cRutaArchivo, rgvTabla))
                        rgvTabla.MasterTemplate.SortDescriptors.Clear();

                    rgvTabla.LoadLayout(cRutaArchivo);
                }
                else
                {
                    // Lo borramos
                    File.Delete(BRSLib.cRutaXML + "/" + BRSLib.nUsuario + "_" + cNombreFormulario + ".xml");

                    CargarConfig(rgvTabla, cNombreTabla, acNombreCampos, acNombreCamposPersonalizado, nUsuario, cNombreFormulario, lDebeCoincidirNumeroCampos, lSeleccionMulti, cCadenaConexion, acSQLFK, acNombreCamposFK);
                    return;
                }
            }
            // Aplica la configuración del archivo XML de usuario, si da fallo lo borra y generamos uno nuevo
            else if (File.Exists(Application.StartupPath + "\\Configuracion inicial\\1_" + cNombreFormulario + ".xml"))
            {
                string cRutaArchivo = Application.StartupPath + "\\Configuracion inicial\\1_" + cNombreFormulario + ".xml";
                if (ComprobarCamposXML(acNombreCampos, acNombreCamposPersonalizado, cRutaArchivo))
                {
                    // En el caso de tener guardado una ordenación por columna, devolvemos true para limpiarla
                    if (LimpiarNodosXML(cRutaArchivo, rgvTabla))
                        rgvTabla.MasterTemplate.SortDescriptors.Clear();

                    rgvTabla.LoadLayout(cRutaArchivo);
                }
                else
                {
                    // Lo borramos
                    File.Delete(Application.StartupPath + "\\Configuracion inicial\\1_" + cNombreFormulario + ".xml");

                    CargarConfig(rgvTabla, cNombreTabla, acNombreCampos, acNombreCamposPersonalizado, nUsuario, cNombreFormulario, lDebeCoincidirNumeroCampos, lSeleccionMulti, cCadenaConexion, acSQLFK, acNombreCamposFK);
                    return;
                }
            }
            else
            {
                if (BRSLib.log_debug != null) BRSLib.log_debug.WriteLineDebug("Comienzo crear xml por defecto", "BRSLib", "CargarConfigGrid", BRSLog.PALABRA_CLAVE.COMIENZA_PROCESO, "", BRSLog.LINEAVACIA.ANTES);

                Cursor.Current = Cursors.WaitCursor;
                lConfiguracionInicialBorrado = true;

                List<List<object>> acFilas = new List<List<object>>();
                Dictionary<string, string> acTiposColumnas = new Dictionary<string, string>();

                string cSQL = "";


                if (rgvTabla.Columns.Count <= 0)
                {
                    rgvTabla.CurrentRowChanged += new CurrentRowChangedEventHandler(BRSLib_rgvTabla_CurrentRowChanged);

                    // Crea una SQL que no devuelve resultados, pero permite configurar la tabla
                    string cSelect = string.Join(", ", acNombreCampos.Where(cNombre => cNombre != null).Select(cNombre => cNombreTabla + "." + cNombre));
                    string cFrom = cNombreTabla;

                    //Comprobamos si existen campos tipo FK
                    if (acSQLFK != null)
                    {
                        for (int i = 0; i < acSQLFK.Length; i++)
                        {
                            if (!cFrom.Contains(acSQLFK[i].Split('.')[0].Trim()))
                                cFrom += ", " + acSQLFK[i].Split('.')[0].Trim();
                        }
                    }

                    cSQL = "SELECT " + cSelect + " FROM " + cFrom + " WHERE 0 = 1";
                    if (acSQLFK != null)
                    {
                        for (int i = 0; i < acWhereFK.Length; i++)
                        {
                            cSQL += " AND " + acWhereFK[i];
                        }
                    }

                    //cSQL = "SELECT * FROM " + cNombreTabla + " WHERE 0 = 1 ";

                    NpgsqlConnection oConexionPostgres = new NpgsqlConnection(cCadenaConexion);
                    NpgsqlDataReader oDataReaderPostgres = null;

                    NpgsqlCommand oComandoPostgres = new NpgsqlCommand(cSQL, oConexionPostgres);

                    oConexionPostgres.Open();
                    oDataReaderPostgres = oComandoPostgres.ExecuteReader();
                    rgvTabla.MasterTemplate.LoadFrom(oDataReaderPostgres);
                    oDataReaderPostgres.Close(); oConexionPostgres.Close();

                    //if (ES_VERSION_BRSERP)
                    CargarColumnasDefectoPostgre_ERP(cCadenaConexion, cNombreTabla, acTiposColumnas, acNombreCampos.Where(cNombre => cNombre != null));
                    //else
                    //CargarColumnasDefectoPostgre(cCadenaConexion, cNombreTabla, acTiposColumnas, acNombreCampos.Where(cNombre => cNombre != null));
                }
                else
                {
                    // Guardamos los tipos y formatos de las columnas
                    if (string.IsNullOrWhiteSpace(cNombreTabla))
                    {
                        foreach (var columna in rgvTabla.Columns)
                        {
                            acTiposColumnas.Add(columna.Name, columna.DataType.Name);
                        }
                    }
                    else
                    {
                        //if (ES_VERSION_BRSERP)
                        CargarColumnasDefectoPostgre_ERP(cCadenaConexion, cNombreTabla, acTiposColumnas, acNombreCampos.Where(cNombre => cNombre != null));
                        //else
                        //    CargarColumnasDefectoPostgre(cCadenaConexion, cNombreTabla, acTiposColumnas, acNombreCampos.Where(cNombre => cNombre != null));
                    }
                }

                // Guardamos el valor de cada fila
                foreach (GridViewRowInfo fila in rgvTabla.Rows)
                {
                    List<object> acCeldas = new List<object>();
                    foreach (GridViewCellInfo celda in fila.Cells)
                    {
                        if (celda.Value != null)
                        {
                            acCeldas.Add(celda.Value);
                        }
                        else
                            acCeldas.Add(null);
                    }
                    acFilas.Add(acCeldas);
                }

                // Limpiamos y volvemos a generar las columnas
                rgvTabla.Columns.Clear();
                List<string> acConjuntoCampos;
                int nIndiceSplit = 1;

                if (string.IsNullOrWhiteSpace(cNombreTabla))
                {
                    nIndiceSplit = 0;
                    acConjuntoCampos = acNombreCampos.Where(cNombre => cNombre != null).ToList();
                }
                else
                    acConjuntoCampos = acNombreCampos.Where(cNombre => cNombre != null).Select(cNombre => cNombreTabla.ToLower() + "." + cNombre).ToList();

                if (acSQLFK != null)
                {
                    for (int i = 0; i < acSQLFK.Length; i++)
                    {
                        //acConjuntoCampos.Add(acSQLFK[i].Split('.')[0].Trim() + "." + acNombreCamposFK[i]);

                        if (acConjuntoCampos.Contains(cNombreTabla + "." + acNombreCamposFK[i]))
                        {
                            int nIndex = acConjuntoCampos.IndexOf(cNombreTabla + "." + acNombreCamposFK[i]);
                            acConjuntoCampos[nIndex] = acSQLFK[i].Split('.')[0].Trim() + "." + acNombreCamposFK[i];
                        }
                    }
                }

                for (int i = 0; i < acConjuntoCampos.Count; i++)
                {
                    string columna = acConjuntoCampos[i];
                    if (columna.Contains(" AS "))
                        columna = columna.Split(" AS ")[0];
                    string[] acTipoComentario = acTiposColumnas[columna].Split('$');
                    string cTipo = acTipoComentario[0];
                    string cComentario = (acTipoComentario.Length > 1) ? acTipoComentario[1] : "";
                    string cCabecera = null;
                    string cFormato = null;
                    string cFormatoTipoCampo = null;

                    if (BRSLib.log_debug != null) BRSLib.log_debug.WriteLineDebug("Análisis campo " + acConjuntoCampos[i], "BRSLib", "CargarConfigGrid", BRSLog.PALABRA_CLAVE.PERSONALIZADO, "ANÁLISIS", BRSLog.LINEAVACIA.NO);
                    if (BRSLib.log_debug != null) BRSLib.log_debug.WriteLineDebug("Tipo campo " + cTipo, "BRSLib", "CargarConfigGrid", BRSLog.PALABRA_CLAVE.PERSONALIZADO, "        ", BRSLog.LINEAVACIA.NO);

                    if (!string.IsNullOrWhiteSpace(cComentario))
                    {
                        string[] acParametros = cComentario.Split(new string[] { ";;" }, StringSplitOptions.RemoveEmptyEntries);
                        foreach (string cParametro in acParametros)
                        {
                            switch (cParametro.Split('=')[0])
                            {
                                case "Label":
                                    cCabecera = cParametro.Split('=')[1];
                                    break;
                                case "Format":
                                    cFormato = cParametro.Split('=')[1];
                                    break;
                                case "FormatoTipoCampo":
                                    cFormatoTipoCampo = cParametro.Split('=')[1];
                                    break;
                            }
                        }
                        if (BRSLib.log_debug != null) BRSLib.log_debug.WriteLineDebug("Comentario " + acConjuntoCampos[i] + " [Label: " + cCabecera + "] [Format: " + cFormato + "] [FormatoTipoCampo: " + cFormatoTipoCampo + "]", "BRSLib", "CargarConfigGrid", BRSLog.PALABRA_CLAVE.PERSONALIZADO, "        ", BRSLog.LINEAVACIA.NO);
                    }

                    GridViewTextBoxColumn oColumnaTexto;

                    switch (cTipo)
                    {
                        case "String":
                            oColumnaTexto = new GridViewTextBoxColumn(acConjuntoCampos[i].Split('.')[nIndiceSplit])
                            {
                                TextAlignment = ContentAlignment.MiddleLeft
                            };

                            if (cCabecera != null)
                                oColumnaTexto.HeaderText = cCabecera;

                            rgvTabla.Columns.Add(oColumnaTexto);
                            break;

                        case "TimeSpan":
                            GridViewDateTimeColumn oColumnaHora = new GridViewDateTimeColumn(acConjuntoCampos[i].Split('.')[nIndiceSplit])
                            {
                                TextAlignment = ContentAlignment.MiddleLeft
                            };

                            if (cCabecera != null)
                                oColumnaHora.HeaderText = cCabecera;

                            if (cFormato != null)
                                oColumnaHora.FormatString = AnalizaFormatoERP(cFormato, cTipo);
                            else
                                oColumnaHora.FormatString = "{0:HH:mm}";

                            rgvTabla.Columns.Add(oColumnaHora);
                            break;

                        case "Int16":
                        case "Int32":
                        case "Int64":
                        case "Decimal":
                            GridViewDecimalColumn oColumnaNumero = new GridViewDecimalColumn(acConjuntoCampos[i].Split('.')[nIndiceSplit])
                            {
                                DataType = System.Type.GetType("System." + cTipo),
                                TextAlignment = ContentAlignment.MiddleRight
                            };

                            if (cCabecera != null)
                                oColumnaNumero.HeaderText = cCabecera;

                            if (!cTipo.Equals("Decimal"))
                            {
                                if (cFormato != null)
                                    oColumnaNumero.FormatString = AnalizaFormatoERP(cFormato, cTipo);
                            }
                            else
                            {
                                if (cFormato != null)
                                    oColumnaNumero.FormatString = AnalizaFormatoERP(cFormato, cTipo);
                                else if (cFormatoTipoCampo != null)
                                    oColumnaNumero.FormatString = "{0:" + cFormatoTipoCampo + "}";

                                else
                                    oColumnaNumero.FormatString = "{0:N2}";
                            }
                            rgvTabla.Columns.Add(oColumnaNumero);
                            break;

                        case "Int16[]":
                            oColumnaTexto = new GridViewTextBoxColumn(acConjuntoCampos[i].Split('.')[nIndiceSplit])
                            {
                                TextAlignment = ContentAlignment.MiddleLeft
                            };

                            if (cCabecera != null)
                                oColumnaTexto.HeaderText = cCabecera;

                            rgvTabla.Columns.Add(oColumnaTexto);
                            break;

                        case "DateTime":
                            GridViewDateTimeColumn oColumnaFecha = new GridViewDateTimeColumn(acConjuntoCampos[i].Split('.')[nIndiceSplit]);

                            if (cCabecera != null)
                                oColumnaFecha.HeaderText = cCabecera;

                            if (cFormato != null)
                                oColumnaFecha.FormatString = AnalizaFormatoERP(cFormato, cTipo);
                            else
                                oColumnaFecha.FormatString = "{0:dd/MM/yyyy}";

                            rgvTabla.Columns.Add(oColumnaFecha);
                            break;

                        case "Boolean":
                            GridViewCheckBoxColumn oColumnaBoolean = new GridViewCheckBoxColumn(acConjuntoCampos[i].Split('.')[nIndiceSplit]);

                            if (cCabecera != null)
                                oColumnaBoolean.HeaderText = cCabecera;

                            rgvTabla.Columns.Add(oColumnaBoolean);
                            break;

                        case "Byte[]":
                            if (acConjuntoCampos[i].Contains(BRSLib.cPrefijoColumnasImagen))
                            {
                                GridViewImageColumn oColumnaImagen = new GridViewImageColumn(acConjuntoCampos[i].Split('.')[nIndiceSplit])
                                {
                                    ImageLayout = ImageLayout.Zoom
                                };

                                if (cCabecera != null)
                                    oColumnaImagen.HeaderText = cCabecera;

                                rgvTabla.Columns.Add(oColumnaImagen);
                            }
                            else
                            {
                                oColumnaTexto = new GridViewTextBoxColumn(acConjuntoCampos[i].Split('.')[nIndiceSplit])
                                {
                                    TextAlignment = ContentAlignment.MiddleLeft
                                };

                                if (cCabecera != null)
                                    oColumnaTexto.HeaderText = cCabecera;

                                rgvTabla.Columns.Add(oColumnaTexto);
                            }
                            break;

                        default:
                            if (Debugger.IsAttached)
                            {
                                if (acTiposColumnas.Count == 0)
                                    BRSLibMensajes.Mostrar("No se pudieron obtener columnas de la tabla " + cNombreTabla + "\n\rBRSLib : CargarConfigGrid()", "BRS ERP", Boton.OK, Icono.Warning);
                                else
                                    BRSLibMensajes.Mostrar("No se controló el tipo de columna: " + acTiposColumnas[acConjuntoCampos[i]] + "\n\rBRSLib : CargarConfigGrid()", "BRS ERP", Boton.OK, Icono.Warning);
                            }
                            oColumnaTexto = new GridViewTextBoxColumn(acConjuntoCampos[i].Split('.')[nIndiceSplit])
                            {
                                TextAlignment = ContentAlignment.MiddleLeft
                            };

                            if (cCabecera != null)
                                oColumnaTexto.HeaderText = cCabecera;

                            rgvTabla.Columns.Add(oColumnaTexto);
                            break;
                    }
                }

                // Limpiamos y volvemos a generar las filas
                if (rgvTabla.DataSource != null)
                    rgvTabla.DataSource = null;
                else
                    rgvTabla.Rows.Clear();

                foreach (List<object> fila in acFilas)
                {
                    rgvTabla.Rows.Add(fila.ToArray());
                }

                //FormatearColumnas(rgvTabla);
                if (BRSLib.log_debug != null) BRSLib.log_debug.WriteLineDebug("Fin crear xml por defecto", "BRSLib", "CargarConfigGrid", BRSLog.PALABRA_CLAVE.FIN_PROCESO, "", BRSLog.LINEAVACIA.DESPUES);
            }

            //if (!ES_VERSION_NUEVA)
            //{
            // En la versión nueva cargaremos siempre la cabecera desde la base de datos
            if (/*ES_VERSION_BRSERP &&*/ acNombreCamposPersonalizado.Length == 0)
            {
                //ObtenerCabecerasTabla(rgvTabla.Columns, cNombreTabla, cCadenaConexion);
                ObtenerCabecerasTabla(rgvTabla.Columns, cNombreTabla, cCadenaConexion, acNombreCampos.Where(cNombre => cNombre != null));
            }
            //verifica si es necesario cambiar los nombres de las cabeceras chequeando la última columna
            else if (acNombreCamposPersonalizado.Length >= rgvTabla.ColumnCount)
            {
                if (rgvTabla.Columns[rgvTabla.ColumnCount - 1].HeaderText != acNombreCamposPersonalizado[rgvTabla.ColumnCount - 1])
                    //aplica los nombres personalizados a la cabecera de columna
                    for (int x = 0; x < rgvTabla.ColumnCount; x++) //por cada columna del grid...
                    {
                        int y = 0;
                        while (acNombreCampos[y] != null) //compara el texto de la cabecera con los nombres de campos...
                        {
                            if (rgvTabla.Columns[x].HeaderText == acNombreCampos[y]) //si coincide lo cambia por el personalizado
                            {
                                rgvTabla.Columns[x].HeaderText = acNombreCamposPersonalizado[y]; break;
                            }
                            y++;
                            if (y == acNombreCampos.Length)
                            {
                                break;
                            }
                        }
                    }
            }
            else if (!lDebeCoincidirNumeroCampos)
            {
                List<string> acColumnasBorrar = new List<string>();

                for (int x = 0; x < rgvTabla.ColumnCount; x++) //por cada columna del grid...
                {
                    if (acNombreCampos.Contains(rgvTabla.Columns[x].HeaderText))
                    {
                        int y = 0;
                        while (acNombreCampos[y] != null) //compara el texto de la cabecera con los nombres de campos...
                        {
                            if (rgvTabla.Columns[x].HeaderText == acNombreCampos[y]) //si coincide lo cambia por el personalizado
                            { rgvTabla.Columns[x].HeaderText = acNombreCamposPersonalizado[y]; break; }
                            y++;
                        }
                    }
                    else
                        acColumnasBorrar.Add(rgvTabla.Columns[x].HeaderText);
                }

                foreach (string cNombreColumna in acColumnasBorrar)
                {
                    rgvTabla.Columns.Remove(cNombreColumna);
                }
            }
            //}

            if (lSeleccionMulti)
                InsertarColumnaSeleccion(rgvTabla, lSelecMultiEstado);

            if (lConfiguracionInicialBorrado)
            {
                lConfiguracionInicialBorrado = false;

                //if(!ES_VERSION_NUEVA)
                rgvTabla.MasterTemplate.BestFitColumns();

                // Guardamos el nuevo XML
                if (!Directory.Exists(Application.StartupPath + "\\Configuracion inicial"))
                    Directory.CreateDirectory(Application.StartupPath + "\\Configuracion inicial");

                if (!string.IsNullOrWhiteSpace(cNombreFormulario))
                    rgvTabla.SaveLayout(Application.StartupPath + "\\Configuracion inicial\\1_" + cNombreFormulario + ".xml");
            }

            if (rgvTabla.Rows.Count > 0)
                //rgvTabla.CurrentRow = rgvTabla.Rows[0];
                rgvTabla.GridNavigator.SelectFirstRow();

            rgvTabla.Font = new Font(BRSLib.acFuenteMantenimientos[0], float.Parse(BRSLib.acFuenteMantenimientos[1]));

            rgvTabla.Cursor = Cursors.Default;

            Cursor.Current = Cursors.Default;

            if (!lMostrarMensaje) lMostrarMensaje = true;

            rgvTabla.GridBehavior = new MyGridBehavior();
        }

        private static bool LimpiarNodosXML(string cRutaArchivo, RadGridView rgvTabla)
        {
            bool lBorrarOrden = false;
            bool lHayCambios = false;

            string[] acAtributosABorrar = new string[] { "SortOrder", "IsPinned", "PinPosition", "AllowSort" };

            XmlDocument documento = new XmlDocument();
            documento.Load(cRutaArchivo);

            // Leemos los nodos dentro de <MasterTemplate>
            string cNodos = "//MasterTemplate/*";

            XmlNodeList xmlListaNodos = documento.SelectNodes(cNodos);
            foreach (XmlNode oNodo in xmlListaNodos)
            {
                if (!oNodo.Name.Equals("Columns"))
                {
                    if (oNodo.Name.Equals("SortDescriptors"))
                        lBorrarOrden = true;

                    oNodo.ParentNode.RemoveChild(oNodo);
                    lHayCambios = true;
                }
                else
                {
                    foreach (XmlNode oNodoHijo in oNodo.ChildNodes)
                    {
                        for (int i = oNodoHijo.Attributes.Count - 1; i >= 0; i--)
                        {
                            XmlAttribute oAtributo = oNodoHijo.Attributes[i];

                            if (acAtributosABorrar.Contains(oAtributo.Name) && oAtributo != null)
                            {
                                oNodoHijo.Attributes.Remove(oAtributo);
                                lHayCambios = true;
                            }
                        }
                        //if (oNodoHijo.Attributes["SortOrder"] != null)
                        //{
                        //    oNodoHijo.Attributes.Remove(oNodoHijo.Attributes["SortOrder"]);
                        //    lHayCambios = true;
                        //}
                    }
                }
            }

            // Limpiamos los atributos del nodo <RadGridView>
            XmlNode xmlNodo = documento.SelectSingleNode("//RadGridView");
            List<XmlAttribute> aoListaABorrar = new List<XmlAttribute>();
            for (int i = xmlNodo.Attributes.Count - 1; i >= 0; i--)
            {
                XmlAttribute oAtributo = xmlNodo.Attributes[i];

                switch (oAtributo.Name)
                {
                    case "Cursor":
                    case "Enabled":
                    case "TabIndex":
                    // Atributos de BRSGridViewV2
                    case "CadenaConexion":
                    case "Leave":
                    case "TeclaPulsada":
                    case "Tabla":
                        xmlNodo.Attributes.Remove(oAtributo);
                        lHayCambios = true;
                        break;
                }
            }

            if (lHayCambios)
                documento.Save(cRutaArchivo);

            return lBorrarOrden;
        }

        public static void BRSLib_rgvTabla_RowFormatting(object sender, RowFormattingEventArgs e)
        {
            // Si contiene columna de selección
            if ((sender as GridDataRowElement).ViewTemplate.Columns.Contains(cColumnaSeleccionMultiple))
            {
                if (e.RowElement.RowInfo.Cells[cColumnaSeleccionMultiple].Value != null && (bool)e.RowElement.RowInfo.Cells[cColumnaSeleccionMultiple].Value)
                // Si la columna "seleccionado" está marcada
                {
                    // Le ponemos un color verde
                    e.RowElement.DrawFill = true;
                    //e.RowElement.BackColor = colorVerde;

                    e.RowElement.BackColor = e.RowElement.RowInfo.Index % 2 == 0 ? BRSLibTemas.colorSeleccionado : BRSLibTemas.colorSeleccionadoAlternado;

                }
                //else if(e.RowElement.RowInfo.Cells[BRSLibRejilla.cColumnaSeleccionMultiple].Value == null)
                //{
                //    e.RowElement.DrawFill = true;
                //    e.RowElement.BackColor = colorAmarillo;
                //}
                else
                // Si no está seleccionada
                {
                    // Si viene con un color establecido, lo pintamos, si no, reiniciamos el color
                    if (e.RowElement.Tag != null)
                    {
                        string cColor = e.RowElement.Tag.ToString();
                        if (e.RowElement.Tag is Color)
                        {
                            Color c = (Color)e.RowElement.Tag;
                            cColor = c.ToArgb().ToString();
                        }

                        e.RowElement.DrawFill = true;
                        //e.RowElement.BackColor = Color.FromArgb(Convert.ToInt32(cColor));

                        if (cColor == BRSLibTemas.colorPrimario.ToArgb().ToString())
                            e.RowElement.BackColor = e.RowElement.RowInfo.Index % 2 == 0 ? BRSLibTemas.colorPrimario : BRSLibTemas.colorPrimarioAlternado;
                        else if (cColor == BRSLibTemas.colorSecundario.ToArgb().ToString())
                            e.RowElement.BackColor = e.RowElement.RowInfo.Index % 2 == 0 ? BRSLibTemas.colorSecundario : BRSLibTemas.colorSecundarioAlternado;
                    }
                    else
                    {
                        if (e.RowElement.RowInfo.Index % 2 != 0)
                        {
                            e.RowElement.BackColor = BRSLibTemas.colorPautado;
                            e.RowElement.DrawFill = true;
                        }
                        else
                        {
                            e.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.Local);
                            e.RowElement.ResetValue(LightVisualElement.DrawFillProperty, ValueResetFlags.Local);
                        }
                    }
                }
            }
            else
            {
                // Si viene con un color establecido, lo pintamos, si no, reiniciamos el color
                if (e.RowElement.Tag != null)
                {
                    string cColor = e.RowElement.Tag.ToString();
                    if (e.RowElement.Tag is Color)
                    {
                        Color c = (Color)e.RowElement.Tag;
                        cColor = c.ToArgb().ToString();
                    }

                    e.RowElement.BackColor = Color.FromArgb(Convert.ToInt32(cColor));
                    e.RowElement.DrawFill = true;

                    if (cColor == BRSLibTemas.colorPrimario.ToArgb().ToString())
                        e.RowElement.BackColor = e.RowElement.RowInfo.Index % 2 == 0 ? BRSLibTemas.colorPrimario : BRSLibTemas.colorPrimarioAlternado;
                    else if (cColor == BRSLibTemas.colorSecundario.ToArgb().ToString())
                        e.RowElement.BackColor = e.RowElement.RowInfo.Index % 2 == 0 ? BRSLibTemas.colorSecundario : BRSLibTemas.colorSecundarioAlternado;
                }
                else
                {
                    if (e.RowElement.RowInfo.Index % 2 != 0)
                    {
                        e.RowElement.BackColor = BRSLibTemas.colorPautado;
                        e.RowElement.DrawFill = true;
                    }
                    else
                    {
                        e.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.Local);
                        e.RowElement.ResetValue(LightVisualElement.DrawFillProperty, ValueResetFlags.Local);
                    }
                }
            }
        }

        private static void BRSLib_rgvTabla_CellFormatting(object sender, CellFormattingEventArgs e)
        {


        }

        /// <summary>
        /// Comprueba si los campos del archivo XML coinciden con los campos que obtenemos de la tabla, evitando las columnas calculadas o añadidas
        /// </summary>
        /// <param name="acNombreCampos">Lista de campos de la tabla, que obtenemos de la base de datos</param>
        /// <param name="acNombreCamposPersonalizado">Lista de campos de la tabla, que obtenemos de la base de datos</param>
        /// <param name="cRutaArchivo">Ruta del archivo XML</param>
        /// <returns>True si el XML es válido, False si no lo es</returns>
        private static bool ComprobarCamposXML(string[] acNombreCampos, string[] acNombreCamposPersonalizado, string cRutaArchivo)
        {
            XmlDocument documento = new XmlDocument();
            documento.Load(cRutaArchivo);

            // Si los campos no coinciden con los que obtenemos de la base de datos, no es un XML válido
            int nContadorCamposValidos = 0;

            // Leemos los nodos dentro de <Columns>
            string cNodos = "//Columns/*";

            var aux = new string[acNombreCampos.Length];
            for (int i = 0; i < acNombreCampos.Length; i++)
            {
                if (acNombreCampos[i].Contains(" AS "))
                {
                    aux[i] = acNombreCampos[i].Split(" AS ")[1];
                }
                else
                {
                    aux[i] = acNombreCampos[i];
                }
            }

            XmlNodeList xmlListaNodos = documento.SelectNodes(cNodos);
            foreach (XmlNode oNodo in xmlListaNodos)
            {
                // Comprobamos el nombre de la columna
                string cNombre = oNodo.Attributes["Name"].Value.ToString();
                string cCabecera = oNodo.Attributes["HeaderText"].Value.ToString();

                // Si empieza por 'brsB_' se trata de una columna añadida, no la comparamos
                if (!cNombre.Contains(BRSLib.cPrefijoColumnasCalculadas))
                {
                    // Si no está en la lista de campos, lanzamos error
                    if (!aux.Contains(cNombre))
                        return false;

                    nContadorCamposValidos++;
                }
                if (/*(BRSLib.ES_VERSION_BRSERP &&*/ acNombreCamposPersonalizado.Length != 0 /*) || !BRSLib.ES_VERSION_BRSERP*/)
                {
                    // Si las cabeceras personalizadas no coinciden con las del XML, lanzamos error
                    if (!acNombreCamposPersonalizado.Contains(cCabecera) && !cCabecera.Equals(cColumnaSeleccionMultipleCabecera))
                        return false;
                }
            }

            // Si los campos no coinciden con los que obtenemos de la base de datos, no es un XML válido
            if (nContadorCamposValidos != acNombreCampos.Count(cNombre => cNombre != null))
                return false;
            return true;
        }

        private static void BRSLib_rgvTabla_CurrentRowChanged(object sender, CurrentRowChangedEventArgs e)
        {
            //Console.WriteLine("CURRENT" + rgvTabla.RowCount);
            RadGridView rgvAux = (sender as RadGridView);
            if (rgvAux.RowCount > 0)
            {
                rgvAux.BestFitColumns();
                rgvAux.CurrentRowChanged -= BRSLib_rgvTabla_CurrentRowChanged;
            }
        }

        private static void CargarColumnasDefectoPostgre_ERP(string cCadenaConexion, string cNombreTabla, Dictionary<string, string> acTiposColumnas, IEnumerable<string> acNombreCampos)
        {
            string cColumnas = "";
            var builder = new StringBuilder();
            for (int i = 0; i < acNombreCampos.Count(); i++)
            {
                if (i != 0)
                    //cColumnas += ", ";
                    builder.Append(", ");
                //cColumnas += "'" + acNombreCampos.ElementAt(i) + "'";
                if (acNombreCampos.ElementAt(i).Contains(" AS "))
                {
                    builder.Append("'" + acNombreCampos.ElementAt(i).Split(" AS ")[1] + "'");
                }
                else
                {
                    builder.Append("'" + acNombreCampos.ElementAt(i) + "'");
                }
            }
            cColumnas = builder.ToString();

            string cSQL =
                "SELECT DISTINCT " +
                    "pgc.relname as tabla, " +
                    "a.attnum as num_columna, " +
                    "a.attname as columna, " +
                    "format_type(a.atttypid, a.atttypmod) as tipo, " +
                    "com.description as comentario " +
                "FROM " +
                    "pg_attribute a " +
                "JOIN " +
                    "pg_class pgc ON pgc.oid = a.attrelid " +
                "LEFT JOIN " +
                    "pg_index i ON (pgc.oid = i.indrelid AND i.indkey[0] = a.attnum) " +
                "LEFT JOIN " +
                    "pg_description com ON (pgc.oid = com.objoid AND a.attnum = com.objsubid) " +
                "LEFT JOIN " +
                    "pg_attrdef def ON (a.attrelid = def.adrelid AND a.attnum = def.adnum) " +
                "WHERE " +
                    "a.attnum > 0 AND pgc.oid = a.attrelid AND pg_table_is_visible(pgc.oid) AND NOT a.attisdropped AND lower(pgc.relname) = lower(:param0) AND a.attname IN (" + cColumnas + ") " +
                "ORDER BY " +
                    "a.attnum;";

            NpgsqlConnection oConexionPostgres = new NpgsqlConnection(cCadenaConexion);
            NpgsqlDataReader oDataReaderPostgres = null;

            NpgsqlCommand oComandoPostgres = new NpgsqlCommand(cSQL, oConexionPostgres);
            oComandoPostgres.Parameters.Add(new NpgsqlParameter("param0", cNombreTabla));

            oConexionPostgres.Open();
            oDataReaderPostgres = oComandoPostgres.ExecuteReader();

            while (oDataReaderPostgres.Read())
            {
                string cNombre = oDataReaderPostgres["tabla"].ToString() + "." + oDataReaderPostgres["columna"].ToString();
                string cComentario = "$" + oDataReaderPostgres["comentario"].ToString();
                string[] acTipo = oDataReaderPostgres["tipo"].ToString().Split(new char[] { '(', ')' }, StringSplitOptions.RemoveEmptyEntries);

                switch (acTipo[0])
                {
                    case "bigint": // Int64
                        acTiposColumnas.Add(cNombre, "Int64" + cComentario);
                        break;

                    case "integer": // Int32
                        acTiposColumnas.Add(cNombre, "Int32" + cComentario);
                        break;

                    case "smallint": // Int16
                        acTiposColumnas.Add(cNombre, "Int16" + cComentario);
                        break;

                    case "smallint[]":
                        acTiposColumnas.Add(cNombre, "Int16[]" + cComentario);
                        break;

                    case "money": // Money
                    case "numeric": // Decimal
                        if (cComentario.Length > 1)
                            if (!cComentario.Substring(Math.Max(0, cComentario.Length - 2)).Equals(";;"))
                                cComentario += ";;";

                        if (acTipo.Length > 1)
                        {
                            string[] acEscala = acTipo[1].Split(',');
                            string cEscala = (acEscala.Length > 1) ? acEscala[1] : "2";
                            cComentario += "FormatoTipoCampo=N" + cEscala + ";;";
                        }
                        else
                            cComentario += "FormatoTipoCampo=N2;;";

                        acTiposColumnas.Add(cNombre, "Decimal" + cComentario);
                        break;

                    case "date": // Date
                    case "timestamp with time zone": // Date
                    case "timestamp without time zone": // Date
                        acTiposColumnas.Add(cNombre, "DateTime" + cComentario);
                        break;

                    case "boolean":
                        acTiposColumnas.Add(cNombre, "Boolean" + cComentario);
                        break;

                    case "time without time zone":
                        acTiposColumnas.Add(cNombre, "TimeSpan" + cComentario);
                        break;

                    case "bytea":
                        acTiposColumnas.Add(cNombre, "Byte[]" + cComentario);
                        break;

                    default:
                        acTiposColumnas.Add(cNombre, "String" + cComentario);
                        break;
                }
            }

            oDataReaderPostgres.Close();
            oConexionPostgres.Close();
        }

        private static string AnalizaFormatoERP(string cFormato, string cTipo)
        {
            switch (cTipo)
            {
                case "TimeSpan":
                case "DateTime":
                    return "{0:" + cFormato + "}";

                default:
                    if (cFormato.Contains('.') || cFormato.Contains(','))
                    {
                        int nDecimales = 0;

                        if (cFormato.Contains(','))
                            nDecimales = cFormato.Split(',')[1].Length;

                        return "{0:N" + nDecimales + "}";
                    }
                    else
                        return "{0:" + cFormato.Replace('&', '0').Replace('-', '#') + "}";
            }
        }

        private static void ObtenerCabecerasTabla(GridViewColumnCollection oColumnas, string cNombreTabla, string cCadenaConexion, IEnumerable<string> acNombreCampos)
        {
            string cColumnas = "";
            for (int i = 0; i < acNombreCampos.Count(); i++)
            {
                if (i != 0)
                    cColumnas += ", ";
                if (acNombreCampos.ElementAt(i).Contains(" AS "))
                {
                    cColumnas += "'" + acNombreCampos.ElementAt(i).Split(" AS ")[1] + "'";
                    oColumnas[i].Name = acNombreCampos.ElementAt(i).Split(" AS ")[1];
                }
                else
                    cColumnas += "'" + acNombreCampos.ElementAt(i) + "'";
            }

            string cSQL =
                "SELECT com.description as comentario, a.attname as columna " +
                "FROM " +
                    "pg_attribute a " +
                "JOIN " +
                    "pg_class pgc ON pgc.oid = a.attrelid " +
                "LEFT JOIN " +
                    "pg_index i ON (pgc.oid = i.indrelid AND i.indkey[0] = a.attnum) " +
                "LEFT JOIN " +
                    "pg_description com ON (pgc.oid = com.objoid AND a.attnum = com.objsubid) " +
                "LEFT JOIN " +
                    "pg_attrdef def ON (a.attrelid = def.adrelid AND a.attnum = def.adnum) " +
                "WHERE " +
                    "a.attnum > 0 AND pgc.oid = a.attrelid AND pg_table_is_visible(pgc.oid) AND NOT a.attisdropped AND lower(pgc.relname) = lower(" + cNombreTabla.Quoted() + ") AND a.attname IN (" + cColumnas + ") " +
                "ORDER BY " +
                    "a.attnum;";

            using (NpgsqlConnection oConexionPostgres = new NpgsqlConnection(cCadenaConexion))
            {
                using (NpgsqlCommand oComandoPostgres = new NpgsqlCommand(cSQL, oConexionPostgres))
                {
                    oConexionPostgres.Open();

                    using (NpgsqlDataReader oReaderPostgres = oComandoPostgres.ExecuteReader())
                    {
                        while (oReaderPostgres.Read())
                        {
                            if (!string.IsNullOrWhiteSpace(oReaderPostgres["comentario"].ToString()))
                            {
                                string cComentario = oReaderPostgres["comentario"].ToString();

                                string[] acParametros = cComentario.Split(new string[] { ";;" }, StringSplitOptions.RemoveEmptyEntries);
                                foreach (string cParametro in acParametros)
                                {
                                    switch (cParametro.Split('=')[0])
                                    {
                                        case "Label":
                                            oColumnas[oReaderPostgres["columna"].ToString()].HeaderText = cParametro.Split('=')[1];
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private static void InsertarColumnaSeleccion(RadGridView rgvTabla, bool lSelectMultiEstado = false)
        {
            rgvTabla.ReadOnly = false;
            rgvTabla.AllowEditRow = true;
            rgvTabla.CellBeginEdit += new GridViewCellCancelEventHandler(BRSLib_rgvTabla_CellBeginEdit);
            rgvTabla.Columns.CollectionChanged += BRSLib_Columns_CollectionChanged;
            rgvTabla.ContextMenuOpening += new ContextMenuOpeningEventHandler(BRSLib_rgvTabla_ContextMenuOpening);
            rgvTabla.CreateCell += new GridViewCreateCellEventHandler(BRSLib_rgvTabla_CreateCell);
            rgvTabla.KeyDown -= new KeyEventHandler(BRSLib_rgvTabla_KeyDown);
            rgvTabla.KeyDown += new KeyEventHandler(BRSLib_rgvTabla_KeyDown);
            rgvTabla.SelectionChanged += BRSLib_rgvTabla_SelectionChanged;
            //rgvTabla.RowFormatting += new RowFormattingEventHandler(BRSLib_rgvTabla_RowFormatting);

            GridViewCheckBoxColumn checkColumn = new GridViewCheckBoxColumn
            {
                Name = cColumnaSeleccionMultiple,
                HeaderText = cColumnaSeleccionMultipleCabecera,
                Checked = Telerik.WinControls.Enumerations.ToggleState.Off,
                Width = 39,
                ThreeState = lSelectMultiEstado
            };
            if (!rgvTabla.Columns.Contains(cColumnaSeleccionMultiple))
                rgvTabla.Columns.Insert(0, checkColumn);

            rgvTabla.Columns[0].AllowFiltering = false;
            rgvTabla.Columns[0].AllowGroup = false;
            rgvTabla.Columns[0].AllowReorder = false;
            rgvTabla.Columns[0].AllowResize = false;
            rgvTabla.Columns[0].AllowSort = false;
            rgvTabla.Columns[0].IsPinned = true;
            rgvTabla.Columns[0].PinPosition = PinnedColumnPosition.Left;
            (rgvTabla.Columns[0] as GridViewCheckBoxColumn).ThreeState = lSelectMultiEstado;
            //(rgvTabla.Columns[0] as GridViewCheckBoxColumn).EnableHeaderCheckBox = true;

            if (rgvTabla is BRSGridView gridView)
            {
                gridView.ReiniciarListaSeleccionados();
            }
        }

        /// <summary>
        /// Este método controla que sólo se pueda editar la primera columna (MultiSelect)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private static void BRSLib_rgvTabla_CellBeginEdit(object sender, GridViewCellCancelEventArgs e)
        {
            //BRSLib.MostrarMensaje("hola");
            if (!((sender as GridViewEditManager).ActiveEditor is RadCheckBoxEditor) || !((sender as GridViewEditManager).GridViewElement.CurrentColumn.Name.Equals(cColumnaSeleccionMultiple)))
                e.Cancel = true;
        }

        private static void BRSLib_Columns_CollectionChanged(object sender, Telerik.WinControls.Data.NotifyCollectionChangedEventArgs e)
        {
            if ((sender as GridViewColumnCollection).Count != 0 && (sender as GridViewColumnCollection).Contains(cColumnaSeleccionMultiple) && (sender as GridViewColumnCollection)[cColumnaSeleccionMultiple].Index != 0)
            // Si hay columnas y la columna de selección no está en la posición 0
            {
                // Lo ponemos en la posición 0
                (sender as GridViewColumnCollection).Move((sender as GridViewColumnCollection)[cColumnaSeleccionMultiple].Index, 0);
            }
        }

        private static void BRSLib_rgvTabla_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        {
            if (e.ContextMenuProvider is BRSCheckboxColumn)
                e.Cancel = true;
            else
            {
                if (sender is BRSGridView)
                {
                    for (int i = 0; i < e.ContextMenu.Items.Count; i++)
                    {
                        // Ocultamos la opción de menú pegar
                        if (e.ContextMenu.Items[i].Text == Cadenas.local_cPegar && !(sender as BRSGridView).MostrarPegar)
                        {
                            e.ContextMenu.Items[i].Visibility = ElementVisibility.Collapsed;
                        }
                    }
                }
            }
        }

        private static void BRSLib_rgvTabla_SelectionChanged(object sender, EventArgs e)
        {
            //RadGridView rgvTabla = (RadGridView)sender;
            //if (rgvTabla.SelectedRows.Count == 0)
            //{
            //    rgvTabla.SelectionChanged -= BRSLib_rgvTabla_SelectionChanged;
            //    rgvTabla.Rows[rgvTabla.CurrentRow.Index].IsSelected = true;
            //    rgvTabla.SelectionChanged += BRSLib_rgvTabla_SelectionChanged;
            //}
        }

        private static void BRSLib_rgvTabla_CreateCell(object sender, GridViewCreateCellEventArgs e)
        {
            if (e.Column != null && e.Column.Name == cColumnaSeleccionMultiple && e.CellType == typeof(GridHeaderCellElement))
            {
                e.CellElement = new BRSCheckboxColumn(e.Column, e.Row);
                if (sender is BRSGridView)
                    (sender as BRSGridView).cabeceraSeleccionMultiple = (BRSCheckboxColumn)e.CellElement;
            }
        }

        private static void BRSLib_rgvTabla_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (sender is BRSGridView rgvTabla)
                {
                    if (rgvTabla.Columns.Contains(cColumnaSeleccionMultiple) && rgvTabla.Columns[cColumnaSeleccionMultiple].IsVisible)
                    {
                        if (!e.Control && e.KeyCode == Keys.Space)
                        {
                            if (RegistroSeleccionado(rgvTabla))
                            {
                                rgvTabla.CurrentRow.Cells[cColumnaSeleccionMultiple].Value = !Convert.ToBoolean(rgvTabla.CurrentRow.Cells[cColumnaSeleccionMultiple].Value);
                                rgvTabla.GridNavigator.SelectNextRow(1);
                            }
                        }
                        else if (e.Control && !e.Alt && e.KeyCode == Keys.E)
                        {
                            rgvTabla.cabeceraSeleccionMultiple.Checked = !rgvTabla.cabeceraSeleccionMultiple.Checked;
                            if ((rgvTabla.Columns[cColumnaSeleccionMultiple] as GridViewCheckBoxColumn).Checked == Telerik.WinControls.Enumerations.ToggleState.Off)
                            {
                                (rgvTabla.Columns[cColumnaSeleccionMultiple] as GridViewCheckBoxColumn).Checked = Telerik.WinControls.Enumerations.ToggleState.On;
                            }
                            else
                            {
                                (rgvTabla.Columns[cColumnaSeleccionMultiple] as GridViewCheckBoxColumn).Checked = Telerik.WinControls.Enumerations.ToggleState.Off;
                                if (rgvTabla.CurrentRow != null)
                                    rgvTabla.GridNavigator.SelectRow(rgvTabla.CurrentRow);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\rBRSLib : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
        }

        public static List<GridViewRowInfo> ObtenerFilasSeleccionadas(RadGridView rgvTabla)
        {
            List<GridViewRowInfo> aoFilasSeleccionadas = new List<GridViewRowInfo>();

            if (rgvTabla.RowCount > 0)
            {
                if (rgvTabla.Columns.Contains(cColumnaSeleccionMultiple))
                {
                    foreach (GridViewRowInfo fila in rgvTabla.Rows)
                    {
                        if (fila.Cells[cColumnaSeleccionMultiple].Value != null)
                            if ((bool)fila.Cells[cColumnaSeleccionMultiple].Value)
                                aoFilasSeleccionadas.Add(fila);
                    }
                }
                else
                    aoFilasSeleccionadas.Add(rgvTabla.CurrentRow);
            }

            return aoFilasSeleccionadas;
        }

        /// <summary>
        /// Función para añadir un registro a la rejilla
        /// </summary>
        /// <param name="cConexion">La cadena de conexión a la base de datos</param>
        /// <param name="nombreFormulario">Nombre del formulario</param>
        /// <param name="acNombreCampos">Nombre de los campos en la base de datos</param>
        /// <param name="acNombreCamposPersonalizado">NOmbre personalizado de los campos</param>
        /// <param name="rgvTabla">Rejilla en la que queremos insertar el registro</param>
        /// <param name="cNombreTabla">Nombre de la tabla</param>
        /// <param name="clavePrimaria">Array con la clave primaria</param>
        /// <param name="valoresClavePrimaria">Array con los valores de la clave primaria</param>
        /// <param name="lDebeCoincidirNumeroCampos"></param>
        /// <param name="lSeleccionMulti"></param>
        /// <param name="oComandoPostgresAux"></param>
        /// <version>1.0.0</version>
        public static void AnadirRegistroRejilla(string cConexion, string nombreFormulario, string[] acNombreCampos, string[] acNombreCamposPersonalizado, RadGridView rgvTabla, string cNombreTabla, string[] clavePrimaria, object[] valoresClavePrimaria, bool lDebeCoincidirNumeroCampos = true, bool lSeleccionMulti = false, NpgsqlCommand oComandoPostgresAux = null)
        {
            BRSLib.WriteLogDebug("Añadiendo nuevos valores a la rejilla de la ventana " + nombreFormulario, "BRSLib", "AnadirRegistroRejilla", BRSLog.PALABRA_CLAVE.LOG);
            try
            {
                // Generamos la SQL
                string cSQL = "SELECT * FROM " + cNombreTabla + " WHERE ";
                for (int i = 0; i < clavePrimaria.Length; i++)
                {
                    if (i != 0)
                        cSQL += " AND ";
                    cSQL += clavePrimaria[i] + " = '" + Convert.ToString(valoresClavePrimaria[i]) + "'";
                }

                NpgsqlConnection oConexionPostgres = new NpgsqlConnection(cConexion);
                NpgsqlDataReader oDataReaderPostgres = null;
                NpgsqlCommand oComandoPostgres;
                if (oComandoPostgresAux == null)
                    oComandoPostgres = new NpgsqlCommand(cSQL, oConexionPostgres);
                else
                {
                    oComandoPostgres = oComandoPostgresAux;
                    oComandoPostgresAux.CommandText = cSQL;
                }
                oConexionPostgres.Open();
                oDataReaderPostgres = oComandoPostgres.ExecuteReader();
                while (oDataReaderPostgres.Read())
                {
                    if (rgvTabla.Columns.Count <= 0)
                    {
                        // Si el grid está vacío generamos las columnas
                        //if (File.Exists(BRSLib.cRutaXML + "/" + BRSLib.nUsuario + "_" + nombreFormulario + ".xml"))
                        CargarConfig(rgvTabla, cNombreTabla, acNombreCampos, acNombreCamposPersonalizado, BRSLib.nUsuario, nombreFormulario, lDebeCoincidirNumeroCampos, lSeleccionMulti, cConexion);
                        //else if (File.Exists(Application.StartupPath + "\\Configuracion inicial\\1_" + nombreFormulario + ".xml"))
                        //    rgvTabla.LoadLayout(Application.StartupPath + "\\Configuracion inicial\\1_" + nombreFormulario + ".xml");
                        //else BRSLibRejilla.CargarConfigDefectoPostgres(rgvTabla, cNombreTabla, clavePrimaria[0] + " = '-1'", acNombreCampos, acNombreCamposPersonalizado);
                    }

                    // Pasamos los datos del DataReader a cada columna del nuevo registro
                    GridViewDataRowInfo rowInfo = new GridViewDataRowInfo(rgvTabla.MasterView);
                    for (int x = 0; x < rgvTabla.ColumnCount; x++)
                    {
                        if (rgvTabla.Columns[x].Name != cColumnaSeleccionMultiple)
                            rowInfo.Cells[x].Value = oDataReaderPostgres[rgvTabla.Columns[x].Name];
                    }
                    rgvTabla.Rows.Add(rowInfo);
                }
                oDataReaderPostgres.Close();
                oConexionPostgres.Close();
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\rBRSLib : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
        }


        /// <summary>
        /// Función para modificar un registro de la rejilla
        /// </summary>
        /// <param name="cConexion">La cadena de conexión a la base de datos</param>
        /// <param name="nombreFormulario">Nombre del formulario</param>
        /// <param name="rgvTabla">Rejilla en la que queremos insertar el registro</param>
        /// <param name="cNombreTabla">Nombre de la tabla</param>
        /// <param name="clavePrimaria">Array con la clave primaria</param>
        /// <param name="valoresClavePrimaria">Array con los valores de la clave primaria</param>
        /// <version>1.0.0</version>
        public static void ModificarRegistroRejilla(string cConexion, string nombreFormulario, RadGridView rgvTabla, string cNombreTabla, string[] clavePrimaria, string[] valoresClavePrimaria)
        {
            BRSLib.WriteLogDebug("Modificando valores de la rejilla de la ventana " + nombreFormulario, "BRSLib", System.Reflection.MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.LOG);
            try
            {
                // Generamos la SQL
                string cSQL = "SELECT * FROM " + cNombreTabla + " WHERE ";
                for (int i = 0; i < clavePrimaria.Length; i++)
                {
                    if (i != 0)
                        cSQL += " AND ";
                    cSQL += clavePrimaria[i] + " = '" + valoresClavePrimaria[i] + "'";
                }

                NpgsqlConnection oConexionPostgres = new NpgsqlConnection(cConexion);
                NpgsqlDataReader oDataReaderPostgres = null;
                NpgsqlCommand oComandoPostgres = new NpgsqlCommand(cSQL, oConexionPostgres);
                oConexionPostgres.Open();
                oDataReaderPostgres = oComandoPostgres.ExecuteReader();
                while (oDataReaderPostgres.Read())
                {
                    for (int x = 0; x < rgvTabla.ColumnCount; x++)
                    {
                        // Por cada columna de la tabla
                        if (rgvTabla.Columns[x].Name != cColumnaSeleccionMultiple)
                            rgvTabla.CurrentRow.Cells[x].Value = oDataReaderPostgres[rgvTabla.Columns[x].Name];
                    }
                }
                oDataReaderPostgres.Close();
                oConexionPostgres.Close();
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\rBRSLib : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
        }

        public static void ModificarRegistroRejilla(NpgsqlCommand oComando, string nombreFormulario, RadGridView rgvTabla, string cNombreTabla, string[] clavePrimaria, string[] valoresClavePrimaria)
        {
            BRSLib.WriteLogDebug("Modificando valores de la rejilla de la ventana " + nombreFormulario, "BRSLib", System.Reflection.MethodBase.GetCurrentMethod().Name, BRSLog.PALABRA_CLAVE.LOG);
            try
            {
                string cSQL = "SELECT * FROM " + cNombreTabla + " WHERE ";
                for (int i = 0; i < clavePrimaria.Length; i++)
                {
                    if (i != 0)
                        cSQL += " AND ";
                    cSQL += clavePrimaria[i] + " = '" + valoresClavePrimaria[i] + "'";
                }

                oComando.CommandText = cSQL;
                NpgsqlDataReader oDataReaderPostgres = oComando.ExecuteReader();
                while (oDataReaderPostgres.Read())
                {
                    for (int x = 0; x < rgvTabla.ColumnCount; x++)
                    {
                        if (rgvTabla.Columns[x].Name != cColumnaSeleccionMultiple)
                            rgvTabla.CurrentRow.Cells[x].Value = oDataReaderPostgres[rgvTabla.Columns[x].Name];
                    }
                }
                oDataReaderPostgres.Close();
            }
            catch (Exception ex)
            {
                BRSLib.Logger?.LogExcepcion(ex);
                BRSLib.MostrarMensaje(ex.Message + "\n\rBRSLib : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
            }
        }

        /// <summary>
        /// Función para borrar un registro y eliminarlo de la rejilla
        /// </summary>
        /// <param name="cConexion">La cadena de conexión a la base de datos</param>
        /// <param name="nombreFormulario">Nombre del formulario</param>
        /// <param name="rgvTabla">Rejilla en la que queremos eliminar los registros</param>
        /// <param name="cNombreTabla">Nombre de la tabla en la que estamos borrando</param>
        /// <param name="clavePrimaria">Clave primaria de la tabla</param>
        /// <param name="nCodAplicacion">Código de la aplicación</param>
        /// <param name="nCodPrograma">Código del programa</param>
        /// <param name="lHistorial">Si queremos guardar el borrado en el historial o no</param>
        public static void BorrarRegistroRejilla(string cConexion, string nombreFormulario, RadGridView rgvTabla, string cNombreTabla, string[] clavePrimaria, int nCodAplicacion, int nCodPrograma, bool lHistorial = true)
        {
            BRSLib.WriteLogDebug("Borrando valores de la rejilla de la ventana " + nombreFormulario, "BRSLib", "BorrarRegistroRejilla", BRSLog.PALABRA_CLAVE.LOG);
            if (RegistroSeleccionado(rgvTabla))
            {
                NpgsqlConnection oConexion = new NpgsqlConnection(cConexion);
                NpgsqlCommand oComando = new NpgsqlCommand(null, oConexion);
                NpgsqlTransaction oTransaccion = null;
                string cSQL;

                try
                {
                    // Creamos la conexión
                    oConexion.Open();
                    oTransaccion = oConexion.BeginTransaction();
                    oComando.Transaction = oTransaccion;

                    object[] aoParametros = new object[clavePrimaria.Length];
                    cSQL = "SELECT * FROM " + cNombreTabla + " WHERE ";
                    for (int i = 0; i < clavePrimaria.Length; i++)
                    {
                        if (i != 0)
                            cSQL += " AND ";
                        cSQL += clavePrimaria[i] + " = :param" + i;
                        aoParametros[i] = rgvTabla.CurrentRow.Cells[clavePrimaria[i]].Value;
                    }
                    cSQL += " FOR UPDATE NOWAIT;";

                    // Seleccionamos y bloqueamos el registro a borrar
                    BRSRegistro registro = BRSLibBD.SeleccionarRegistro(oComando, cSQL, aoParametros);

                    if (registro.Vacio)
                    {
                        // Si no encontró el registro
                        BRSLib.MostrarMensaje(Cadenas.local_cMensajeRegistroBorrado, " ", BRSLib.Boton.OK, BRSLib.Icono.Warning);
                        rgvTabla.Rows.Remove(rgvTabla.CurrentRow);
                    }
                    else
                    {
                        // Si lo encontró
                        bool lBorrado = false;
                        if (rgvTabla.CurrentRow == null || rgvTabla.SelectedRows.Count == 0 || rgvTabla.RowCount == 0)
                        {
                            // Si no hay registro seleccionado
                            BRSLib.MostrarMensaje("\n" + Cadenas.local_cMensajeNoRegistro, " ", BRSLib.Boton.OK, BRSLib.Icono.Information);
                        }
                        else
                        {
                            if (BRSLib.MostrarMensaje(Cadenas.local_cMensajeBorrarRegistro, " ", BRSLib.Boton.OKCancel, BRSLib.Icono.Warning) == DialogResult.OK)
                            {
                                cSQL = null;

                                try
                                {
                                    // Creamos la consulta
                                    cSQL = "DELETE FROM " + cNombreTabla + " WHERE ";
                                    for (int i = 0; i < clavePrimaria.Length; i++)
                                    {
                                        if (i != 0)
                                            cSQL += " AND ";
                                        cSQL += clavePrimaria[i] + " = :param" + i;
                                    }
                                    oComando.CommandText = cSQL;

                                    // Añadimos los parámetros a la consulta
                                    for (int i = 0; i < clavePrimaria.Length; i++)
                                    {
                                        oComando.Parameters.Add(new NpgsqlParameter("param" + i, rgvTabla.CurrentRow.Cells[clavePrimaria[i]].Value));
                                    }

                                    // Ejecutamos la consulta
                                    oComando.ExecuteNonQuery();

                                    oTransaccion.Commit();
                                    oConexion.Close();

                                    lBorrado = true;
                                }
                                catch (NpgsqlException ex)
                                {
                                    oTransaccion.Rollback();
                                    if (ex.Code == "23503")
                                        BRSLib.MostrarMensaje("El registro seleccionado no pudo borrarse.\nSe encuentra en uso en la tabla «" + ex.TableName + "».", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
                                    else
                                        BRSLib.MostrarMensaje(ex.Message + "\n\r" + nombreFormulario + " : Borrar()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
                                }
                                catch (Exception ex)
                                {
                                    oTransaccion.Rollback();
                                    BRSLib.MostrarMensaje(ex.Message + "\n\r" + nombreFormulario + " : Borrar()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
                                }

                                if (lBorrado)
                                {
                                    if (lHistorial)
                                    {
                                        // Creamos el historial
                                        string cMensaje = "Borra el registro ";
                                        for (int i = 0; i < clavePrimaria.Length; i++)
                                        {
                                            if (i != 0)
                                                cMensaje += " / ";
                                            cMensaje += rgvTabla.CurrentRow.Cells[clavePrimaria[i]].Value.ToString();
                                        }
                                        cMensaje += " de la tabla " + cNombreTabla;
                                        BRSLib.GrabarRegistroAuditoria(BRSLib.nUsuario, BRSLib.nTerminal, cMensaje, nCodAplicacion, nCodPrograma);
                                    }

                                    // Elimina el registro de la rejilla
                                    rgvTabla.Rows.Remove(rgvTabla.CurrentRow);
                                    if (rgvTabla.RowCount == 0) rgvTabla.Columns.Clear();
                                    rgvTabla.Refresh();
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    if (ex.Message.Equals(Cadenas.RegistroBloqueadoException))
                    {
                        BRSLib.MostrarMensaje(Cadenas.RegistroBloqueadoException, " ", BRSLib.Boton.OK, BRSLib.Icono.Warning);
                    }
                    else
                    {
                        BRSLib.WriteLogDebug("Error al borrar un registro", "BRSLib", "BorrarRegistroRejilla", BRSLog.PALABRA_CLAVE.ERROR_EXCEPCION, "", BRSLog.LINEAVACIA.NO, ex);
                        BRSLib.Logger?.LogExcepcion(ex);
                        BRSLib.MostrarMensaje(ex.Message + "\n\rBRSLib : " + System.Reflection.MethodBase.GetCurrentMethod().Name + "()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
                    }
                }
                finally
                {
                    if (oConexion.State == ConnectionState.Open)
                        oConexion.Close();
                }
            }

        }

        /// <summary>
        /// Función que devuelve si la tabla tiene un registro seleccionado
        /// </summary>
        /// <param name="rgvTabla">La tabla que queremos comprobar si tiene registros seleccionados</param>
        /// <param name="mostrarMensaje">Booleana que indica si queremos mostrar mensaje de incidencia o no</param>
        /// <returns>Verdadero o falso</returns>
        public static bool RegistroSeleccionado(RadGridView rgvTabla, bool mostrarMensaje = true)
        {
            bool registroSeleccionado = false;

            if (rgvTabla.CurrentRow == null || rgvTabla.SelectedRows.Count == 0 || rgvTabla.RowCount == 0)
            {
                if (mostrarMensaje)
                    BRSLib.MostrarMensaje(Cadenas.local_cMensajeNoRegistro);
            }
            else
            {
                registroSeleccionado = true;
            }

            return registroSeleccionado;
        }

        /// <summary>
        /// actualiza la etiqueta de nº de registros
        /// </summary>
        /// <param name="rgvTabla">datagrid a tratar</param>
        /// <returns>string con los números de registros</returns>
        public static string ActualizarContadorRegistros(RadGridView rgvTabla)
        {
            string cResult = "";
            try
            {
                if (rgvTabla.RowCount > 0 && rgvTabla.SelectedRows.Count > 0)
                    cResult = Cadenas.local_cRegistro + " " + (rgvTabla.CurrentRow.Index + 1).ToString() + " / " + rgvTabla.RowCount.ToString();
                else
                    cResult = Cadenas.local_cRegistro + " 0 / 0";
            }
            catch (Exception ex) { BRSLib.MostrarMensaje(ex.Message + "\n\rBRSLib : ActualizarContadorRegistros()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error); }
            return cResult;
        }

        /// <summary>
        /// Función para subir o bajar un registro si estamos en el formulario de registro
        /// </summary>
        /// <param name="nombreFormulario">El nombre del formulario para mostrarlo en caso de error</param>
        /// <param name="orden">La orden de subir o bajar un registro. Parámetro “mensaje” de la función de CambiarRegistro de la tabla</param>
        /// <param name="rgvTabla">La rejilla que queremos controlar</param>
        /// <param name="clavePrimaria">Nombres de los campos clave de la rejilla</param>
        public static void CambiarRegistro(string nombreFormulario, string orden, RadGridView rgvTabla, string[] clavePrimaria)
        {
            if ((rgvTabla.MasterTemplate.SortDescriptors.Count == 0) && (rgvTabla.MasterTemplate.GroupDescriptors.Count == 0))
            {
                try
                {
                    if (orden == MovimientoRejilla.UP)
                    // Si recibe la orden de subir
                    {
                        if (rgvTabla.CurrentRow.Index > 0)
                            rgvTabla.CurrentRow = rgvTabla.Rows[rgvTabla.CurrentRow.Index - 1];
                    }
                    else if (orden == MovimientoRejilla.DOWN)
                    // Si recibe la orden de bajar
                    {
                        if (rgvTabla.CurrentRow.Index < (rgvTabla.RowCount - 1))
                            rgvTabla.CurrentRow = rgvTabla.Rows[rgvTabla.CurrentRow.Index + 1];
                    }
                    // Pasa a global la clave primaria
                    BRSLib.cCodigoSeleccionado = Convert.ToString(rgvTabla.CurrentRow.Cells[clavePrimaria[0]].Value);
                    if (clavePrimaria.Length > 1)
                        BRSLib.cCodigoSeleccionado2 = Convert.ToString(rgvTabla.CurrentRow.Cells[clavePrimaria[1]].Value);
                    if (clavePrimaria.Length > 2)
                        BRSLib.cCodigoSeleccionado3 = Convert.ToString(rgvTabla.CurrentRow.Cells[clavePrimaria[2]].Value);
                    if (clavePrimaria.Length > 3)
                        BRSLib.cCodigoSeleccionado4 = Convert.ToString(rgvTabla.CurrentRow.Cells[clavePrimaria[3]].Value);

                    // Redibuja la tabla
                    rgvTabla.Update();
                }
                catch (Exception ex)
                {
                    BRSLib.MostrarMensaje(ex.Message + "\n\r" + nombreFormulario + " : CambiarRegistro()", " ", BRSLib.Boton.OK, BRSLib.Icono.Error);
                }
            }
        }

        public static void CargarRejilla(string cWhere, string cOrden, string cConexion, RadGridView rgvTabla, string cNombreTabla, string[] acNombreCampos, string[] acNombreCamposPersonalizado, int nUsuario, string nombreFormulario)
        {
            string cSQL;
            if (string.IsNullOrWhiteSpace(cWhere))
            {
                cSQL = "SELECT * FROM " + cNombreTabla;
            }
            else
            {
                cSQL = "SELECT * FROM " + cNombreTabla + " WHERE " + cWhere;
            }

            if (!string.IsNullOrWhiteSpace(cOrden))
                cSQL += " ORDER BY " + cOrden;

            NpgsqlConnection oConexion = new NpgsqlConnection(cConexion);
            NpgsqlCommand oComando = new NpgsqlCommand(null, oConexion);
            NpgsqlDataReader oDataReader;

            oComando.CommandText = cSQL;
            oConexion.Open();
            oDataReader = oComando.ExecuteReader();

            if (oDataReader.HasRows)
            {
                rgvTabla.MasterTemplate.LoadFrom(oDataReader);
            }

            oDataReader.Close();
            oConexion.Close();

            Cursor.Current = Cursors.Default;
            Application.DoEvents();
        }
    }
}
